
#Base Scripts
	advance_time = {
		random_country = {
			if = {
				limit = {
					check_variable = { global.month > 11 }
				}
				set_variable = { global.month = 0 }
				add_to_variable = { global.years_passed = 1 }
			}
			clear_array = global.econ_gp_list_array
			# add_to_array = { global.econ_gp_list_array = ENG }
			# add_to_array = { global.econ_gp_list_array = USA }
			# add_to_array = { global.econ_gp_list_array = BRA }
			# add_to_array = { global.econ_gp_list_array = MEX }
			add_to_array = { global.econ_gp_list_array = COL }
			# add_to_array = { global.econ_gp_list_array = VEN }
			# add_to_array = { global.econ_gp_list_array = CAN }
			# add_to_array = { global.econ_gp_list_array = CHL }
			# add_to_array = { global.econ_gp_list_array = BOL }
			# add_to_array = { global.econ_gp_list_array = PRU }
			# add_to_array = { global.econ_gp_list_array = ARG }
			# add_to_array = { global.econ_gp_list_array = BUE }
			# add_to_array = { global.econ_gp_list_array = HBC }
			# add_to_array = { global.econ_gp_list_array = URG }
			# add_to_array = { global.econ_gp_list_array = PAR }
			# #
			# add_to_array = { global.econ_gp_list_array = ECU }
			# add_to_array = { global.econ_gp_list_array = PRR }
			# #
			# add_to_array = { global.econ_gp_list_array = UTA }
			# add_to_array = { global.econ_gp_list_array = NVS }
			# add_to_array = { global.econ_gp_list_array = VAN }
			# add_to_array = { global.econ_gp_list_array = BRK }
			# add_to_array = { global.econ_gp_list_array = NFL }
			# add_to_array = { global.econ_gp_list_array = BCO }
			# add_to_array = { global.econ_gp_list_array = QCI }
			# add_to_array = { global.econ_gp_list_array = NWT }
			# #
			# add_to_array = { global.econ_gp_list_array = GUA }
			# add_to_array = { global.econ_gp_list_array = HON }
			# add_to_array = { global.econ_gp_list_array = NIC }
			# add_to_array = { global.econ_gp_list_array = COS }
			# add_to_array = { global.econ_gp_list_array = ELS }
			# add_to_array = { global.econ_gp_list_array = DOM }
			# add_to_array = { global.econ_gp_list_array = HAI }
			# #
			# #Primitives
			# add_to_array = { global.econ_gp_list_array = SIX }
			# add_to_array = { global.econ_gp_list_array = CHY }
			# add_to_array = { global.econ_gp_list_array = COM }
			# add_to_array = { global.econ_gp_list_array = SHO }
			# add_to_array = { global.econ_gp_list_array = APA }
			# add_to_array = { global.econ_gp_list_array = CRW }
			# add_to_array = { global.econ_gp_list_array = BFT }
			# add_to_array = { global.econ_gp_list_array = NAV }
			# add_to_array = { global.econ_gp_list_array = NEZ }
			# add_to_array = { global.econ_gp_list_array = SEM }

			clear_array = global.econ_order_array
			clear_array = global.econ_value_array
			
			for_each_scope_loop = {
				array = global.econ_gp_list_array #global.score_tag_array

				if = {
					limit = {
						NOT = { has_variable = has_afr_empire_mechanic_system }
					}
					for_each_loop = {
						array = global.econ_value_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv < industrial_power }
							}
							add_to_array = { 
								array = global.econ_value_array
								value = industrial_power
								index = ii
							}
							add_to_array = { 
								array = global.econ_order_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.econ_value_array = industrial_power }
						add_to_array = { global.econ_order_array = THIS }
					}
				}
			}

			#Reset
				#Reset Trade Stuff
					#Sorted least to greatest
					clear_array = global.life_goods_global_trade_price_array
					clear_array = global.life_goods_global_trade_country_array

					set_variable = { global.life_goods_global_trade_amount = 0 }
					set_variable = { global.life_goods_global_trade_value = 0 }
					set_variable = { global.life_goods_global_trade_actual_value = 0 }

					clear_array = global.everyday_goods_global_trade_price_array
					clear_array = global.everyday_goods_global_trade_country_array

					set_variable = { global.everyday_goods_global_trade_amount = 0 }
					set_variable = { global.everyday_goods_global_trade_value = 0 }
					set_variable = { global.everyday_goods_global_trade_actual_value = 0 }

					clear_array = global.luxury_goods_global_trade_price_array
					clear_array = global.luxury_goods_global_trade_country_array

					set_variable = { global.luxury_goods_global_trade_amount = 0 }
					set_variable = { global.luxury_goods_global_trade_value = 0 }
					set_variable = { global.luxury_goods_global_trade_actual_value = 0 }

					clear_array = global.services_global_trade_price_array
					clear_array = global.services_global_trade_country_array

					set_variable = { global.services_global_trade_amount = 0 }
					set_variable = { global.services_global_trade_value = 0 }
					set_variable = { global.services_global_trade_actual_value = 0 }

					clear_array = global.raw_goods_global_trade_price_array
					clear_array = global.raw_goods_global_trade_country_array

					set_variable = { global.raw_goods_global_trade_amount = 0 }
					set_variable = { global.raw_goods_global_trade_value = 0 }
					set_variable = { global.raw_goods_global_trade_actual_value = 0 }

					clear_array = global.industrial_goods_global_trade_price_array
					clear_array = global.industrial_goods_global_trade_country_array

					set_variable = { global.industrial_goods_global_trade_amount = 0 }
					set_variable = { global.industrial_goods_global_trade_value = 0 }
					set_variable = { global.industrial_goods_global_trade_actual_value = 0 }
				#
				#Goods
					set_variable = { global.life_goods_supply = 0 }
					set_variable = { global.life_goods_produced_amount = 0 }

					set_variable = { global.everyday_goods_supply = 0 }
					set_variable = { global.everyday_goods_produced_amount = 0 }

					set_variable = { global.luxury_goods_supply = 0 }
					set_variable = { global.luxury_goods_produced_amount = 0 }

					set_variable = { global.services_supply = 0 }
					set_variable = { global.services_produced_amount = 0 }

					set_variable = { global.raw_goods_supply = 0 }
					set_variable = { global.raw_goods_produced_amount = 0 }

					set_variable = { global.industrial_goods_supply = 0 }
					set_variable = { global.industrial_goods_produced_amount = 0 }

					set_variable = { global.life_goods_need = 0 }
					set_variable = { global.everyday_goods_need = 0 }
					set_variable = { global.luxury_goods_need = 0 }
					set_variable = { global.services_need = 0 }
					set_variable = { global.raw_goods_need = 0 }
					set_variable = { global.industrial_goods_need = 0 }

					set_variable = { global.life_goods_demand = 0 }
					set_variable = { global.everyday_goods_demand = 0 }
					set_variable = { global.luxury_goods_demand = 0 }
					set_variable = { global.services_demand = 0 }
					set_variable = { global.raw_goods_demand = 0 }
					set_variable = { global.industrial_goods_demand = 0 }
				#
				set_variable = { global.total_money = 0 }
				set_variable = { global.highest_state_gdp = 0 }
				set_variable = { global.highest_state_gdp_c = 0 }
			#
		}
		for_each_scope_loop = {
			array = global.econ_order_array
			#Reset
				#Reset State Trade Stuff
					#Sorted least to greatest
					clear_array = life_goods_trade_price_array
					clear_array = life_goods_trade_state_array

					set_variable = { life_goods_trade_amount = 0 }
					set_variable = { life_goods_trade_value = 0 }
					
					clear_array = everyday_goods_trade_price_array
					clear_array = everyday_goods_trade_state_array

					set_variable = { everyday_goods_trade_amount = 0 }
					set_variable = { everyday_goods_trade_value = 0 }
					
					clear_array = luxury_goods_trade_price_array
					clear_array = luxury_goods_trade_state_array

					set_variable = { luxury_goods_trade_amount = 0 }
					set_variable = { luxury_goods_trade_value = 0 }
					
					clear_array = services_trade_price_array
					clear_array = services_trade_state_array

					set_variable = { services_trade_amount = 0 }
					set_variable = { services_trade_value = 0 }
					
					clear_array = raw_goods_trade_price_array
					clear_array = raw_goods_trade_state_array

					set_variable = { raw_goods_trade_amount = 0 }
					set_variable = { raw_goods_trade_value = 0 }
					
					clear_array = industrial_goods_trade_price_array
					clear_array = industrial_goods_trade_state_array

					set_variable = { industrial_goods_trade_amount = 0 }
					set_variable = { industrial_goods_trade_value = 0 }
				#
				#Reset Global Trade Stuff
					set_variable = { life_goods_global_trade_amount = 0 } #Positive: Goods Bought / Negative: Goods Sold - Note, this only applies in this effect. It's always positive elsewhere.
					set_variable = { life_goods_global_trade_value = 0 } #Positive: Amount Recieved / Negative: Amount Paid
					set_variable = { life_goods_global_trade_actual_value = 0 }

					set_variable = { everyday_goods_global_trade_amount = 0 }
					set_variable = { everyday_goods_global_trade_value = 0 }
					set_variable = { everyday_goods_global_trade_actual_value = 0 }

					set_variable = { luxury_goods_global_trade_amount = 0 }
					set_variable = { luxury_goods_global_trade_value = 0 }
					set_variable = { luxury_goods_global_trade_actual_value = 0 }

					set_variable = { services_global_trade_amount = 0 }
					set_variable = { services_global_trade_value = 0 }
					set_variable = { services_global_trade_actual_value = 0 }

					set_variable = { raw_goods_global_trade_amount = 0 }
					set_variable = { raw_goods_global_trade_value = 0 }
					set_variable = { raw_goods_global_trade_actual_value = 0 }

					set_variable = { industrial_goods_global_trade_amount = 0 }
					set_variable = { industrial_goods_global_trade_value = 0 }
					set_variable = { industrial_goods_global_trade_actual_value = 0 }
				#
				set_variable = { life_goods_base_price = 0 }
				set_variable = { life_goods_price = 0 }

				set_variable = { everyday_goods_base_price = 0 }
				set_variable = { everyday_goods_price = 0 }
				
				set_variable = { luxury_goods_base_price = 0 }
				set_variable = { luxury_goods_price = 0 }
				
				set_variable = { services_base_price = 0 }
				set_variable = { services_price = 0 }
				
				set_variable = { raw_goods_base_price = 0 }
				set_variable = { raw_goods_price = 0 }
				
				set_variable = { industrial_goods_base_price = 0 }
				set_variable = { industrial_goods_price = 0 }

				#Bought
				set_variable = { life_goods_bought_amount = 0 }
				set_variable = { life_goods_bought_value = 0 }

				set_variable = { everyday_goods_bought_amount = 0 }
				set_variable = { everyday_goods_bought_value = 0 }
				
				set_variable = { luxury_goods_bought_amount = 0 }
				set_variable = { luxury_goods_bought_value = 0 }
				
				set_variable = { services_bought_amount = 0 }
				set_variable = { services_bought_value = 0 }
				
				set_variable = { raw_goods_bought_amount = 0 }
				set_variable = { raw_goods_bought_value = 0 }
				
				set_variable = { industrial_goods_bought_amount = 0 }
				set_variable = { industrial_goods_bought_value = 0 }

				#Sold
				set_variable = { life_goods_sold_amount = 0 }
				set_variable = { life_goods_sold_value = 0 }

				set_variable = { everyday_goods_sold_amount = 0 }
				set_variable = { everyday_goods_sold_value = 0 }
				
				set_variable = { luxury_goods_sold_amount = 0 }
				set_variable = { luxury_goods_sold_value = 0 }
				
				set_variable = { services_sold_amount = 0 }
				set_variable = { services_sold_value = 0 }
				
				set_variable = { raw_goods_sold_amount = 0 }
				set_variable = { raw_goods_sold_value = 0 }
				
				set_variable = { industrial_goods_sold_amount = 0 }
				set_variable = { industrial_goods_sold_value = 0 }

				#Government
				set_variable = { life_goods_government_stockpile = 0 }
				set_variable = { everyday_goods_government_stockpile = 0 }
				set_variable = { luxury_goods_government_stockpile = 0 }
				set_variable = { services_government_stockpile = 0 }
				set_variable = { raw_goods_government_stockpile = 0 }
				set_variable = { industrial_goods_government_stockpile = 0 }
				
				set_variable = { life_goods_government_demand = 0 }
				set_variable = { everyday_goods_government_demand = 0 }
				set_variable = { luxury_goods_government_demand = 0 }
				set_variable = { services_government_demand = 0 }
				set_variable = { raw_goods_government_demand = 0 }
				set_variable = { industrial_goods_government_demand = 0 }

				reset_supply = yes
				reset_demand = yes
			#
			set_variable = { actual_revenue = 0 }
			set_variable = { actual_income_tax_revenue = 0 }
			set_variable = { actual_spending = 0 }
			set_variable = { actual_infrastructure_spending = 0 }
			set_variable = { actual_construction_spending = 0 }
			set_variable = { actual_industrial_spending = 0 }
			set_variable = { actual_tariff_revenue = 0 }
			set_variable = { actual_sales_tax_revenue = 0 }
			set_variable = { actual_trade_subsidy_spending = 0 }
			set_variable = { actual_administration_spending = 0 }
			set_variable = { actual_life_goods_spending = 0 }
			set_variable = { actual_everyday_goods_spending = 0 }
			set_variable = { actual_luxury_goods_spending = 0 }
			set_variable = { actual_services_spending = 0 }
			set_variable = { actual_raw_goods_spending = 0 }
			set_variable = { actual_industrial_goods_spending = 0 }
			set_variable = { actual_military_spending = 0 }
			set_variable = { actual_project_spending = 0 }

			set_variable = { gdp_amount = 0 }
			set_variable = { gdp_amount_this_year = 0 }
			set_variable = { gdp_amount_last_year = 0 }
			set_variable = { annual_gdp_amount = 0 }

			set_variable = { total_money = 0 }

			set_variable = { national_bank_interest_gain = 0 }

			calibrate_tech_bonuses = yes

			#Military Demand (Also handles battalion count)
			calculate_military_demand = yes

			every_controlled_state = {
				#Soldier Payroll
					set_temp_variable = { payroll_temp = 0 }

					set_temp_variable = { conscripted_amount = PREV.max_available_manpower_k } #Temporary
					multiply_temp_variable = { conscripted_amount = 10 }
					divide_temp_variable = { conscripted_amount = PREV.max_manpower_k }
					multiply_temp_variable = { conscripted_amount = state_population_k }
					divide_temp_variable = { conscripted_amount = 10 }

					set_temp_variable = { need_temp = global.conscripted_base_life_goods_need }
					multiply_temp_variable = { need_temp = conscripted_amount }
					divide_temp_variable = { need_temp = 100 }
					multiply_temp_variable = { need_temp = life_goods_price }
					add_to_temp_variable = { payroll_temp = need_temp }

					set_temp_variable = { need_temp = global.conscripted_base_everyday_goods_need }
					multiply_temp_variable = { need_temp = conscripted_amount }
					divide_temp_variable = { need_temp = 100 }
					multiply_temp_variable = { need_temp = everyday_goods_price }
					add_to_temp_variable = { payroll_temp = need_temp }
					
					set_temp_variable = { need_temp = global.conscripted_base_luxury_goods_need }
					multiply_temp_variable = { need_temp = conscripted_amount }
					divide_temp_variable = { need_temp = 100 }
					multiply_temp_variable = { need_temp = luxury_goods_price }
					add_to_temp_variable = { payroll_temp = need_temp }

					multiply_temp_variable = { payroll_temp = global.conscripted_payroll_multiplier }
					add_to_variable = { pops_earnings = payroll_temp }
					add_to_variable = { soldiers_earnings = payroll_temp }
					subtract_from_variable = { PREV.treasury = payroll_temp }
					add_to_variable = { PREV.actual_military_spending = payroll_temp }
				#
				#Pops/Govt get paid
					set_variable = { pops_spending = 0 }
					set_variable = { pops_goods_spending = 0 }

					add_to_variable = { pops_money = pops_earnings }
					#Upper Strata
					set_temp_variable = { tax_temp = aristocrats_earnings }
					add_to_temp_variable = { tax_temp = capitalists_earnings }
					multiply_temp_variable = { tax_temp = PREV.income_tax_upper_strata_percentage }
					divide_temp_variable = { tax_temp = 100 }
					subtract_from_variable = { pops_money = tax_temp }
					add_to_variable = { pops_spending = tax_temp }
					add_to_variable = { PREV.treasury = tax_temp }
					add_to_variable = { PREV.actual_income_tax_revenue = tax_temp }

					#Middle Strata
					set_temp_variable = { tax_temp = artisans_earnings }
					add_to_temp_variable = { tax_temp = professionals_earnings }
					add_to_temp_variable = { tax_temp = specialists_earnings }
					multiply_temp_variable = { tax_temp = PREV.income_tax_middle_strata_percentage }
					divide_temp_variable = { tax_temp = 100 }
					subtract_from_variable = { pops_money = tax_temp }
					add_to_variable = { pops_spending = tax_temp }
					add_to_variable = { PREV.treasury = tax_temp }
					add_to_variable = { PREV.actual_income_tax_revenue = tax_temp }

					#Lower Strata
					set_temp_variable = { tax_temp = rgos_earnings }
					add_to_temp_variable = { tax_temp = craftsmen_earnings }
					add_to_temp_variable = { tax_temp = clerks_earnings }
					multiply_temp_variable = { tax_temp = PREV.income_tax_lower_strata_percentage }
					divide_temp_variable = { tax_temp = 100 }
					subtract_from_variable = { pops_money = tax_temp }
					add_to_variable = { pops_spending = tax_temp }
					add_to_variable = { PREV.treasury = tax_temp }
					add_to_variable = { PREV.actual_income_tax_revenue = tax_temp }
				#
				#Administration
					set_temp_variable = { admin_temp = pops_earnings }
					multiply_temp_variable = { admin_temp = global.administration_base_expense }
					divide_temp_variable = { admin_temp = 100 }
					if = {
						limit = {
							check_variable = { pops_amount < global.administration_population_expense }
						}
						set_temp_variable = { modifier_temp = global.administration_population_expense }
						subtract_from_temp_variable = { modifier_temp = pops_amount }
						divide_temp_variable = { modifier_temp = global.administration_population_expense }
						multiply_temp_variable = { modifier_temp = global.administration_population_expense_modifier }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_temp_variable = { admin_temp = modifier_temp }
					}
					subtract_from_variable = { PREV.treasury = admin_temp }
					add_to_variable = { PREV.actual_administration_spending = admin_temp }
				#
				#Reset
					set_variable = { life_goods_trade_amount = 0 } #Positive: Goods Bought / Negative: Goods Sold - Note, this only applies in this effect. It's always positive elsewhere.
					set_variable = { life_goods_trade_value = 0 } #Positive: Amount Recieved / Negative: Amount Paid

					set_variable = { everyday_goods_trade_amount = 0 }
					set_variable = { everyday_goods_trade_value = 0 }
					
					set_variable = { luxury_goods_trade_amount = 0 }
					set_variable = { luxury_goods_trade_value = 0 }
					
					set_variable = { services_trade_amount = 0 }
					set_variable = { services_trade_value = 0 }
					
					set_variable = { raw_goods_trade_amount = 0 }
					set_variable = { raw_goods_trade_value = 0 }
					
					set_variable = { industrial_goods_trade_amount = 0 }
					set_variable = { industrial_goods_trade_value = 0 }

					#Bought
					set_variable = { life_goods_bought_amount = 0 }
					set_variable = { life_goods_bought_value = 0 }

					set_variable = { everyday_goods_bought_amount = 0 }
					set_variable = { everyday_goods_bought_value = 0 }
					
					set_variable = { luxury_goods_bought_amount = 0 }
					set_variable = { luxury_goods_bought_value = 0 }
					
					set_variable = { services_bought_amount = 0 }
					set_variable = { services_bought_value = 0 }
					
					set_variable = { raw_goods_bought_amount = 0 }
					set_variable = { raw_goods_bought_value = 0 }
					
					set_variable = { industrial_goods_bought_amount = 0 }
					set_variable = { industrial_goods_bought_value = 0 }

					#Sold
					set_variable = { life_goods_sold_amount = 0 }
					set_variable = { life_goods_sold_value = 0 }

					set_variable = { everyday_goods_sold_amount = 0 }
					set_variable = { everyday_goods_sold_value = 0 }
					
					set_variable = { luxury_goods_sold_amount = 0 }
					set_variable = { luxury_goods_sold_value = 0 }
					
					set_variable = { services_sold_amount = 0 }
					set_variable = { services_sold_value = 0 }
					
					set_variable = { raw_goods_sold_amount = 0 }
					set_variable = { raw_goods_sold_value = 0 }
					
					set_variable = { industrial_goods_sold_amount = 0 }
					set_variable = { industrial_goods_sold_value = 0 }


					set_variable = { pops_earnings = 0 }

					set_variable = { pops_savings_deposits = 0 }
					set_variable = { pops_savings_interest = 0 }
					set_variable = { pops_savings_withdrawals = 0 }

					set_variable = { pops_artisans_everyday_goods_sold = 0 }
					set_variable = { pops_artisans_luxury_goods_sold = 0 }
					set_variable = { pops_artisans_industrial_goods_sold = 0 }

					set_variable = { pops_rgos_life_goods_sold = 0 }
					set_variable = { pops_rgos_raw_goods_sold = 0 }

					set_variable = { pops_services_sold = 0 }


					set_variable = { soldiers_earnings = 0 }
					set_variable = { officers_earnings = 0 }

					set_variable = { factory_everyday_goods_sold = 0 }
					set_variable = { factory_everyday_goods_earnings = 0 }
					set_variable = { factory_everyday_goods_spending = 0 }
					
					set_variable = { factory_luxury_goods_sold = 0 }
					set_variable = { factory_luxury_goods_earnings = 0 }
					set_variable = { factory_luxury_goods_spending = 0 }
					
					set_variable = { factory_industrial_goods_sold = 0 }
					set_variable = { factory_industrial_goods_earnings = 0 }
					set_variable = { factory_industrial_goods_spending = 0 }
				#
				
				set_variable = { infrastructure_max_level = PREV.infrastructure_max_level }

				
				#Pops withdraw from Savings
					if = {
						limit = {
							check_variable = { pops_money < 0 }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { pops_savings_temp = pops_money }
						multiply_temp_variable = { pops_savings_temp = -2 }
						if = {
							limit = {
								check_variable = { pops_savings_temp > pops_savings }
							}
							set_temp_variable = { pops_savings_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_money = pops_savings_temp }
						add_to_variable = { pops_savings_withdrawals = pops_savings_temp }
					}
					if = {
						limit = {
							check_variable = { pops_life_goods_fulfilled_percentage < pops_annual_life_goods_fulfilled_percentage }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { pops_savings_temp = pops_annual_life_goods_fulfilled_percentage }
						subtract_from_temp_variable = { pops_savings_temp = pops_life_goods_fulfilled_percentage }
						multiply_temp_variable = { pops_savings_temp = pops_life_goods_need }
						multiply_temp_variable = { pops_savings_temp = life_goods_price }
						divide_temp_variable = { pops_savings_temp = 2 }
						if = {
							limit = {
								check_variable = { pops_savings_temp > pops_savings }
							}
							set_temp_variable = { pops_savings_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_money = pops_savings_temp }
						add_to_variable = { pops_savings_withdrawals = pops_savings_temp }
					}
					if = {
						limit = {
							check_variable = { pops_everyday_goods_fulfilled_percentage < pops_annual_everyday_goods_fulfilled_percentage }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { pops_savings_temp = pops_annual_everyday_goods_fulfilled_percentage }
						subtract_from_temp_variable = { pops_savings_temp = pops_everyday_goods_fulfilled_percentage }
						multiply_temp_variable = { pops_savings_temp = pops_everyday_goods_need }
						multiply_temp_variable = { pops_savings_temp = everyday_goods_price }
						divide_temp_variable = { pops_savings_temp = 2 }
						if = {
							limit = {
								check_variable = { pops_savings_temp > pops_savings }
							}
							set_temp_variable = { pops_savings_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_money = pops_savings_temp }
						add_to_variable = { pops_savings_withdrawals = pops_savings_temp }
					}
					if = {
						limit = {
							check_variable = { pops_luxury_goods_fulfilled_percentage < pops_annual_luxury_goods_fulfilled_percentage }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { pops_savings_temp = pops_annual_luxury_goods_fulfilled_percentage }
						subtract_from_temp_variable = { pops_savings_temp = pops_luxury_goods_fulfilled_percentage }
						multiply_temp_variable = { pops_savings_temp = pops_luxury_goods_need }
						multiply_temp_variable = { pops_savings_temp = luxury_goods_price }
						divide_temp_variable = { pops_savings_temp = 2 }
						if = {
							limit = {
								check_variable = { pops_savings_temp > pops_savings }
							}
							set_temp_variable = { pops_savings_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_money = pops_savings_temp }
						add_to_variable = { pops_savings_withdrawals = pops_savings_temp }
					}
					if = {
						limit = {
							check_variable = { pops_savings > pops_savings_goal }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { withdraw_temp = pops_savings }
						subtract_from_temp_variable = { withdraw_temp = pops_savings_goal }
						divide_temp_variable = { withdraw_temp = 2 }
						if = {
							limit = {
								check_variable = { withdraw_temp > pops_savings }
							}
							set_temp_variable = { withdraw_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = withdraw_temp }
						add_to_variable = { pops_money = withdraw_temp }
						add_to_variable = { pops_savings_withdrawals = withdraw_temp }
					}
				#

				#Industrial Subsidies
					set_temp_variable = { raw_goods_temp = factory_raw_goods_need }
					multiply_temp_variable = { raw_goods_temp = raw_goods_price }
					set_temp_variable = { industrial_goods_temp = factory_industrial_goods_need }
					multiply_temp_variable = { industrial_goods_temp = industrial_goods_price }

					set_temp_variable = { industrial_spending_temp = raw_goods_temp }
					add_to_temp_variable = { industrial_spending_temp = industrial_goods_temp }
					multiply_temp_variable = { industrial_spending_temp = PREV.industrial_subsidy_percentage }
					divide_temp_variable = { industrial_spending_temp = 100 }

					#Splitting between industry categories
					set_temp_variable = { m_temp = factory_everyday_goods_amount }
					multiply_temp_variable = { m_temp = 100 }
					divide_temp_variable = { m_temp = private_factory_amount }
					multiply_temp_variable = { m_temp = industrial_spending_temp }
					divide_temp_variable = { m_temp = 100 }
					add_to_variable = { factory_everyday_goods_money = m_temp }

					set_temp_variable = { m_temp = factory_luxury_goods_amount }
					multiply_temp_variable = { m_temp = 100 }
					divide_temp_variable = { m_temp = private_factory_amount }
					multiply_temp_variable = { m_temp = industrial_spending_temp }
					divide_temp_variable = { m_temp = 100 }
					add_to_variable = { factory_luxury_goods_money = m_temp }

					set_temp_variable = { m_temp = factory_industrial_goods_amount }
					multiply_temp_variable = { m_temp = 100 }
					divide_temp_variable = { m_temp = private_factory_amount }
					multiply_temp_variable = { m_temp = industrial_spending_temp }
					divide_temp_variable = { m_temp = 100 }
					add_to_variable = { factory_industrial_goods_money = m_temp }

					subtract_from_variable = { PREV.treasury = industrial_spending_temp }
					add_to_variable = { PREV.actual_industrial_spending = industrial_spending_temp }
				#

				update_modifiers_state_effects = yes
				
				#Demand will be calculated from the purchasing power and needs of factories, governments, and pops. National demand will be an accumulation of state demand.
				calculate_demand = yes #Do first

				update_production_maintenance = yes #Do just after Demand
				
				calculate_supply = yes #Do just after Production
			}

			#National Supply & Demand, Setting National Price
				#adjust_national_price = yes
			#

			every_controlled_state = {
				#Reset Other things
					set_variable = { aristocrats_earnings = 0 }
					set_variable = { artisans_earnings = 0 }
					set_variable = { rgos_earnings = 0 }
					set_variable = { craftsmen_earnings = 0 }
					set_variable = { specialists_earnings = 0 }
					set_variable = { clerks_earnings = 0 }
					set_variable = { professionals_earnings = 0 }
					set_variable = { capitalists_earnings = 0 }


					set_variable = { pops_life_goods_fulfilled_percentage = 0 }
					set_variable = { pops_everyday_goods_fulfilled_percentage = 0 }
					set_variable = { pops_luxury_goods_fulfilled_percentage = 0 }
					set_variable = { pops_services_fulfilled_percentage = 0 }

					set_variable = { pops_artisans_raw_goods_fulfilled_percentage = 0 }

					set_variable = { factory_everyday_goods_raw_goods_fulfilled_percentage = 0 }
					set_variable = { factory_everyday_goods_industrial_goods_fulfilled_percentage = 0 }
					set_variable = { factory_luxury_goods_raw_goods_fulfilled_percentage = 0 }
					set_variable = { factory_luxury_goods_industrial_goods_fulfilled_percentage = 0 }
					set_variable = { factory_industrial_goods_raw_goods_fulfilled_percentage = 0 }
					set_variable = { factory_industrial_goods_industrial_goods_fulfilled_percentage = 0 }

					set_variable = { infrastructure_industrial_goods_fulfilled_percentage = 0 }
					
					set_variable = { pops_rgos_mechanization_industrial_goods_fulfilled_percentage = 0 }
					set_variable = { pops_rgos_mechanization_expansion_industrial_goods_fulfillment = 0 }
				#

				#Infra gets its money
					add_to_variable = { pops_earnings = infrastructure_money }

					set_variable = { infrastructure_money = infrastructure_industrial_goods_demand }
					multiply_variable = { infrastructure_money = industrial_goods_price }

					set_temp_variable = { govt_payment_temp = PREV.infrastructure_subsidy_percentage }
					multiply_temp_variable = { govt_payment_temp = infrastructure_money }
					divide_temp_variable = { govt_payment_temp = 100 }

					set_temp_variable = { pop_payment_temp = infrastructure_money }
					subtract_from_temp_variable = { pop_payment_temp = govt_payment_temp }

					subtract_from_variable = { pops_money = pop_payment_temp }
					add_to_variable = { pops_spending = pop_payment_temp }
					subtract_from_variable = { PREV.treasury = govt_payment_temp }
					add_to_variable = { PREV.actual_infrastructure_spending = govt_payment_temp }

				#
				
				#Construction
					#Infrastructure
						if = {
							limit = {
								has_state_flag = infrastructure_construction_government_subsidized
							}
							set_temp_variable = { infra_construction_funds_temp = global.infrastructure_construction_base_speed }
							set_temp_variable = { modifier_temp = infrastructure_build_speed_effect }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_temp_variable = { infra_construction_funds_temp = modifier_temp }
							multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { infra_construction_funds_temp = 100 }
							subtract_from_temp_variable = { infra_construction_funds_temp = infrastructure_construction_investment_money }
							if = {
								limit = {
									check_variable = { infra_construction_funds_temp > 0 }
								}
								add_to_variable = { infrastructure_construction_investment_money = infra_construction_funds_temp }
								subtract_from_variable = { PREV.treasury = infra_construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = infra_construction_funds_temp }
							}
						}
					#
					#Everyday Goods Factory
						if = {
							limit = {
								has_state_flag = factory_everyday_goods_construction_government_subsidized
							}
							set_temp_variable = { construction_funds_temp = global.factory_everyday_goods_construction_base_speed }
							set_temp_variable = { modifier_temp = factory_build_speed_effect }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_temp_variable = { construction_funds_temp = modifier_temp }
							multiply_temp_variable = { construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { construction_funds_temp = 100 }
							subtract_from_temp_variable = { construction_funds_temp = factory_everyday_goods_construction_investment_money }
							if = {
								limit = {
									check_variable = { construction_funds_temp > 0 }
								}
								add_to_variable = { factory_everyday_goods_construction_investment_money = construction_funds_temp }
								subtract_from_variable = { PREV.treasury = construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = construction_funds_temp }
							}
						}
					#
					#Luxury Goods Factory
						if = {
							limit = {
								has_state_flag = factory_luxury_goods_construction_government_subsidized
							}
							set_temp_variable = { construction_funds_temp = global.factory_luxury_goods_construction_base_speed }
							set_temp_variable = { modifier_temp = factory_build_speed_effect }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_temp_variable = { construction_funds_temp = modifier_temp }
							multiply_temp_variable = { construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { construction_funds_temp = 100 }
							subtract_from_temp_variable = { construction_funds_temp = factory_luxury_goods_construction_investment_money }
							if = {
								limit = {
									check_variable = { construction_funds_temp > 0 }
								}
								add_to_variable = { factory_luxury_goods_construction_investment_money = construction_funds_temp }
								subtract_from_variable = { PREV.treasury = construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = construction_funds_temp }
							}
						}
					#
					#Industrial Goods Factory
						if = {
							limit = {
								has_state_flag = factory_industrial_goods_construction_government_subsidized
							}
							set_temp_variable = { construction_funds_temp = global.factory_industrial_goods_construction_base_speed }
							set_temp_variable = { modifier_temp = factory_build_speed_effect }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_temp_variable = { construction_funds_temp = modifier_temp }
							multiply_temp_variable = { construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { construction_funds_temp = 100 }
							subtract_from_temp_variable = { construction_funds_temp = factory_industrial_goods_construction_investment_money }
							if = {
								limit = {
									check_variable = { construction_funds_temp > 0 }
								}
								add_to_variable = { factory_industrial_goods_construction_investment_money = construction_funds_temp }
								subtract_from_variable = { PREV.treasury = construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = construction_funds_temp }
							}
						}
					#
				#

				#Minimum goods supply to be in a state
					#life_goods
						set_variable = { life_goods_supply_min = life_goods_supply } #Minimum number of goods the state will keep
						multiply_variable = { life_goods_supply_min = 0.2 }

						set_temp_variable = { demand_temp = life_goods_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < life_goods_supply_min }
							}
							set_variable = { life_goods_supply_min = demand_temp }
						}

					#everyday_goods
						set_variable = { everyday_goods_supply_min = everyday_goods_supply } #Minimum number of goods the state will keep
						multiply_variable = { everyday_goods_supply_min = 0.2 }

						set_temp_variable = { demand_temp = everyday_goods_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < everyday_goods_supply_min }
							}
							set_variable = { everyday_goods_supply_min = demand_temp }
						}

					#luxury_goods
						set_variable = { luxury_goods_supply_min = luxury_goods_supply } #Minimum number of goods the state will keep
						multiply_variable = { luxury_goods_supply_min = 0.2 }

						set_temp_variable = { demand_temp = luxury_goods_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < luxury_goods_supply_min }
							}
							set_variable = { luxury_goods_supply_min = demand_temp }
						}

					#services
						set_variable = { services_supply_min = services_supply } #Minimum number of goods the state will keep
						multiply_variable = { services_supply_min = 0.2 }

						set_temp_variable = { demand_temp = services_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < services_supply_min }
							}
							set_variable = { services_supply_min = demand_temp }
						}

					#raw_goods
						set_variable = { raw_goods_supply_min = raw_goods_supply } #Minimum number of goods the state will keep
						multiply_variable = { raw_goods_supply_min = 0.2 }

						set_temp_variable = { demand_temp = raw_goods_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < raw_goods_supply_min }
							}
							set_variable = { raw_goods_supply_min = demand_temp }
						}

					#industrial_goods
						set_variable = { industrial_goods_supply_min = industrial_goods_supply } #Minimum number of goods the state will keep
						multiply_variable = { industrial_goods_supply_min = 0.2 }

						set_temp_variable = { demand_temp = industrial_goods_demand }
						divide_temp_variable = { demand_temp = 2 }
						if = {
							limit = {
								check_variable = { demand_temp < industrial_goods_supply_min }
							}
							set_variable = { industrial_goods_supply_min = demand_temp }
						}

				#

				#Adds up the state's price to the national scope
					set_temp_variable = { goods_price_temp = life_goods_price }
					multiply_temp_variable = { goods_price_temp = life_goods_supply }
					add_to_variable = { PREV.life_goods_price = goods_price_temp }
					
					set_temp_variable = { goods_price_temp = everyday_goods_price }
					multiply_temp_variable = { goods_price_temp = everyday_goods_supply }
					add_to_variable = { PREV.everyday_goods_price = goods_price_temp }
					
					set_temp_variable = { goods_price_temp = luxury_goods_price }
					multiply_temp_variable = { goods_price_temp = luxury_goods_supply }
					add_to_variable = { PREV.luxury_goods_price = goods_price_temp }
					
					set_temp_variable = { goods_price_temp = services_price }
					multiply_temp_variable = { goods_price_temp = services_supply }
					add_to_variable = { PREV.services_price = goods_price_temp }
					
					set_temp_variable = { goods_price_temp = raw_goods_price }
					multiply_temp_variable = { goods_price_temp = raw_goods_supply }
					add_to_variable = { PREV.raw_goods_price = goods_price_temp }
					
					set_temp_variable = { goods_price_temp = industrial_goods_price }
					multiply_temp_variable = { goods_price_temp = industrial_goods_supply }
					add_to_variable = { PREV.industrial_goods_price = goods_price_temp }

					#Base Price
					set_temp_variable = { goods_base_price_temp = life_goods_base_price }
					multiply_temp_variable = { goods_base_price_temp = life_goods_supply }
					add_to_variable = { PREV.life_goods_base_price = goods_base_price_temp }
					
					set_temp_variable = { goods_base_price_temp = everyday_goods_base_price }
					multiply_temp_variable = { goods_base_price_temp = everyday_goods_supply }
					add_to_variable = { PREV.everyday_goods_base_price = goods_base_price_temp }
					
					set_temp_variable = { goods_base_price_temp = luxury_goods_base_price }
					multiply_temp_variable = { goods_base_price_temp = luxury_goods_supply }
					add_to_variable = { PREV.luxury_goods_base_price = goods_base_price_temp }
					
					set_temp_variable = { goods_base_price_temp = services_base_price }
					multiply_temp_variable = { goods_base_price_temp = services_supply }
					add_to_variable = { PREV.services_base_price = goods_base_price_temp }
					
					set_temp_variable = { goods_base_price_temp = raw_goods_base_price }
					multiply_temp_variable = { goods_base_price_temp = raw_goods_supply }
					add_to_variable = { PREV.raw_goods_base_price = goods_base_price_temp }
					
					set_temp_variable = { goods_base_price_temp = industrial_goods_base_price }
					multiply_temp_variable = { goods_base_price_temp = industrial_goods_supply }
					add_to_variable = { PREV.industrial_goods_base_price = goods_base_price_temp }
				#

				#States get added to the trade array and get sorted by price
                    #life_goods
                        for_each_loop = {
                            array = PREV.life_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > life_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.life_goods_trade_price_array 
                                    value = life_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.life_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.life_goods_trade_price_array = life_goods_price }
                            add_to_array = { PREV.life_goods_trade_state_array = THIS }
                        }

                    #everyday_goods
                        for_each_loop = {
                            array = PREV.everyday_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > everyday_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.everyday_goods_trade_price_array 
                                    value = everyday_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.everyday_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.everyday_goods_trade_price_array = everyday_goods_price }
                            add_to_array = { PREV.everyday_goods_trade_state_array = THIS }
                        }

                    #luxury_goods
                        for_each_loop = {
                            array = PREV.luxury_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > luxury_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.luxury_goods_trade_price_array 
                                    value = luxury_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.luxury_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.luxury_goods_trade_price_array = luxury_goods_price }
                            add_to_array = { PREV.luxury_goods_trade_state_array = THIS }
                        }

                    #services
                        for_each_loop = {
                            array = PREV.services_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > services_price }
                                }
                                add_to_array = { 
                                    array = PREV.services_trade_price_array 
                                    value = services_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.services_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.services_trade_price_array = services_price }
                            add_to_array = { PREV.services_trade_state_array = THIS }
                        }

                    #raw_goods
                        for_each_loop = {
                            array = PREV.raw_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > raw_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.raw_goods_trade_price_array 
                                    value = raw_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.raw_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.raw_goods_trade_price_array = raw_goods_price }
                            add_to_array = { PREV.raw_goods_trade_state_array = THIS }
                        }

                    #industrial_goods
                        for_each_loop = {
                            array = PREV.industrial_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > industrial_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.industrial_goods_trade_price_array 
                                    value = industrial_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.industrial_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.industrial_goods_trade_price_array = industrial_goods_price }
                            add_to_array = { PREV.industrial_goods_trade_state_array = THIS }
                        }

				#
			}

			#Divide the Price/Base Price by supply to get actual price
				divide_variable = { life_goods_price = life_goods_supply }
				if = {
					limit = {
						check_variable = { life_goods_price < life_goods_trade_price_array^0 }
					}
					set_variable = { life_goods_price = life_goods_trade_price_array^0 }
				}
				
				divide_variable = { everyday_goods_price = everyday_goods_supply }
				if = {
					limit = {
						check_variable = { everyday_goods_price < everyday_goods_trade_price_array^0 }
					}
					set_variable = { everyday_goods_price = everyday_goods_trade_price_array^0 }
				}
				
				divide_variable = { luxury_goods_price = luxury_goods_supply }
				if = {
					limit = {
						check_variable = { luxury_goods_price < luxury_goods_trade_price_array^0 }
					}
					set_variable = { luxury_goods_price = luxury_goods_trade_price_array^0 }
				}
				
				divide_variable = { services_price = services_supply }
				if = {
					limit = {
						check_variable = { services_price < services_trade_price_array^0 }
					}
					set_variable = { services_price = services_trade_price_array^0 }
				}
				
				divide_variable = { raw_goods_price = raw_goods_supply }
				if = {
					limit = {
						check_variable = { raw_goods_price < raw_goods_trade_price_array^0 }
					}
					set_variable = { raw_goods_price = raw_goods_trade_price_array^0 }
				}
				
				divide_variable = { industrial_goods_price = industrial_goods_supply }
				if = {
					limit = {
						check_variable = { industrial_goods_price < industrial_goods_trade_price_array^0 }
					}
					set_variable = { industrial_goods_price = industrial_goods_trade_price_array^0 }
				}
			#

			#Countries get added to the global trade array and get sorted by price
				#life_goods
					for_each_loop = {
						array = global.life_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > life_goods_price }
							}
							add_to_array = { 
								array = global.life_goods_global_trade_price_array 
								value = life_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.life_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.life_goods_global_trade_price_array = life_goods_price }
						add_to_array = { global.life_goods_global_trade_country_array = THIS }
					}

				#everyday_goods
					for_each_loop = {
						array = global.everyday_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > everyday_goods_price }
							}
							add_to_array = { 
								array = global.everyday_goods_global_trade_price_array 
								value = everyday_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.everyday_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.everyday_goods_global_trade_price_array = everyday_goods_price }
						add_to_array = { global.everyday_goods_global_trade_country_array = THIS }
					}

				#luxury_goods
					for_each_loop = {
						array = global.luxury_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > luxury_goods_price }
							}
							add_to_array = { 
								array = global.luxury_goods_global_trade_price_array 
								value = luxury_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.luxury_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.luxury_goods_global_trade_price_array = luxury_goods_price }
						add_to_array = { global.luxury_goods_global_trade_country_array = THIS }
					}

				#services
					for_each_loop = {
						array = global.services_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > services_price }
							}
							add_to_array = { 
								array = global.services_global_trade_price_array 
								value = services_price
								index = ii
							}
							add_to_array = { 
								array = global.services_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.services_global_trade_price_array = services_price }
						add_to_array = { global.services_global_trade_country_array = THIS }
					}

				#raw_goods
					for_each_loop = {
						array = global.raw_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > raw_goods_price }
							}
							add_to_array = { 
								array = global.raw_goods_global_trade_price_array 
								value = raw_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.raw_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.raw_goods_global_trade_price_array = raw_goods_price }
						add_to_array = { global.raw_goods_global_trade_country_array = THIS }
					}

				#industrial_goods
					for_each_loop = {
						array = global.industrial_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > industrial_goods_price }
							}
							add_to_array = { 
								array = global.industrial_goods_global_trade_price_array 
								value = industrial_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.industrial_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.industrial_goods_global_trade_price_array = industrial_goods_price }
						add_to_array = { global.industrial_goods_global_trade_country_array = THIS }
					}

			#
		}

		for_each_scope_loop = {
			array = global.econ_order_array

			#INTERSTATE TRADE
				#States with excess demand to supply will try to buy goods. States with highest price get first "bite"
				#NOTE: It is assumed that all imported & exported supply & demand will be fulfilled so to eliminate intermediaries in the states and making the system more complicated
						#than it needs to be

						#I really don't need to write down these notes, do I. I'm probably gonna be the only one reading them lmao. Hello later me. Howya doin? 
						# - Doing fine. Thanks for writing this, past me, btw. Really appreciate it while I'm making the international trade system.

				#Trade Distance: State to State, Transport Cost


                #life_goods
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = life_goods_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:life_goods_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = life_goods_demand }
								set_temp_variable = { spending_left = life_goods_demand }
								multiply_temp_variable = { spending_left = life_goods_price }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.life_goods_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:life_goods_price < life_goods_price }
                                            check_variable = { buy_amount_left > 0 }
                                            check_variable = { spending_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:life_goods_supply_min < state_temp:life_goods_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:life_goods_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < life_goods_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:life_goods_demand }
												divide_temp_variable = { u = life_goods_price }
												divide_temp_variable = { u = life_goods_demand }
												
												set_temp_variable = { buy_amount = life_goods_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:life_goods_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:life_goods_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:life_goods_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { percent_temp = state_temp:life_goods_supply_min }
												divide_temp_variable = { percent_temp = state_temp:life_goods_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { percent_temp = buy_amount }
												divide_temp_variable = { percent_temp = 2 }
												add_to_temp_variable = { percent_temp = state_temp:life_goods_supply_min }
												divide_temp_variable = { percent_temp = state_temp:life_goods_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:life_goods_price }

												if = {
													limit = {
														check_variable = { cost_temp > spending_left }
													}
													set_temp_variable = { cost_temp = spending_left }
													set_temp_variable = { buy_amount = cost_temp }
													divide_temp_variable = { buy_amount = state_temp:life_goods_price }
												}
												if = {
													limit = {
														check_variable = { buy_amount > 0 }
													}

													subtract_from_variable = { state_temp:life_goods_supply = buy_amount }
													subtract_from_variable = { state_temp:life_goods_trade_amount = buy_amount }
													add_to_variable = { state_temp:life_goods_trade_value = cost_temp }

													divide_temp_variable = { buy_amount = transport_cost }

													subtract_from_temp_variable = { buy_amount_left = buy_amount }
													subtract_from_temp_variable = { spending_left = cost_temp }
													add_to_variable = { life_goods_supply = buy_amount }
													add_to_variable = { life_goods_supply_min = buy_amount }
													add_to_variable = { life_goods_trade_amount = buy_amount }
													subtract_from_variable = { life_goods_trade_value = cost_temp }
													add_to_variable = { PREV.life_goods_trade_amount = buy_amount }
													add_to_variable = { PREV.life_goods_trade_value = cost_temp }
												}
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }

                #everyday_goods
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = everyday_goods_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:everyday_goods_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = everyday_goods_demand }
								set_temp_variable = { spending_left = everyday_goods_demand }
								multiply_temp_variable = { spending_left = everyday_goods_price }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.everyday_goods_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:everyday_goods_price < everyday_goods_price }
                                            check_variable = { buy_amount_left > 0 }
                                            check_variable = { spending_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:everyday_goods_supply_min < state_temp:everyday_goods_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:everyday_goods_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < everyday_goods_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:everyday_goods_demand }
												divide_temp_variable = { u = everyday_goods_price }
												divide_temp_variable = { u = everyday_goods_demand }
												
												set_temp_variable = { buy_amount = everyday_goods_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:everyday_goods_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:everyday_goods_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:everyday_goods_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { percent_temp = state_temp:everyday_goods_supply_min }
												divide_temp_variable = { percent_temp = state_temp:everyday_goods_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { percent_temp = buy_amount }
												divide_temp_variable = { percent_temp = 2 }
												add_to_temp_variable = { percent_temp = state_temp:everyday_goods_supply_min }
												divide_temp_variable = { percent_temp = state_temp:everyday_goods_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:everyday_goods_price }

												if = {
													limit = {
														check_variable = { cost_temp > spending_left }
													}
													set_temp_variable = { cost_temp = spending_left }
													set_temp_variable = { buy_amount = cost_temp }
													divide_temp_variable = { buy_amount = state_temp:everyday_goods_price }
												}
												if = {
													limit = {
														check_variable = { buy_amount > 0 }
													}

													subtract_from_variable = { state_temp:everyday_goods_supply = buy_amount }
													subtract_from_variable = { state_temp:everyday_goods_trade_amount = buy_amount }
													add_to_variable = { state_temp:everyday_goods_trade_value = cost_temp }

													divide_temp_variable = { buy_amount = transport_cost }

													subtract_from_temp_variable = { buy_amount_left = buy_amount }
													subtract_from_temp_variable = { spending_left = cost_temp }
													add_to_variable = { everyday_goods_supply = buy_amount }
													add_to_variable = { everyday_goods_supply_min = buy_amount }
													add_to_variable = { everyday_goods_trade_amount = buy_amount }
													subtract_from_variable = { everyday_goods_trade_value = cost_temp }
													add_to_variable = { PREV.everyday_goods_trade_amount = buy_amount }
													add_to_variable = { PREV.everyday_goods_trade_value = cost_temp }
												}
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }

                #luxury_goods
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = luxury_goods_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:luxury_goods_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = luxury_goods_demand }
								set_temp_variable = { spending_left = luxury_goods_demand }
								multiply_temp_variable = { spending_left = luxury_goods_price }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.luxury_goods_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:luxury_goods_price < luxury_goods_price }
                                            check_variable = { buy_amount_left > 0 }
                                            check_variable = { spending_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:luxury_goods_supply_min < state_temp:luxury_goods_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:luxury_goods_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < luxury_goods_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:luxury_goods_demand }
												divide_temp_variable = { u = luxury_goods_price }
												divide_temp_variable = { u = luxury_goods_demand }
												
												set_temp_variable = { buy_amount = luxury_goods_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:luxury_goods_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:luxury_goods_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:luxury_goods_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { percent_temp = state_temp:luxury_goods_supply_min }
												divide_temp_variable = { percent_temp = state_temp:luxury_goods_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { percent_temp = buy_amount }
												divide_temp_variable = { percent_temp = 2 }
												add_to_temp_variable = { percent_temp = state_temp:luxury_goods_supply_min }
												divide_temp_variable = { percent_temp = state_temp:luxury_goods_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:luxury_goods_price }

												if = {
													limit = {
														check_variable = { cost_temp > spending_left }
													}
													set_temp_variable = { cost_temp = spending_left }
													set_temp_variable = { buy_amount = cost_temp }
													divide_temp_variable = { buy_amount = state_temp:luxury_goods_price }
												}
												if = {
													limit = {
														check_variable = { buy_amount > 0 }
													}

													subtract_from_variable = { state_temp:luxury_goods_supply = buy_amount }
													subtract_from_variable = { state_temp:luxury_goods_trade_amount = buy_amount }
													add_to_variable = { state_temp:luxury_goods_trade_value = cost_temp }

													divide_temp_variable = { buy_amount = transport_cost }

													subtract_from_temp_variable = { buy_amount_left = buy_amount }
													subtract_from_temp_variable = { spending_left = cost_temp }
													add_to_variable = { luxury_goods_supply = buy_amount }
													add_to_variable = { luxury_goods_supply_min = buy_amount }
													add_to_variable = { luxury_goods_trade_amount = buy_amount }
													subtract_from_variable = { luxury_goods_trade_value = cost_temp }
													add_to_variable = { PREV.luxury_goods_trade_amount = buy_amount }
													add_to_variable = { PREV.luxury_goods_trade_value = cost_temp }
												}
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }

                #services
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = services_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:services_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = services_demand }
								set_temp_variable = { spending_left = services_demand }
								multiply_temp_variable = { spending_left = services_price }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.services_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:services_price < services_price }
                                            check_variable = { buy_amount_left > 0 }
                                            check_variable = { spending_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:services_supply_min < state_temp:services_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:services_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < services_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:services_demand }
												divide_temp_variable = { u = services_price }
												divide_temp_variable = { u = services_demand }
												
												set_temp_variable = { buy_amount = services_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:services_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:services_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:services_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { percent_temp = state_temp:services_supply_min }
												divide_temp_variable = { percent_temp = state_temp:services_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { percent_temp = buy_amount }
												divide_temp_variable = { percent_temp = 2 }
												add_to_temp_variable = { percent_temp = state_temp:services_supply_min }
												divide_temp_variable = { percent_temp = state_temp:services_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:services_price }

												if = {
													limit = {
														check_variable = { cost_temp > spending_left }
													}
													set_temp_variable = { cost_temp = spending_left }
													set_temp_variable = { buy_amount = cost_temp }
													divide_temp_variable = { buy_amount = state_temp:services_price }
												}
												if = {
													limit = {
														check_variable = { buy_amount > 0 }
													}

													subtract_from_variable = { state_temp:services_supply = buy_amount }
													subtract_from_variable = { state_temp:services_trade_amount = buy_amount }
													add_to_variable = { state_temp:services_trade_value = cost_temp }

													divide_temp_variable = { buy_amount = transport_cost }

													subtract_from_temp_variable = { buy_amount_left = buy_amount }
													subtract_from_temp_variable = { spending_left = cost_temp }
													add_to_variable = { services_supply = buy_amount }
													add_to_variable = { services_supply_min = buy_amount }
													add_to_variable = { services_trade_amount = buy_amount }
													subtract_from_variable = { services_trade_value = cost_temp }
													add_to_variable = { PREV.services_trade_amount = buy_amount }
													add_to_variable = { PREV.services_trade_value = cost_temp }
												}
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }

                #raw_goods
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = raw_goods_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:raw_goods_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = raw_goods_demand }
								set_temp_variable = { spending_left = raw_goods_demand }
								multiply_temp_variable = { spending_left = raw_goods_price }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.raw_goods_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:raw_goods_price < raw_goods_price }
                                            check_variable = { buy_amount_left > 0 }
                                            check_variable = { spending_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:raw_goods_supply_min < state_temp:raw_goods_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:raw_goods_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < raw_goods_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:raw_goods_demand }
												divide_temp_variable = { u = raw_goods_price }
												divide_temp_variable = { u = raw_goods_demand }
												
												set_temp_variable = { buy_amount = raw_goods_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:raw_goods_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:raw_goods_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:raw_goods_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { percent_temp = state_temp:raw_goods_supply_min }
												divide_temp_variable = { percent_temp = state_temp:raw_goods_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { percent_temp = buy_amount }
												divide_temp_variable = { percent_temp = 2 }
												add_to_temp_variable = { percent_temp = state_temp:raw_goods_supply_min }
												divide_temp_variable = { percent_temp = state_temp:raw_goods_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:raw_goods_price }

												if = {
													limit = {
														check_variable = { cost_temp > spending_left }
													}
													set_temp_variable = { cost_temp = spending_left }
													set_temp_variable = { buy_amount = cost_temp }
													divide_temp_variable = { buy_amount = state_temp:raw_goods_price }
												}
												if = {
													limit = {
														check_variable = { buy_amount > 0 }
													}

													subtract_from_variable = { state_temp:raw_goods_supply = buy_amount }
													subtract_from_variable = { state_temp:raw_goods_trade_amount = buy_amount }
													add_to_variable = { state_temp:raw_goods_trade_value = cost_temp }

													divide_temp_variable = { buy_amount = transport_cost }

													subtract_from_temp_variable = { buy_amount_left = buy_amount }
													subtract_from_temp_variable = { spending_left = cost_temp }
													add_to_variable = { raw_goods_supply = buy_amount }
													add_to_variable = { raw_goods_supply_min = buy_amount }
													add_to_variable = { raw_goods_trade_amount = buy_amount }
													subtract_from_variable = { raw_goods_trade_value = cost_temp }
													add_to_variable = { PREV.raw_goods_trade_amount = buy_amount }
													add_to_variable = { PREV.raw_goods_trade_value = cost_temp }
												}
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }

                #industrial_goods
                    #Loops from highest price states to lowest
                    set_temp_variable = { start_temp = industrial_goods_trade_state_array^num }
                    subtract_from_temp_variable = { start_temp = 1 }
                    for_loop_effect = {
                        start = start_temp
                        end = 0
                        compare = greater_than_or_equals
                        add = -1
                        value = ii


                        #Scopes to state
                        var:industrial_goods_trade_state_array^ii = {
                            
                            #Checks if the state actually has more demand than supply. If it doesn't, this is pointless
                                set_temp_variable = { buy_amount_left = industrial_goods_demand }
								set_temp_variable = { spending_left = industrial_goods_demand }
								multiply_temp_variable = { spending_left = industrial_goods_price }

                                #Loops thru cheapest states to buy from
                                for_each_loop = {
                                    array = PREV.industrial_goods_trade_state_array
                                    value = state_temp
                                    index = iii
                                    break = cheapest_brk

                                    #Checks if the state is cheaper & transport is affordabole 
                                    #TODO - Transport cost
                                    if = {
                                        limit = {
                                            check_variable = { state_temp:industrial_goods_price < industrial_goods_price }
                                            check_variable = { buy_amount_left > 0 }
                                            check_variable = { spending_left > 0 }
                                        }
										if = {
											limit = {
												check_variable = { state_temp:industrial_goods_supply_min < state_temp:industrial_goods_supply }
											}
											#Transport Cost
											var:state_temp = {
												set_variable = { PREV.transport_cost = distance_to@PREV } #This needs to be a normal variable
											}
											divide_variable = { transport_cost = global.base_transport_cost_divisor }
											set_temp_variable = { modifier_temp = transport_cost_effect }
											add_to_temp_variable = { modifier_temp = 1 }
											multiply_variable = { transport_cost = modifier_temp }
											add_to_variable = { transport_cost = 1 }

											set_temp_variable = { true_price = state_temp:industrial_goods_price }
											multiply_temp_variable = { true_price = transport_cost }
											if = {
												limit = {
													check_variable = { true_price < industrial_goods_price }
												}
												#Do Trade
												set_temp_variable = { u = true_price }
												multiply_temp_variable = { u = state_temp:industrial_goods_demand }
												divide_temp_variable = { u = industrial_goods_price }
												divide_temp_variable = { u = industrial_goods_demand }
												
												set_temp_variable = { buy_amount = industrial_goods_supply }
												multiply_temp_variable = { buy_amount = u }
												multiply_temp_variable = { buy_amount = -1 }
												add_to_temp_variable = { buy_amount = state_temp:industrial_goods_supply }
												add_to_temp_variable = { u = 1 }
												divide_temp_variable = { buy_amount = u }
												
												multiply_temp_variable = { buy_amount = 0.7 }

												multiply_temp_variable = { buy_amount = transport_cost }

												set_temp_variable = { good_max_temp = state_temp:industrial_goods_supply }
												subtract_from_temp_variable = { good_max_temp = state_temp:industrial_goods_supply_min }
												
												clamp_temp_variable = {
													var = buy_amount
													max = good_max_temp
												}
												clamp_temp_variable = {
													var = buy_amount
													min = 0
												}
												set_temp_variable = { percent_temp = state_temp:industrial_goods_supply_min }
												divide_temp_variable = { percent_temp = state_temp:industrial_goods_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { percent_temp = buy_amount }
												divide_temp_variable = { percent_temp = 2 }
												add_to_temp_variable = { percent_temp = state_temp:industrial_goods_supply_min }
												divide_temp_variable = { percent_temp = state_temp:industrial_goods_supply }
												set_temp_variable = { percentage_temp = 1 }
												subtract_from_temp_variable = { percentage_temp = percent_temp }
												multiply_temp_variable = { buy_amount = percentage_temp }

												set_temp_variable = { cost_temp = buy_amount }
												multiply_temp_variable = { cost_temp = state_temp:industrial_goods_price }

												if = {
													limit = {
														check_variable = { cost_temp > spending_left }
													}
													set_temp_variable = { cost_temp = spending_left }
													set_temp_variable = { buy_amount = cost_temp }
													divide_temp_variable = { buy_amount = state_temp:industrial_goods_price }
												}
												if = {
													limit = {
														check_variable = { buy_amount > 0 }
													}

													subtract_from_variable = { state_temp:industrial_goods_supply = buy_amount }
													subtract_from_variable = { state_temp:industrial_goods_trade_amount = buy_amount }
													add_to_variable = { state_temp:industrial_goods_trade_value = cost_temp }

													divide_temp_variable = { buy_amount = transport_cost }

													subtract_from_temp_variable = { buy_amount_left = buy_amount }
													subtract_from_temp_variable = { spending_left = cost_temp }
													add_to_variable = { industrial_goods_supply = buy_amount }
													add_to_variable = { industrial_goods_supply_min = buy_amount }
													add_to_variable = { industrial_goods_trade_amount = buy_amount }
													subtract_from_variable = { industrial_goods_trade_value = cost_temp }
													add_to_variable = { PREV.industrial_goods_trade_amount = buy_amount }
													add_to_variable = { PREV.industrial_goods_trade_value = cost_temp }
												}
											}
										}
                                    }
                                    else = {
                                        set_temp_variable = { cheapest_brk = 1 }
                                    }
                                }
                        }
                    }

			#
			#Government Demand
				
				calculate_govt_demand = yes
				
				add_to_variable = { life_goods_demand = life_goods_government_demand }
				add_to_variable = { everyday_goods_demand = everyday_goods_government_demand }
				add_to_variable = { luxury_goods_demand = luxury_goods_government_demand }	
				add_to_variable = { services_demand = services_government_demand }
				add_to_variable = { raw_goods_demand = raw_goods_government_demand }
				add_to_variable = { industrial_goods_demand = industrial_goods_government_demand }
			#
			#Minimum goods supply to be in a country & Some necessary vars for resolving international trade

				#Excess added up from each individual state
				set_variable = { life_goods_supply_min = 0 }
				set_variable = { life_goods_supply = 0 }
				set_variable = { everyday_goods_supply_min = 0 }
				set_variable = { everyday_goods_supply = 0 }
				set_variable = { luxury_goods_supply_min = 0 }
				set_variable = { luxury_goods_supply = 0 }
				set_variable = { services_supply_min = 0 }
				set_variable = { services_supply = 0 }
				set_variable = { raw_goods_supply_min = 0 }
				set_variable = { raw_goods_supply = 0 }
				set_variable = { industrial_goods_supply_min = 0 }
				set_variable = { industrial_goods_supply = 0 }
				every_controlled_state = {
					add_to_variable = { PREV.life_goods_supply_min = life_goods_supply_min }
					add_to_variable = { PREV.life_goods_supply = life_goods_supply }

					add_to_variable = { PREV.everyday_goods_supply_min = everyday_goods_supply_min }
					add_to_variable = { PREV.everyday_goods_supply = everyday_goods_supply }

					add_to_variable = { PREV.luxury_goods_supply_min = luxury_goods_supply_min }
					add_to_variable = { PREV.luxury_goods_supply = luxury_goods_supply }

					add_to_variable = { PREV.services_supply_min = services_supply_min }
					add_to_variable = { PREV.services_supply = services_supply }

					add_to_variable = { PREV.raw_goods_supply_min = raw_goods_supply_min }
					add_to_variable = { PREV.raw_goods_supply = raw_goods_supply }

					add_to_variable = { PREV.industrial_goods_supply_min = industrial_goods_supply_min }
					add_to_variable = { PREV.industrial_goods_supply = industrial_goods_supply }
				}
				set_variable = { life_goods_supply_demand_ratio = life_goods_supply }
				divide_variable = { life_goods_supply_demand_ratio = life_goods_demand }
				set_variable = { everyday_goods_supply_demand_ratio = everyday_goods_supply }
				divide_variable = { everyday_goods_supply_demand_ratio = everyday_goods_demand }
				set_variable = { luxury_goods_supply_demand_ratio = luxury_goods_supply }
				divide_variable = { luxury_goods_supply_demand_ratio = luxury_goods_demand }
				set_variable = { services_supply_demand_ratio = services_supply }
				divide_variable = { services_supply_demand_ratio = services_demand }
				set_variable = { raw_goods_supply_demand_ratio = raw_goods_supply }
				divide_variable = { raw_goods_supply_demand_ratio = raw_goods_demand }
				set_variable = { industrial_goods_supply_demand_ratio = industrial_goods_supply }
				divide_variable = { industrial_goods_supply_demand_ratio = industrial_goods_demand }
			#
		}

			#NOTE: Masters get first access to puppet/colony's market. This needs to be implemented at some point

		for_each_scope_loop = {
			array = global.econ_order_array

			#INTERNATIONAL TRADE
				#Countries with excess demand to supply will try to buy goods. Countries in the order of the "Great Powers List" go first. 
				#It is assumed that all imported and exported supply/demand will be fulfilled. This will be fulfilled in order of cheapest states to most expensive in exports and most expensive to cheapest in imports.

                #life_goods
					set_temp_variable = { buy_amount_left = life_goods_demand }
					set_temp_variable = { spending_left = life_goods_demand }
					multiply_temp_variable = { spending_left = life_goods_price }
					#Loops thru cheapest countries to buy from
					for_each_loop = {
						array = global.life_goods_global_trade_country_array
						value = country_temp
						index = iii
						break = cheapest_brk

						#Checks if the country's goods are cheaper & shipping is affordabole 
						#TODO - Shipping cost
						if = {
							limit = {
								check_variable = { country_temp:life_goods_price < life_goods_price }
								check_variable = { spending_left > 0 }
								check_variable = { buy_amount_left > 0 }
								check_variable = { country_temp:life_goods_supply_min < country_temp:life_goods_supply }
								
							}

							#Shipping Cost
							set_temp_variable = { exporter_capital = country_temp:capital }
							var:exporter_capital = {
								set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
							}
							divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
							set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_variable = { shipping_cost = modifier_temp }
							add_to_variable = { shipping_cost = 1 }

							#Tariffs/Subsidies
							set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = 100 }
							if = {
								limit = {
									check_variable = { net_tariff_percentage_temp < 10 }
								}
								set_temp_variable = { net_tariff_percentage_temp = 10 }
							}

							set_temp_variable = { true_price = country_temp:life_goods_price }
							multiply_temp_variable = { true_price = shipping_cost }
							multiply_temp_variable = { true_price = net_tariff_percentage_temp }
							divide_temp_variable = { true_price = 100 }
							if = {
								limit = {
									check_variable = { true_price < life_goods_price }
								}
								#Do Trade
								set_temp_variable = { u = true_price }
								multiply_temp_variable = { u = country_temp:life_goods_demand }
								divide_temp_variable = { u = life_goods_price }
								divide_temp_variable = { u = life_goods_demand }
								
								set_temp_variable = { buy_amount = life_goods_supply }
								multiply_temp_variable = { buy_amount = u }
								multiply_temp_variable = { buy_amount = -1 }
								add_to_temp_variable = { buy_amount = country_temp:life_goods_supply }
								add_to_temp_variable = { u = 1 }
								divide_temp_variable = { buy_amount = u }
								
								multiply_temp_variable = { buy_amount = 0.7 }

								multiply_temp_variable = { buy_amount = shipping_cost }
								multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
								divide_temp_variable = { buy_amount = 100 }

								set_temp_variable = { good_max_temp = country_temp:life_goods_supply }
								subtract_from_temp_variable = { good_max_temp = country_temp:life_goods_supply_min }
								
								clamp_temp_variable = {
									var = buy_amount
									max = good_max_temp
								}
								clamp_temp_variable = {
									var = buy_amount
									min = 0
								}
								set_temp_variable = { cost_temp = buy_amount }
								multiply_temp_variable = { cost_temp = country_temp:life_goods_price }

								if = {
									limit = {
										check_variable = { cost_temp > spending_left }
									}
									set_temp_variable = { cost_temp = spending_left }
									set_temp_variable = { buy_amount = cost_temp }
									divide_temp_variable = { buy_amount = state_temp:life_goods_price }
								}
								if = {
									limit = {
										check_variable = { buy_amount > 0 }
									}
											
									subtract_from_variable = { country_temp:life_goods_supply = buy_amount }
									subtract_from_variable = { country_temp:life_goods_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:life_goods_global_trade_actual_value = cost_temp }
									subtract_from_variable = { life_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { global.life_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { country_temp:life_goods_global_trade_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
									}

									add_to_variable = { life_goods_supply = buy_amount }
									add_to_variable = { life_goods_global_trade_amount = buy_amount }
									add_to_variable = { global.life_goods_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_temp_variable = { spending_left = cost_temp }
									subtract_from_variable = { life_goods_global_trade_value = cost_temp }
									add_to_variable = { global.life_goods_global_trade_value = cost_temp }
									
								}
							}
						}
						else_if = {
							limit = {
								OR = {
									NOT = { check_variable = { buy_amount_left > 0 } }
									NOT = { check_variable = { spending_left > 0 } }
									NOT = {  check_variable = { country_temp:life_goods_price < life_goods_price } }
								}
							}
							set_temp_variable = { cheapest_brk = 1 }
						}
					}
                #everyday_goods
					set_temp_variable = { buy_amount_left = everyday_goods_demand }
					set_temp_variable = { spending_left = everyday_goods_demand }
					multiply_temp_variable = { spending_left = everyday_goods_price }
					#Loops thru cheapest countries to buy from
					for_each_loop = {
						array = global.everyday_goods_global_trade_country_array
						value = country_temp
						index = iii
						break = cheapest_brk

						#Checks if the country's goods are cheaper & shipping is affordabole 
						#TODO - Shipping cost
						if = {
							limit = {
								check_variable = { country_temp:everyday_goods_price < everyday_goods_price }
								check_variable = { spending_left > 0 }
								check_variable = { buy_amount_left > 0 }
								check_variable = { country_temp:everyday_goods_supply_min < country_temp:everyday_goods_supply }
								
							}

							#Shipping Cost
							set_temp_variable = { exporter_capital = country_temp:capital }
							var:exporter_capital = {
								set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
							}
							divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
							set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_variable = { shipping_cost = modifier_temp }
							add_to_variable = { shipping_cost = 1 }

							#Tariffs/Subsidies
							set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = 100 }
							if = {
								limit = {
									check_variable = { net_tariff_percentage_temp < 10 }
								}
								set_temp_variable = { net_tariff_percentage_temp = 10 }
							}

							set_temp_variable = { true_price = country_temp:everyday_goods_price }
							multiply_temp_variable = { true_price = shipping_cost }
							multiply_temp_variable = { true_price = net_tariff_percentage_temp }
							divide_temp_variable = { true_price = 100 }
							if = {
								limit = {
									check_variable = { true_price < everyday_goods_price }
								}
								#Do Trade
								set_temp_variable = { u = true_price }
								multiply_temp_variable = { u = country_temp:everyday_goods_demand }
								divide_temp_variable = { u = everyday_goods_price }
								divide_temp_variable = { u = everyday_goods_demand }
								
								set_temp_variable = { buy_amount = everyday_goods_supply }
								multiply_temp_variable = { buy_amount = u }
								multiply_temp_variable = { buy_amount = -1 }
								add_to_temp_variable = { buy_amount = country_temp:everyday_goods_supply }
								add_to_temp_variable = { u = 1 }
								divide_temp_variable = { buy_amount = u }
								
								multiply_temp_variable = { buy_amount = 0.7 }

								multiply_temp_variable = { buy_amount = shipping_cost }
								multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
								divide_temp_variable = { buy_amount = 100 }

								set_temp_variable = { good_max_temp = country_temp:everyday_goods_supply }
								subtract_from_temp_variable = { good_max_temp = country_temp:everyday_goods_supply_min }
								
								clamp_temp_variable = {
									var = buy_amount
									max = good_max_temp
								}
								clamp_temp_variable = {
									var = buy_amount
									min = 0
								}
								set_temp_variable = { cost_temp = buy_amount }
								multiply_temp_variable = { cost_temp = country_temp:everyday_goods_price }

								if = {
									limit = {
										check_variable = { cost_temp > spending_left }
									}
									set_temp_variable = { cost_temp = spending_left }
									set_temp_variable = { buy_amount = cost_temp }
									divide_temp_variable = { buy_amount = state_temp:everyday_goods_price }
								}
								if = {
									limit = {
										check_variable = { buy_amount > 0 }
									}
											
									subtract_from_variable = { country_temp:everyday_goods_supply = buy_amount }
									subtract_from_variable = { country_temp:everyday_goods_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:everyday_goods_global_trade_actual_value = cost_temp }
									subtract_from_variable = { everyday_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { global.everyday_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { country_temp:everyday_goods_global_trade_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
									}

									add_to_variable = { everyday_goods_supply = buy_amount }
									add_to_variable = { everyday_goods_global_trade_amount = buy_amount }
									add_to_variable = { global.everyday_goods_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_temp_variable = { spending_left = cost_temp }
									subtract_from_variable = { everyday_goods_global_trade_value = cost_temp }
									add_to_variable = { global.everyday_goods_global_trade_value = cost_temp }
									
								}
							}
						}
						else_if = {
							limit = {
								OR = {
									NOT = { check_variable = { buy_amount_left > 0 } }
									NOT = { check_variable = { spending_left > 0 } }
									NOT = {  check_variable = { country_temp:everyday_goods_price < everyday_goods_price } }
								}
							}
							set_temp_variable = { cheapest_brk = 1 }
						}
					}
                #luxury_goods
					set_temp_variable = { buy_amount_left = luxury_goods_demand }
					set_temp_variable = { spending_left = luxury_goods_demand }
					multiply_temp_variable = { spending_left = luxury_goods_price }
					#Loops thru cheapest countries to buy from
					for_each_loop = {
						array = global.luxury_goods_global_trade_country_array
						value = country_temp
						index = iii
						break = cheapest_brk

						#Checks if the country's goods are cheaper & shipping is affordabole 
						#TODO - Shipping cost
						if = {
							limit = {
								check_variable = { country_temp:luxury_goods_price < luxury_goods_price }
								check_variable = { spending_left > 0 }
								check_variable = { buy_amount_left > 0 }
								check_variable = { country_temp:luxury_goods_supply_min < country_temp:luxury_goods_supply }
								
							}

							#Shipping Cost
							set_temp_variable = { exporter_capital = country_temp:capital }
							var:exporter_capital = {
								set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
							}
							divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
							set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_variable = { shipping_cost = modifier_temp }
							add_to_variable = { shipping_cost = 1 }

							#Tariffs/Subsidies
							set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = 100 }
							if = {
								limit = {
									check_variable = { net_tariff_percentage_temp < 10 }
								}
								set_temp_variable = { net_tariff_percentage_temp = 10 }
							}

							set_temp_variable = { true_price = country_temp:luxury_goods_price }
							multiply_temp_variable = { true_price = shipping_cost }
							multiply_temp_variable = { true_price = net_tariff_percentage_temp }
							divide_temp_variable = { true_price = 100 }
							if = {
								limit = {
									check_variable = { true_price < luxury_goods_price }
								}
								#Do Trade
								set_temp_variable = { u = true_price }
								multiply_temp_variable = { u = country_temp:luxury_goods_demand }
								divide_temp_variable = { u = luxury_goods_price }
								divide_temp_variable = { u = luxury_goods_demand }
								
								set_temp_variable = { buy_amount = luxury_goods_supply }
								multiply_temp_variable = { buy_amount = u }
								multiply_temp_variable = { buy_amount = -1 }
								add_to_temp_variable = { buy_amount = country_temp:luxury_goods_supply }
								add_to_temp_variable = { u = 1 }
								divide_temp_variable = { buy_amount = u }
								
								multiply_temp_variable = { buy_amount = 0.7 }

								multiply_temp_variable = { buy_amount = shipping_cost }
								multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
								divide_temp_variable = { buy_amount = 100 }

								set_temp_variable = { good_max_temp = country_temp:luxury_goods_supply }
								subtract_from_temp_variable = { good_max_temp = country_temp:luxury_goods_supply_min }
								
								clamp_temp_variable = {
									var = buy_amount
									max = good_max_temp
								}
								clamp_temp_variable = {
									var = buy_amount
									min = 0
								}
								set_temp_variable = { cost_temp = buy_amount }
								multiply_temp_variable = { cost_temp = country_temp:luxury_goods_price }

								if = {
									limit = {
										check_variable = { cost_temp > spending_left }
									}
									set_temp_variable = { cost_temp = spending_left }
									set_temp_variable = { buy_amount = cost_temp }
									divide_temp_variable = { buy_amount = state_temp:luxury_goods_price }
								}
								if = {
									limit = {
										check_variable = { buy_amount > 0 }
									}
											
									subtract_from_variable = { country_temp:luxury_goods_supply = buy_amount }
									subtract_from_variable = { country_temp:luxury_goods_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:luxury_goods_global_trade_actual_value = cost_temp }
									subtract_from_variable = { luxury_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { global.luxury_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { country_temp:luxury_goods_global_trade_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
									}

									add_to_variable = { luxury_goods_supply = buy_amount }
									add_to_variable = { luxury_goods_global_trade_amount = buy_amount }
									add_to_variable = { global.luxury_goods_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_temp_variable = { spending_left = cost_temp }
									subtract_from_variable = { luxury_goods_global_trade_value = cost_temp }
									add_to_variable = { global.luxury_goods_global_trade_value = cost_temp }
									
								}
							}
						}
						else_if = {
							limit = {
								OR = {
									NOT = { check_variable = { buy_amount_left > 0 } }
									NOT = { check_variable = { spending_left > 0 } }
									NOT = {  check_variable = { country_temp:luxury_goods_price < luxury_goods_price } }
								}
							}
							set_temp_variable = { cheapest_brk = 1 }
						}
					}
                #services
					set_temp_variable = { buy_amount_left = services_demand }
					set_temp_variable = { spending_left = services_demand }
					multiply_temp_variable = { spending_left = services_price }
					#Loops thru cheapest countries to buy from
					for_each_loop = {
						array = global.services_global_trade_country_array
						value = country_temp
						index = iii
						break = cheapest_brk

						#Checks if the country's goods are cheaper & shipping is affordabole 
						#TODO - Shipping cost
						if = {
							limit = {
								check_variable = { country_temp:services_price < services_price }
								check_variable = { spending_left > 0 }
								check_variable = { buy_amount_left > 0 }
								check_variable = { country_temp:services_supply_min < country_temp:services_supply }
								
							}

							#Shipping Cost
							set_temp_variable = { exporter_capital = country_temp:capital }
							var:exporter_capital = {
								set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
							}
							divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
							set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_variable = { shipping_cost = modifier_temp }
							add_to_variable = { shipping_cost = 1 }

							#Tariffs/Subsidies
							set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = 100 }
							if = {
								limit = {
									check_variable = { net_tariff_percentage_temp < 10 }
								}
								set_temp_variable = { net_tariff_percentage_temp = 10 }
							}

							set_temp_variable = { true_price = country_temp:services_price }
							multiply_temp_variable = { true_price = shipping_cost }
							multiply_temp_variable = { true_price = net_tariff_percentage_temp }
							divide_temp_variable = { true_price = 100 }
							if = {
								limit = {
									check_variable = { true_price < services_price }
								}
								#Do Trade
								set_temp_variable = { u = true_price }
								multiply_temp_variable = { u = country_temp:services_demand }
								divide_temp_variable = { u = services_price }
								divide_temp_variable = { u = services_demand }
								
								set_temp_variable = { buy_amount = services_supply }
								multiply_temp_variable = { buy_amount = u }
								multiply_temp_variable = { buy_amount = -1 }
								add_to_temp_variable = { buy_amount = country_temp:services_supply }
								add_to_temp_variable = { u = 1 }
								divide_temp_variable = { buy_amount = u }
								
								multiply_temp_variable = { buy_amount = 0.7 }

								multiply_temp_variable = { buy_amount = shipping_cost }
								multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
								divide_temp_variable = { buy_amount = 100 }

								set_temp_variable = { good_max_temp = country_temp:services_supply }
								subtract_from_temp_variable = { good_max_temp = country_temp:services_supply_min }
								
								clamp_temp_variable = {
									var = buy_amount
									max = good_max_temp
								}
								clamp_temp_variable = {
									var = buy_amount
									min = 0
								}
								set_temp_variable = { cost_temp = buy_amount }
								multiply_temp_variable = { cost_temp = country_temp:services_price }

								if = {
									limit = {
										check_variable = { cost_temp > spending_left }
									}
									set_temp_variable = { cost_temp = spending_left }
									set_temp_variable = { buy_amount = cost_temp }
									divide_temp_variable = { buy_amount = state_temp:services_price }
								}
								if = {
									limit = {
										check_variable = { buy_amount > 0 }
									}
											
									subtract_from_variable = { country_temp:services_supply = buy_amount }
									subtract_from_variable = { country_temp:services_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:services_global_trade_actual_value = cost_temp }
									subtract_from_variable = { services_global_trade_actual_value = cost_temp }
									add_to_variable = { global.services_global_trade_actual_value = cost_temp }
									add_to_variable = { country_temp:services_global_trade_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
									}

									add_to_variable = { services_supply = buy_amount }
									add_to_variable = { services_global_trade_amount = buy_amount }
									add_to_variable = { global.services_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_temp_variable = { spending_left = cost_temp }
									subtract_from_variable = { services_global_trade_value = cost_temp }
									add_to_variable = { global.services_global_trade_value = cost_temp }
									
								}
							}
						}
						else_if = {
							limit = {
								OR = {
									NOT = { check_variable = { buy_amount_left > 0 } }
									NOT = { check_variable = { spending_left > 0 } }
									NOT = {  check_variable = { country_temp:services_price < services_price } }
								}
							}
							set_temp_variable = { cheapest_brk = 1 }
						}
					}
                #raw_goods
					set_temp_variable = { buy_amount_left = raw_goods_demand }
					set_temp_variable = { spending_left = raw_goods_demand }
					multiply_temp_variable = { spending_left = raw_goods_price }
					#Loops thru cheapest countries to buy from
					for_each_loop = {
						array = global.raw_goods_global_trade_country_array
						value = country_temp
						index = iii
						break = cheapest_brk

						#Checks if the country's goods are cheaper & shipping is affordabole 
						#TODO - Shipping cost
						if = {
							limit = {
								check_variable = { country_temp:raw_goods_price < raw_goods_price }
								check_variable = { spending_left > 0 }
								check_variable = { buy_amount_left > 0 }
								check_variable = { country_temp:raw_goods_supply_min < country_temp:raw_goods_supply }
								
							}

							#Shipping Cost
							set_temp_variable = { exporter_capital = country_temp:capital }
							var:exporter_capital = {
								set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
							}
							divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
							set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_variable = { shipping_cost = modifier_temp }
							add_to_variable = { shipping_cost = 1 }

							#Tariffs/Subsidies
							set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = 100 }
							if = {
								limit = {
									check_variable = { net_tariff_percentage_temp < 10 }
								}
								set_temp_variable = { net_tariff_percentage_temp = 10 }
							}

							set_temp_variable = { true_price = country_temp:raw_goods_price }
							multiply_temp_variable = { true_price = shipping_cost }
							multiply_temp_variable = { true_price = net_tariff_percentage_temp }
							divide_temp_variable = { true_price = 100 }
							if = {
								limit = {
									check_variable = { true_price < raw_goods_price }
								}
								#Do Trade
								set_temp_variable = { u = true_price }
								multiply_temp_variable = { u = country_temp:raw_goods_demand }
								divide_temp_variable = { u = raw_goods_price }
								divide_temp_variable = { u = raw_goods_demand }
								
								set_temp_variable = { buy_amount = raw_goods_supply }
								multiply_temp_variable = { buy_amount = u }
								multiply_temp_variable = { buy_amount = -1 }
								add_to_temp_variable = { buy_amount = country_temp:raw_goods_supply }
								add_to_temp_variable = { u = 1 }
								divide_temp_variable = { buy_amount = u }
								
								multiply_temp_variable = { buy_amount = 0.7 }

								multiply_temp_variable = { buy_amount = shipping_cost }
								multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
								divide_temp_variable = { buy_amount = 100 }

								set_temp_variable = { good_max_temp = country_temp:raw_goods_supply }
								subtract_from_temp_variable = { good_max_temp = country_temp:raw_goods_supply_min }
								
								clamp_temp_variable = {
									var = buy_amount
									max = good_max_temp
								}
								clamp_temp_variable = {
									var = buy_amount
									min = 0
								}
								set_temp_variable = { cost_temp = buy_amount }
								multiply_temp_variable = { cost_temp = country_temp:raw_goods_price }

								if = {
									limit = {
										check_variable = { cost_temp > spending_left }
									}
									set_temp_variable = { cost_temp = spending_left }
									set_temp_variable = { buy_amount = cost_temp }
									divide_temp_variable = { buy_amount = state_temp:raw_goods_price }
								}
								if = {
									limit = {
										check_variable = { buy_amount > 0 }
									}
											
									subtract_from_variable = { country_temp:raw_goods_supply = buy_amount }
									subtract_from_variable = { country_temp:raw_goods_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:raw_goods_global_trade_actual_value = cost_temp }
									subtract_from_variable = { raw_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { global.raw_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { country_temp:raw_goods_global_trade_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
									}

									add_to_variable = { raw_goods_supply = buy_amount }
									add_to_variable = { raw_goods_global_trade_amount = buy_amount }
									add_to_variable = { global.raw_goods_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_temp_variable = { spending_left = cost_temp }
									subtract_from_variable = { raw_goods_global_trade_value = cost_temp }
									add_to_variable = { global.raw_goods_global_trade_value = cost_temp }
									
								}
							}
						}
						else_if = {
							limit = {
								OR = {
									NOT = { check_variable = { buy_amount_left > 0 } }
									NOT = { check_variable = { spending_left > 0 } }
									NOT = {  check_variable = { country_temp:raw_goods_price < raw_goods_price } }
								}
							}
							set_temp_variable = { cheapest_brk = 1 }
						}
					}
                #industrial_goods
					set_temp_variable = { buy_amount_left = industrial_goods_demand }
					set_temp_variable = { spending_left = industrial_goods_demand }
					multiply_temp_variable = { spending_left = industrial_goods_price }
					#Loops thru cheapest countries to buy from
					for_each_loop = {
						array = global.industrial_goods_global_trade_country_array
						value = country_temp
						index = iii
						break = cheapest_brk

						#Checks if the country's goods are cheaper & shipping is affordabole 
						#TODO - Shipping cost
						if = {
							limit = {
								check_variable = { country_temp:industrial_goods_price < industrial_goods_price }
								check_variable = { spending_left > 0 }
								check_variable = { buy_amount_left > 0 }
								check_variable = { country_temp:industrial_goods_supply_min < country_temp:industrial_goods_supply }
								
							}

							#Shipping Cost
							set_temp_variable = { exporter_capital = country_temp:capital }
							var:exporter_capital = {
								set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
							}
							divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
							set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_variable = { shipping_cost = modifier_temp }
							add_to_variable = { shipping_cost = 1 }

							#Tariffs/Subsidies
							set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
							subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
							add_to_temp_variable = { net_tariff_percentage_temp = 100 }
							if = {
								limit = {
									check_variable = { net_tariff_percentage_temp < 10 }
								}
								set_temp_variable = { net_tariff_percentage_temp = 10 }
							}

							set_temp_variable = { true_price = country_temp:industrial_goods_price }
							multiply_temp_variable = { true_price = shipping_cost }
							multiply_temp_variable = { true_price = net_tariff_percentage_temp }
							divide_temp_variable = { true_price = 100 }
							if = {
								limit = {
									check_variable = { true_price < industrial_goods_price }
								}
								#Do Trade
								set_temp_variable = { u = true_price }
								multiply_temp_variable = { u = country_temp:industrial_goods_demand }
								divide_temp_variable = { u = industrial_goods_price }
								divide_temp_variable = { u = industrial_goods_demand }
								
								set_temp_variable = { buy_amount = industrial_goods_supply }
								multiply_temp_variable = { buy_amount = u }
								multiply_temp_variable = { buy_amount = -1 }
								add_to_temp_variable = { buy_amount = country_temp:industrial_goods_supply }
								add_to_temp_variable = { u = 1 }
								divide_temp_variable = { buy_amount = u }
								
								multiply_temp_variable = { buy_amount = 0.7 }

								multiply_temp_variable = { buy_amount = shipping_cost }
								multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
								divide_temp_variable = { buy_amount = 100 }

								set_temp_variable = { good_max_temp = country_temp:industrial_goods_supply }
								subtract_from_temp_variable = { good_max_temp = country_temp:industrial_goods_supply_min }
								
								clamp_temp_variable = {
									var = buy_amount
									max = good_max_temp
								}
								clamp_temp_variable = {
									var = buy_amount
									min = 0
								}
								set_temp_variable = { cost_temp = buy_amount }
								multiply_temp_variable = { cost_temp = country_temp:industrial_goods_price }

								if = {
									limit = {
										check_variable = { cost_temp > spending_left }
									}
									set_temp_variable = { cost_temp = spending_left }
									set_temp_variable = { buy_amount = cost_temp }
									divide_temp_variable = { buy_amount = state_temp:industrial_goods_price }
								}
								if = {
									limit = {
										check_variable = { buy_amount > 0 }
									}
											
									subtract_from_variable = { country_temp:industrial_goods_supply = buy_amount }
									subtract_from_variable = { country_temp:industrial_goods_global_trade_amount = buy_amount }
									add_to_variable = { country_temp:industrial_goods_global_trade_actual_value = cost_temp }
									subtract_from_variable = { industrial_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { global.industrial_goods_global_trade_actual_value = cost_temp }
									add_to_variable = { country_temp:industrial_goods_global_trade_value = cost_temp }

									multiply_temp_variable = { buy_amount = 100 }
									divide_temp_variable = { buy_amount = shipping_cost }
									divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

									#Tariffs/Subsidies
									set_temp_variable = { export_cost_temp = 100 }
									add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
									subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
									multiply_temp_variable = { export_cost_temp = cost_temp }
									divide_temp_variable = { export_cost_temp = 100 }
									set_temp_variable = { export_value_temp = export_cost_temp }
									subtract_from_temp_variable = { export_value_temp = cost_temp }

									set_temp_variable = { import_cost_temp = 100 }
									add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
									subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
									multiply_temp_variable = { import_cost_temp = cost_temp }
									divide_temp_variable = { import_cost_temp = 100 }
									set_temp_variable = { import_value_temp = import_cost_temp }
									subtract_from_temp_variable = { import_value_temp = cost_temp }

									add_to_temp_variable = { cost_temp = export_value_temp }
									add_to_temp_variable = { cost_temp = import_value_temp }
									add_to_variable = { country_temp:treasury = export_value_temp }
									add_to_variable = { treasury = import_value_temp }
									if = {
										limit = {
											check_variable = { export_value_temp > 0 }
										}
										add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
									}
									else = {
										subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
									}
									if = {
										limit = {
											check_variable = { import_value_temp > 0 }
										}
										add_to_variable = { actual_tariff_revenue = import_value_temp }
									}
									else = {
										subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
									}

									add_to_variable = { industrial_goods_supply = buy_amount }
									add_to_variable = { industrial_goods_global_trade_amount = buy_amount }
									add_to_variable = { global.industrial_goods_global_trade_amount = buy_amount }
									subtract_from_temp_variable = { buy_amount_left = buy_amount }
									subtract_from_temp_variable = { spending_left = cost_temp }
									subtract_from_variable = { industrial_goods_global_trade_value = cost_temp }
									add_to_variable = { global.industrial_goods_global_trade_value = cost_temp }
									
								}
							}
						}
						else_if = {
							limit = {
								OR = {
									NOT = { check_variable = { buy_amount_left > 0 } }
									NOT = { check_variable = { spending_left > 0 } }
									NOT = {  check_variable = { country_temp:industrial_goods_price < industrial_goods_price } }
								}
							}
							set_temp_variable = { cheapest_brk = 1 }
						}
					}
			#
		}
		for_each_scope_loop = {
			array = global.econ_order_array

			#Resolve International Trade
				#life_goods
					#Importing
					if = {
						limit = {
							check_variable = { life_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = life_goods_global_trade_amount }
						set_variable = { cost_amount_left = life_goods_global_trade_value }
						set_variable = { trade_amount_wog = life_goods_global_trade_amount }
						set_variable = { cost_amount_wog = life_goods_global_trade_value }

						set_variable = { life_goods_demand_wog = life_goods_demand }
						subtract_from_variable = { life_goods_demand_wog = life_goods_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { life_goods_government_stockpile < life_goods_government_demand }
								}
								set_temp_variable = { amount_temp = life_goods_government_demand }
								subtract_from_temp_variable = { amount_temp = life_goods_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_variable = { tal = 2 }
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { life_goods_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_life_goods_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { life_goods_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_life_goods_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = life_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:life_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = life_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.life_goods_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { life_goods_trade_amount = trade_amount_temp }
									add_to_variable = { life_goods_trade_value = trade_value_temp }
									add_to_variable = { life_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { life_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = life_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = life_goods_global_trade_value }
						set_variable = { original_life_goods_supply = life_goods_supply }
						subtract_from_variable = { original_life_goods_supply = life_goods_global_trade_amount }
						subtract_from_variable = { original_life_goods_supply = life_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = life_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = life_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = life_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_life_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.life_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { life_goods_trade_amount = trade_amount_temp }
									add_to_variable = { life_goods_trade_value = trade_value_temp }
									add_to_variable = { life_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#everyday_goods
					#Importing
					if = {
						limit = {
							check_variable = { everyday_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = everyday_goods_global_trade_amount }
						set_variable = { cost_amount_left = everyday_goods_global_trade_value }
						set_variable = { trade_amount_wog = everyday_goods_global_trade_amount }
						set_variable = { cost_amount_wog = everyday_goods_global_trade_value }

						set_variable = { everyday_goods_demand_wog = everyday_goods_demand }
						subtract_from_variable = { everyday_goods_demand_wog = everyday_goods_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { everyday_goods_government_stockpile < everyday_goods_government_demand }
								}
								set_temp_variable = { amount_temp = everyday_goods_government_demand }
								subtract_from_temp_variable = { amount_temp = everyday_goods_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { everyday_goods_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_everyday_goods_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { everyday_goods_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_everyday_goods_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = everyday_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:everyday_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = everyday_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.everyday_goods_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { everyday_goods_trade_amount = trade_amount_temp }
									add_to_variable = { everyday_goods_trade_value = trade_value_temp }
									add_to_variable = { everyday_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { everyday_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = everyday_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = everyday_goods_global_trade_value }
						set_variable = { original_everyday_goods_supply = everyday_goods_supply }
						subtract_from_variable = { original_everyday_goods_supply = everyday_goods_global_trade_amount }
						subtract_from_variable = { original_everyday_goods_supply = everyday_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = everyday_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = everyday_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = everyday_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_everyday_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.everyday_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { everyday_goods_trade_amount = trade_amount_temp }
									add_to_variable = { everyday_goods_trade_value = trade_value_temp }
									add_to_variable = { everyday_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#luxury_goods
					#Importing
					if = {
						limit = {
							check_variable = { luxury_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = luxury_goods_global_trade_amount }
						set_variable = { cost_amount_left = luxury_goods_global_trade_value }
						set_variable = { trade_amount_wog = luxury_goods_global_trade_amount }
						set_variable = { cost_amount_wog = luxury_goods_global_trade_value }

						set_variable = { luxury_goods_demand_wog = luxury_goods_demand }
						subtract_from_variable = { luxury_goods_demand_wog = luxury_goods_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { luxury_goods_government_stockpile < luxury_goods_government_demand }
								}
								set_temp_variable = { amount_temp = luxury_goods_government_demand }
								subtract_from_temp_variable = { amount_temp = luxury_goods_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { luxury_goods_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_luxury_goods_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { luxury_goods_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_luxury_goods_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = luxury_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:luxury_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = luxury_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.luxury_goods_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { luxury_goods_trade_amount = trade_amount_temp }
									add_to_variable = { luxury_goods_trade_value = trade_value_temp }
									add_to_variable = { luxury_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { luxury_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = luxury_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = luxury_goods_global_trade_value }
						set_variable = { original_luxury_goods_supply = luxury_goods_supply }
						subtract_from_variable = { original_luxury_goods_supply = luxury_goods_global_trade_amount }
						subtract_from_variable = { original_luxury_goods_supply = luxury_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = luxury_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = luxury_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = luxury_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_luxury_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.luxury_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { luxury_goods_trade_amount = trade_amount_temp }
									add_to_variable = { luxury_goods_trade_value = trade_value_temp }
									add_to_variable = { luxury_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#services
					#Importing
					if = {
						limit = {
							check_variable = { services_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = services_global_trade_amount }
						set_variable = { cost_amount_left = services_global_trade_value }
						set_variable = { trade_amount_wog = services_global_trade_amount }
						set_variable = { cost_amount_wog = services_global_trade_value }

						set_variable = { services_demand_wog = services_demand }
						subtract_from_variable = { services_demand_wog = services_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { services_government_stockpile < services_government_demand }
								}
								set_temp_variable = { amount_temp = services_government_demand }
								subtract_from_temp_variable = { amount_temp = services_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { services_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_services_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { services_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_services_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = services_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:services_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = services_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.services_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { services_trade_amount = trade_amount_temp }
									add_to_variable = { services_trade_value = trade_value_temp }
									add_to_variable = { services_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { services_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = services_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = services_global_trade_value }
						set_variable = { original_services_supply = services_supply }
						subtract_from_variable = { original_services_supply = services_global_trade_amount }
						subtract_from_variable = { original_services_supply = services_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = services_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = services_supply }
									subtract_from_temp_variable = { trade_percentage_temp = services_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_services_supply }

									set_temp_variable = { trade_amount_temp = PREV.services_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { services_trade_amount = trade_amount_temp }
									add_to_variable = { services_trade_value = trade_value_temp }
									add_to_variable = { services_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#raw_goods
					#Importing
					if = {
						limit = {
							check_variable = { raw_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = raw_goods_global_trade_amount }
						set_variable = { cost_amount_left = raw_goods_global_trade_value }
						set_variable = { trade_amount_wog = raw_goods_global_trade_amount }
						set_variable = { cost_amount_wog = raw_goods_global_trade_value }

						set_variable = { raw_goods_demand_wog = raw_goods_demand }
						subtract_from_variable = { raw_goods_demand_wog = raw_goods_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { raw_goods_government_stockpile < raw_goods_government_demand }
								}
								set_temp_variable = { amount_temp = raw_goods_government_demand }
								subtract_from_temp_variable = { amount_temp = raw_goods_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { raw_goods_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_raw_goods_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { raw_goods_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_raw_goods_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = raw_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:raw_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = raw_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.raw_goods_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { raw_goods_trade_amount = trade_amount_temp }
									add_to_variable = { raw_goods_trade_value = trade_value_temp }
									add_to_variable = { raw_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { raw_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = raw_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = raw_goods_global_trade_value }
						set_variable = { original_raw_goods_supply = raw_goods_supply }
						subtract_from_variable = { original_raw_goods_supply = raw_goods_global_trade_amount }
						subtract_from_variable = { original_raw_goods_supply = raw_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = raw_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = raw_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = raw_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_raw_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.raw_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { raw_goods_trade_amount = trade_amount_temp }
									add_to_variable = { raw_goods_trade_value = trade_value_temp }
									add_to_variable = { raw_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#industrial_goods
					#Importing
					if = {
						limit = {
							check_variable = { industrial_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = industrial_goods_global_trade_amount }
						set_variable = { cost_amount_left = industrial_goods_global_trade_value }
						set_variable = { trade_amount_wog = industrial_goods_global_trade_amount }
						set_variable = { cost_amount_wog = industrial_goods_global_trade_value }

						set_variable = { industrial_goods_demand_wog = industrial_goods_demand }
						subtract_from_variable = { industrial_goods_demand_wog = industrial_goods_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { industrial_goods_government_stockpile < industrial_goods_government_demand }
								}
								set_temp_variable = { amount_temp = industrial_goods_government_demand }
								subtract_from_temp_variable = { amount_temp = industrial_goods_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { industrial_goods_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_industrial_goods_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { industrial_goods_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_industrial_goods_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = industrial_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:industrial_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = industrial_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.industrial_goods_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { industrial_goods_trade_amount = trade_amount_temp }
									add_to_variable = { industrial_goods_trade_value = trade_value_temp }
									add_to_variable = { industrial_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { industrial_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = industrial_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = industrial_goods_global_trade_value }
						set_variable = { original_industrial_goods_supply = industrial_goods_supply }
						subtract_from_variable = { original_industrial_goods_supply = industrial_goods_global_trade_amount }
						subtract_from_variable = { original_industrial_goods_supply = industrial_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = industrial_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = industrial_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = industrial_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_industrial_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.industrial_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { industrial_goods_trade_amount = trade_amount_temp }
									add_to_variable = { industrial_goods_trade_value = trade_value_temp }
									add_to_variable = { industrial_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				clear_variable = trade_amount_left
				clear_variable = cost_amount_left
			#

			#Resolve All Trade
				every_controlled_state = {
					#life_goods
						#Importing
						if = {
							limit = {
								check_variable = { life_goods_trade_amount > 0 }
							}
							subtract_from_variable = { life_goods_bought_value = life_goods_trade_value }
							add_to_variable = { life_goods_bought_amount = life_goods_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { life_goods_trade_amount < 0 }
							}
							add_to_variable = { life_goods_sold_value = life_goods_trade_value }
							subtract_from_variable = { life_goods_sold_amount = life_goods_trade_amount }
							add_to_variable = { life_goods_left = life_goods_trade_amount }
						}

					#everyday_goods
						#Importing
						if = {
							limit = {
								check_variable = { everyday_goods_trade_amount > 0 }
							}
							subtract_from_variable = { everyday_goods_bought_value = everyday_goods_trade_value }
							add_to_variable = { everyday_goods_bought_amount = everyday_goods_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { everyday_goods_trade_amount < 0 }
							}
							add_to_variable = { everyday_goods_sold_value = everyday_goods_trade_value }
							subtract_from_variable = { everyday_goods_sold_amount = everyday_goods_trade_amount }
							add_to_variable = { everyday_goods_left = everyday_goods_trade_amount }

						}
					#luxury_goods
						#Importing
						if = {
							limit = {
								check_variable = { luxury_goods_trade_amount > 0 }
							}
							subtract_from_variable = { luxury_goods_bought_value = luxury_goods_trade_value }
							add_to_variable = { luxury_goods_bought_amount = luxury_goods_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { luxury_goods_trade_amount < 0 }
							}
							add_to_variable = { luxury_goods_sold_value = luxury_goods_trade_value }
							subtract_from_variable = { luxury_goods_sold_amount = luxury_goods_trade_amount }
							add_to_variable = { luxury_goods_left = luxury_goods_trade_amount }

						}
					#services
						#Importing
						if = {
							limit = {
								check_variable = { services_trade_amount > 0 }
							}
							subtract_from_variable = { services_bought_value = services_trade_value }
							add_to_variable = { services_bought_amount = services_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { services_trade_amount < 0 }
							}
							add_to_variable = { services_sold_value = services_trade_value }
							subtract_from_variable = { services_sold_amount = services_trade_amount }
							add_to_variable = { services_left = services_trade_amount }

						}
					#raw_goods
						#Importing
						if = {
							limit = {
								check_variable = { raw_goods_trade_amount > 0 }
							}
							subtract_from_variable = { raw_goods_bought_value = raw_goods_trade_value }
							add_to_variable = { raw_goods_bought_amount = raw_goods_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { raw_goods_trade_amount < 0 }
							}
							add_to_variable = { raw_goods_sold_value = raw_goods_trade_value }
							subtract_from_variable = { raw_goods_sold_amount = raw_goods_trade_amount }
							add_to_variable = { raw_goods_left = raw_goods_trade_amount }

						}
					#industrial_goods
						#Importing
						if = {
							limit = {
								check_variable = { industrial_goods_trade_amount > 0 }
							}
							subtract_from_variable = { industrial_goods_bought_value = industrial_goods_trade_value }
							add_to_variable = { industrial_goods_bought_amount = industrial_goods_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { industrial_goods_trade_amount < 0 }
							}
							add_to_variable = { industrial_goods_sold_value = industrial_goods_trade_value }
							subtract_from_variable = { industrial_goods_sold_amount = industrial_goods_trade_amount }
							add_to_variable = { industrial_goods_left = industrial_goods_trade_amount }

						}
				}
			#

			#Govt Buying Needed Goods
				
				#Vars Needed
				set_variable = { life_goods_government_demand_left = life_goods_government_demand }
				subtract_from_variable = { life_goods_government_demand_left = life_goods_government_stockpile }
				set_variable = { life_goods_supply_left = life_goods_supply }
				
				set_variable = { everyday_goods_government_demand_left = everyday_goods_government_demand }
				subtract_from_variable = { everyday_goods_government_demand_left = everyday_goods_government_stockpile }
				set_variable = { everyday_goods_supply_left = everyday_goods_supply }
				
				set_variable = { luxury_goods_government_demand_left = luxury_goods_government_demand }
				subtract_from_variable = { luxury_goods_government_demand_left = luxury_goods_government_stockpile }
				set_variable = { luxury_goods_supply_left = luxury_goods_supply }
				
				set_variable = { services_government_demand_left = services_government_demand }
				subtract_from_variable = { services_government_demand_left = services_government_stockpile }
				set_variable = { services_supply_left = services_supply }
				
				set_variable = { raw_goods_government_demand_left = raw_goods_government_demand }
				subtract_from_variable = { raw_goods_government_demand_left = raw_goods_government_stockpile }
				set_variable = { raw_goods_supply_left = raw_goods_supply }
				
				set_variable = { industrial_goods_government_demand_left = industrial_goods_government_demand }
				subtract_from_variable = { industrial_goods_government_demand_left = industrial_goods_government_stockpile }
				set_variable = { industrial_goods_supply_left = industrial_goods_supply }

				for_each_scope_loop = { #life_goods
					array = life_goods_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = life_goods_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.life_goods_supply_left }
					multiply_temp_variable = { buy_amount = PREV.life_goods_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = life_goods_bought_amount }
					add_to_variable = { life_goods_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = life_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.life_goods_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}
						
						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.life_goods_price }

						#Resolve
						add_to_variable = { PREV.actual_life_goods_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.life_goods_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.life_goods_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.life_goods_supply_left = life_goods_supply }
						add_to_variable = { life_goods_sold_value = cost_temp }
						add_to_variable = { life_goods_sold_amount = buy_amount }
						subtract_from_variable = { life_goods_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.life_goods_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
				for_each_scope_loop = { #everyday_goods
					array = everyday_goods_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = everyday_goods_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.everyday_goods_supply_left }
					multiply_temp_variable = { buy_amount = PREV.everyday_goods_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = everyday_goods_bought_amount }
					add_to_variable = { everyday_goods_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = everyday_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.everyday_goods_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}

						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.everyday_goods_price }

						#Resolve
						add_to_variable = { PREV.actual_everyday_goods_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.everyday_goods_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.everyday_goods_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.everyday_goods_supply_left = everyday_goods_supply }
						add_to_variable = { everyday_goods_sold_value = cost_temp }
						add_to_variable = { everyday_goods_sold_amount = buy_amount }
						subtract_from_variable = { everyday_goods_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.everyday_goods_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
				for_each_scope_loop = { #luxury_goods
					array = luxury_goods_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = luxury_goods_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.luxury_goods_supply_left }
					multiply_temp_variable = { buy_amount = PREV.luxury_goods_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = luxury_goods_bought_amount }
					add_to_variable = { luxury_goods_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = luxury_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.luxury_goods_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}

						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.luxury_goods_price }

						#Resolve
						add_to_variable = { PREV.actual_luxury_goods_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.luxury_goods_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.luxury_goods_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.luxury_goods_supply_left = luxury_goods_supply }
						add_to_variable = { luxury_goods_sold_value = cost_temp }
						add_to_variable = { luxury_goods_sold_amount = buy_amount }
						subtract_from_variable = { luxury_goods_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.luxury_goods_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
				for_each_scope_loop = { #services
					array = services_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = services_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.services_supply_left }
					multiply_temp_variable = { buy_amount = PREV.services_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = services_bought_amount }
					add_to_variable = { services_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = services_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.services_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}

						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.services_price }

						#Resolve
						add_to_variable = { PREV.actual_services_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.services_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.services_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.services_supply_left = services_supply }
						add_to_variable = { services_sold_value = cost_temp }
						add_to_variable = { services_sold_amount = buy_amount }
						subtract_from_variable = { services_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.services_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
				for_each_scope_loop = { #raw_goods
					array = raw_goods_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = raw_goods_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.raw_goods_supply_left }
					multiply_temp_variable = { buy_amount = PREV.raw_goods_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = raw_goods_bought_amount }
					add_to_variable = { raw_goods_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = raw_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.raw_goods_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}

						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.raw_goods_price }

						#Resolve
						add_to_variable = { PREV.actual_raw_goods_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.raw_goods_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.raw_goods_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.raw_goods_supply_left = raw_goods_supply }
						add_to_variable = { raw_goods_sold_value = cost_temp }
						add_to_variable = { raw_goods_sold_amount = buy_amount }
						subtract_from_variable = { raw_goods_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.raw_goods_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
				for_each_scope_loop = { #industrial_goods
					array = industrial_goods_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = industrial_goods_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.industrial_goods_supply_left }
					multiply_temp_variable = { buy_amount = PREV.industrial_goods_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = industrial_goods_bought_amount }
					add_to_variable = { industrial_goods_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = industrial_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.industrial_goods_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}
						
						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.industrial_goods_price }

						#Resolve
						add_to_variable = { PREV.actual_industrial_goods_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.industrial_goods_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.industrial_goods_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.industrial_goods_supply_left = industrial_goods_supply }
						add_to_variable = { industrial_goods_sold_value = cost_temp }
						add_to_variable = { industrial_goods_sold_amount = buy_amount }
						subtract_from_variable = { industrial_goods_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.industrial_goods_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
			#

			every_controlled_state = {
				set_temp_variable = { sales_tax_temp = controller:sales_tax_percentage }
				add_to_temp_variable = { sales_tax_temp = 100 }
				#Life Goods Purchases
					set_temp_variable = { buy_amount = life_goods_demand }
					subtract_from_temp_variable = { buy_amount = life_goods_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = life_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = life_goods_price }

					#Resolve
					add_to_variable = { life_goods_bought_value = cost_temp }
					add_to_variable = { life_goods_bought_amount = buy_amount }
					add_to_variable = { life_goods_sold_value = cost_temp }
					add_to_variable = { life_goods_sold_amount = buy_amount }
					subtract_from_variable = { life_goods_left = buy_amount }
				#
				#Everyday Goods Purchases
					set_temp_variable = { buy_amount = everyday_goods_demand }
					subtract_from_temp_variable = { buy_amount = everyday_goods_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = everyday_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = everyday_goods_price }

					#Resolve
					add_to_variable = { everyday_goods_bought_value = cost_temp }
					add_to_variable = { everyday_goods_bought_amount = buy_amount }
					add_to_variable = { everyday_goods_sold_value = cost_temp }
					add_to_variable = { everyday_goods_sold_amount = buy_amount }
					subtract_from_variable = { everyday_goods_left = buy_amount }

				#
				#Luxury Goods Purchases
					set_temp_variable = { buy_amount = luxury_goods_demand }
					subtract_from_temp_variable = { buy_amount = luxury_goods_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = luxury_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = luxury_goods_price }

					#Resolve
					add_to_variable = { luxury_goods_bought_value = cost_temp }
					add_to_variable = { luxury_goods_bought_amount = buy_amount }
					add_to_variable = { luxury_goods_sold_value = cost_temp }
					add_to_variable = { luxury_goods_sold_amount = buy_amount }
					subtract_from_variable = { luxury_goods_left = buy_amount }

				#
				#Services Purchases
					set_temp_variable = { buy_amount = services_demand }
					subtract_from_temp_variable = { buy_amount = services_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = services_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = services_price }

					#Resolve
					add_to_variable = { services_bought_value = cost_temp }
					add_to_variable = { services_bought_amount = buy_amount }
					add_to_variable = { services_sold_value = cost_temp }
					add_to_variable = { services_sold_amount = buy_amount }
					subtract_from_variable = { services_left = buy_amount }

				#
				#Raw Goods Purchases
					set_temp_variable = { buy_amount = raw_goods_demand }
					subtract_from_temp_variable = { buy_amount = raw_goods_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = raw_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = raw_goods_price }

					#Resolve
					add_to_variable = { raw_goods_bought_value = cost_temp }
					add_to_variable = { raw_goods_bought_amount = buy_amount }
					add_to_variable = { raw_goods_sold_value = cost_temp }
					add_to_variable = { raw_goods_sold_amount = buy_amount }
					subtract_from_variable = { raw_goods_left = buy_amount }
					
				#
				#Industrial Goods Purchases
					set_temp_variable = { buy_amount = industrial_goods_demand }
					subtract_from_temp_variable = { buy_amount = industrial_goods_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = industrial_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = industrial_goods_price }

					#Resolve
					add_to_variable = { industrial_goods_bought_value = cost_temp }
					add_to_variable = { industrial_goods_bought_amount = buy_amount }
					add_to_variable = { industrial_goods_sold_value = cost_temp }
					add_to_variable = { industrial_goods_sold_amount = buy_amount }
					subtract_from_variable = { industrial_goods_left = buy_amount }
					
				#

				#Resolve Purchases
					#Life Goods Bought
						if = {
							limit = {
								OR = {
									check_variable = { life_goods_bought_value > 0 }
									check_variable = { life_goods_bought_amount > 0 }
								}
							}
							#Only pops can demand Life Goods
							set_temp_variable = { cost_temp = life_goods_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							subtract_from_variable = { pops_money = cost_temp }
							add_to_variable = { pops_goods_spending = cost_temp }
							set_temp_variable = { needs_fulfilled_temp = life_goods_bought_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_life_goods_need }
							add_to_variable = { pops_life_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_life_goods_fulfilled_percentage
								min = 0
								max = 1
							}
						}
					#
					#Life Goods Sold
						if = {
							limit = {
								OR = {
									check_variable = { life_goods_sold_value > 0 }
									check_variable = { life_goods_sold_amount > 0 }
								}
							}
							add_to_variable = { pops_earnings = life_goods_sold_value }
							add_to_variable = { rgos_earnings = life_goods_sold_value }
							add_to_variable = { pops_rgos_life_goods_sold = life_goods_sold_amount }
						}
					#
					#Everyday Goods Bought
						if = {
							limit = {
								OR = {
									check_variable = { everyday_goods_bought_value > 0 }
									check_variable = { everyday_goods_bought_amount > 0 }
								}
							}
							#Only pops can demand Everyday Goods
							set_temp_variable = { cost_temp = everyday_goods_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							subtract_from_variable = { pops_money = cost_temp }
							add_to_variable = { pops_goods_spending = cost_temp }
							set_temp_variable = { needs_fulfilled_temp = everyday_goods_bought_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_everyday_goods_need }
							add_to_variable = { pops_everyday_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_everyday_goods_fulfilled_percentage
								min = 0
								max = 1
							}
						}
					#
					#Everyday Goods Sold
						if = {
							limit = {
								OR = {
									check_variable = { everyday_goods_sold_value > 0 }
									check_variable = { everyday_goods_sold_amount > 0 }
								}
							}
							#Splitting between Factories and Artisans
							set_temp_variable = { artisan_share = pops_artisans_everyday_goods_production }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = everyday_goods_produced_amount }

							set_temp_variable = { factory_share = factory_everyday_goods_production }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = everyday_goods_produced_amount }

							set_temp_variable = { artisan_cost_temp = everyday_goods_sold_value }
							set_temp_variable = { artisan_buy_amount = everyday_goods_sold_amount }
							multiply_temp_variable = { artisan_cost_temp = artisan_share }
							divide_temp_variable = { artisan_cost_temp = 100 }
							multiply_temp_variable = { artisan_buy_amount = artisan_share }
							divide_temp_variable = { artisan_buy_amount = 100 }

							set_temp_variable = { factory_cost_temp = everyday_goods_sold_value }
							set_temp_variable = { factory_buy_amount = everyday_goods_sold_amount }
							multiply_temp_variable = { factory_cost_temp = factory_share }
							divide_temp_variable = { factory_cost_temp = 100 }
							multiply_temp_variable = { factory_buy_amount = factory_share }
							divide_temp_variable = { factory_buy_amount = 100 }

							set_temp_variable = { total_cost_temp = artisan_cost_temp }
							add_to_temp_variable = { total_cost_temp = factory_cost_temp }
							set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
							add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_cost_temp = everyday_goods_sold_value } }
								}
								subtract_from_temp_variable = { total_cost_temp = everyday_goods_sold_value }
								subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_buy_amount_temp = everyday_goods_sold_amount } }
								}
								subtract_from_temp_variable = { total_buy_amount_temp = everyday_goods_sold_amount }
								subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
								subtract_from_temp_variable = { factory_buy_amount = 0.001 }
								add_to_temp_variable = { artisan_buy_amount = 0.001 }
							}
							
							add_to_variable = { factory_everyday_goods_money = factory_cost_temp }
							add_to_variable = { factory_everyday_goods_earnings = factory_cost_temp }
							add_to_variable = { factory_everyday_goods_sold = factory_buy_amount }

							if = { 
								limit = {
									check_variable = { factory_everyday_goods_sold > factory_everyday_goods_production }
								}
								add_to_temp_variable = { artisan_buy_amount = factory_everyday_goods_sold }
								subtract_from_temp_variable = { artisan_buy_amount = factory_everyday_goods_production }
								set_variable = { factory_everyday_goods_sold = factory_everyday_goods_production }
							}

							add_to_variable = { artisans_earnings = artisan_cost_temp }
							add_to_variable = { pops_earnings = artisan_cost_temp }
							add_to_variable = { pops_artisans_everyday_goods_sold = artisan_buy_amount }
						}
					#
					#Luxury Goods Bought
						if = {
							limit = {
								OR = {
									check_variable = { luxury_goods_bought_value > 0 }
									check_variable = { luxury_goods_bought_amount > 0 }
								}
							}
							#Only pops can demand Luxury Goods
							set_temp_variable = { cost_temp = luxury_goods_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							subtract_from_variable = { pops_money = cost_temp }
							add_to_variable = { pops_goods_spending = cost_temp }
							set_temp_variable = { needs_fulfilled_temp = luxury_goods_bought_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_luxury_goods_need }
							add_to_variable = { pops_luxury_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_luxury_goods_fulfilled_percentage
								min = 0
								max = 1
							}
						}
					#
					#Luxury Goods Sold
						if = {
							limit = {
								OR = {
									check_variable = { luxury_goods_sold_value > 0 }
									check_variable = { luxury_goods_sold_amount > 0 }
								}
							}
							#Splitting between Factories and Artisans
							set_temp_variable = { artisan_share = pops_artisans_luxury_goods_production }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = luxury_goods_produced_amount }

							set_temp_variable = { factory_share = factory_luxury_goods_production }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = luxury_goods_produced_amount }

							set_temp_variable = { artisan_cost_temp = luxury_goods_sold_value }
							set_temp_variable = { artisan_buy_amount = luxury_goods_sold_amount }
							multiply_temp_variable = { artisan_cost_temp = artisan_share }
							divide_temp_variable = { artisan_cost_temp = 100 }
							multiply_temp_variable = { artisan_buy_amount = artisan_share }
							divide_temp_variable = { artisan_buy_amount = 100 }

							set_temp_variable = { factory_cost_temp = luxury_goods_sold_value }
							set_temp_variable = { factory_buy_amount = luxury_goods_sold_amount }
							multiply_temp_variable = { factory_cost_temp = factory_share }
							divide_temp_variable = { factory_cost_temp = 100 }
							multiply_temp_variable = { factory_buy_amount = factory_share }
							divide_temp_variable = { factory_buy_amount = 100 }

							set_temp_variable = { total_cost_temp = artisan_cost_temp }
							add_to_temp_variable = { total_cost_temp = factory_cost_temp }
							set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
							add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_cost_temp = luxury_goods_sold_value } }
								}
								subtract_from_temp_variable = { total_cost_temp = luxury_goods_sold_value }
								subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_buy_amount_temp = luxury_goods_sold_amount } }
								}
								subtract_from_temp_variable = { total_buy_amount_temp = luxury_goods_sold_amount }
								subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
								subtract_from_temp_variable = { factory_buy_amount = 0.001 }
								add_to_temp_variable = { artisan_buy_amount = 0.001 }
							}
							
							add_to_variable = { factory_luxury_goods_money = factory_cost_temp }
							add_to_variable = { factory_luxury_goods_earnings = factory_cost_temp }
							add_to_variable = { factory_luxury_goods_sold = factory_buy_amount }

							if = { 
								limit = {
									check_variable = { factory_luxury_goods_sold > factory_luxury_goods_production }
								}
								add_to_temp_variable = { artisan_buy_amount = factory_luxury_goods_sold }
								subtract_from_temp_variable = { artisan_buy_amount = factory_luxury_goods_production }
								set_variable = { factory_luxury_goods_sold = factory_luxury_goods_production }
							}

							add_to_variable = { artisans_earnings = artisan_cost_temp }
							add_to_variable = { pops_earnings = artisan_cost_temp }
							add_to_variable = { pops_artisans_luxury_goods_sold = artisan_buy_amount }
						}
					#
					#Services Bought
						if = {
							limit = {
								OR = {
									check_variable = { services_bought_value > 0 }
									check_variable = { services_bought_amount > 0 }
								}
							}
							#Only pops can demand Services
							set_temp_variable = { cost_temp = services_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							subtract_from_variable = { pops_money = cost_temp }
							add_to_variable = { pops_goods_spending = cost_temp }
							set_temp_variable = { needs_fulfilled_temp = services_bought_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_services_need }
							add_to_variable = { pops_services_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_services_fulfilled_percentage
								min = 0
								max = 1
							}
						}
					#
					#Services Sold
						if = {
							limit = {
								OR = {
									check_variable = { services_sold_value > 0 }
									check_variable = { services_sold_amount > 0 }
								}
							}
							#Revenue & goods sold absorbed by pops
							add_to_variable = { pops_earnings = services_sold_value }

							set_temp_variable = { capitalists_share = pops_services_production }
							multiply_temp_variable = { capitalists_share = 50 }
							set_temp_variable = { clerks_share = pops_clerks_services_production }
							multiply_temp_variable = { clerks_share = 100 }
							set_temp_variable = { professionals_share = pops_professionals_services_production }
							multiply_temp_variable = { professionals_share = 100 }

							set_temp_variable = { share_total = capitalists_share }
							add_to_temp_variable = { share_total = clerks_share }
							add_to_temp_variable = { share_total = professionals_share }
							divide_temp_variable = { share_total = 100 }

							divide_temp_variable = { capitalists_share = share_total }
							divide_temp_variable = { clerks_share = share_total }
							divide_temp_variable = { professionals_share = share_total }

							set_temp_variable = { capitalists_value = services_sold_value }
							multiply_temp_variable = { capitalists_value = capitalists_share }
							divide_temp_variable = { capitalists_value = 100 }
							set_temp_variable = { clerks_value = services_sold_value }
							multiply_temp_variable = { clerks_value = clerks_share }
							divide_temp_variable = { clerks_value = 100 }
							set_temp_variable = { professionals_value = services_sold_value }
							multiply_temp_variable = { professionals_value = professionals_share }
							divide_temp_variable = { professionals_value = 100 }

							add_to_variable = { capitalists_earnings = capitalists_value }
							add_to_variable = { clerks_earnings = clerks_value }
							add_to_variable = { professionals_earnings = professionals_value }

							add_to_variable = { pops_services_sold = services_sold_amount }
						}
					#
					#Raw Goods Bought
						if = {
							limit = {
								OR = {
									check_variable = { raw_goods_bought_value > 0 }
									check_variable = { raw_goods_bought_amount > 0 }
								}
							}
							#Costs & goods absorbed by factories/artisans
							#Splitting between Factories and Artisans
							set_temp_variable = { cost_temp = raw_goods_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							set_temp_variable = { artisan_share = pops_artisans_raw_goods_demand }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = raw_goods_demand }

							set_temp_variable = { factory_share = factory_raw_goods_demand }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = raw_goods_demand }

							set_temp_variable = { artisan_goods_value = cost_temp }
							set_temp_variable = { artisan_goods_amount = raw_goods_bought_amount }
							multiply_temp_variable = { artisan_goods_value = artisan_share }
							divide_temp_variable = { artisan_goods_value = 100 }
							multiply_temp_variable = { artisan_goods_amount = artisan_share }
							divide_temp_variable = { artisan_goods_amount = 100 }

							set_temp_variable = { factory_goods_value = cost_temp }
							set_temp_variable = { factory_goods_amount = raw_goods_bought_amount }
							multiply_temp_variable = { factory_goods_value = factory_share }
							divide_temp_variable = { factory_goods_value = 100 }
							multiply_temp_variable = { factory_goods_amount = factory_share }
							divide_temp_variable = { factory_goods_amount = 100 }

							set_temp_variable = { total_goods_value = artisan_goods_value }
							add_to_temp_variable = { total_goods_value = factory_goods_value }
							set_temp_variable = { total_goods_amount_temp = artisan_goods_amount }
							add_to_temp_variable = { total_goods_amount_temp = factory_goods_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_goods_value = cost_temp } }
								}
								subtract_from_temp_variable = { total_goods_value = cost_temp }
								subtract_from_temp_variable = { factory_goods_value = total_goods_value }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_goods_amount_temp = raw_goods_bought_amount } }
								}
								subtract_from_temp_variable = { total_goods_amount_temp = raw_goods_bought_amount }
								subtract_from_temp_variable = { factory_goods_amount = total_goods_amount_temp }
							}
							
							#Splitting between industry categories
							set_temp_variable = { m_temp = factory_everyday_goods_raw_goods_demand }
							multiply_temp_variable = { m_temp = 100 }
							divide_temp_variable = { m_temp = factory_raw_goods_demand }
							set_temp_variable = { needs_fulfilled_temp = m_temp }
							multiply_temp_variable = { m_temp = factory_goods_value }
							divide_temp_variable = { m_temp = 100 }
							subtract_from_variable = { factory_everyday_goods_money = m_temp }
							add_to_variable = { factory_everyday_goods_spending = m_temp }
							
							multiply_temp_variable = { needs_fulfilled_temp = factory_goods_amount }
							divide_temp_variable = { needs_fulfilled_temp = factory_everyday_goods_raw_goods_need }
							divide_temp_variable = { needs_fulfilled_temp = 100 }
							add_to_variable = { factory_everyday_goods_raw_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = factory_everyday_goods_raw_goods_fulfilled_percentage
								min = 0
								max = 1
							}

							set_temp_variable = { m_temp = factory_luxury_goods_raw_goods_demand }
							multiply_temp_variable = { m_temp = 100 }
							divide_temp_variable = { m_temp = factory_raw_goods_demand }
							set_temp_variable = { needs_fulfilled_temp = m_temp }
							multiply_temp_variable = { m_temp = factory_goods_value }
							divide_temp_variable = { m_temp = 100 }
							subtract_from_variable = { factory_luxury_goods_money = m_temp }
							add_to_variable = { factory_luxury_goods_spending = m_temp }
							
							multiply_temp_variable = { needs_fulfilled_temp = factory_goods_amount }
							divide_temp_variable = { needs_fulfilled_temp = factory_luxury_goods_raw_goods_need }
							divide_temp_variable = { needs_fulfilled_temp = 100 }
							add_to_variable = { factory_luxury_goods_raw_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = factory_luxury_goods_raw_goods_fulfilled_percentage
								min = 0
								max = 1
							}

							set_temp_variable = { m_temp = factory_industrial_goods_raw_goods_demand }
							multiply_temp_variable = { m_temp = 100 }
							divide_temp_variable = { m_temp = factory_raw_goods_demand }
							set_temp_variable = { needs_fulfilled_temp = m_temp }
							multiply_temp_variable = { m_temp = factory_goods_value }
							divide_temp_variable = { m_temp = 100 }
							subtract_from_variable = { factory_industrial_goods_money = m_temp }
							add_to_variable = { factory_industrial_goods_spending = m_temp }
							
							multiply_temp_variable = { needs_fulfilled_temp = factory_goods_amount }
							divide_temp_variable = { needs_fulfilled_temp = factory_industrial_goods_raw_goods_need }
							divide_temp_variable = { needs_fulfilled_temp = 100 }
							add_to_variable = { factory_industrial_goods_raw_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = factory_industrial_goods_raw_goods_fulfilled_percentage
								min = 0
								max = 1
							}

							subtract_from_variable = { pops_money = artisan_goods_value }
							add_to_variable = { pops_spending = artisan_goods_value }
							set_temp_variable = { needs_fulfilled_temp = artisan_goods_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_artisans_raw_goods_need }
							add_to_variable = { pops_artisans_raw_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_artisans_raw_goods_fulfilled_percentage
								min = 0
								max = 1
							}

						}
					#
					#Raw Goods Sold
						if = {
							limit = {
								OR = {
									check_variable = { raw_goods_sold_value > 0 }
									check_variable = { raw_goods_sold_amount > 0 }
								}
							}
							#Revenue & goods sold absorbed by rgos
							add_to_variable = { pops_earnings = raw_goods_sold_value }
							add_to_variable = { rgos_earnings = raw_goods_sold_value }

							add_to_variable = { pops_rgos_raw_goods_sold = raw_goods_sold_amount }
						}
					#
					#Industrial Goods Bought
						if = {
							limit = {
								OR = {
									check_variable = { industrial_goods_bought_value > 0 }
									check_variable = { industrial_goods_bought_amount > 0 }
								}
							}
							set_temp_variable = { cost_temp = industrial_goods_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							#So many things here...
							#Costs & goods split between factories, infra, & construction 
							#Splitting between Factories and Construction

							#Turned it into an array b/c fuck the amount of code that I had
							clear_temp_array = share_array_temp
							clear_temp_array = value_array_temp
							clear_temp_array = amount_array_temp

							# Index corresponds to where the industrial goods demand goes
							# New ones will be added onto the end
							# INDEX NUMBERS:
							#   0 - Factory Maintenance
							#   1 - Everyday Goods Factory Construction
							#   2 - Luxury Goods Factory Construction
							#   3 - Industrial Goods Factory Construction
							#   4 - Infrastructure Maintenance
							#   5 - Infrastructure Construction
							#   6 - Mechanized Agri Maintenance
							#   7 - Mechanized Agri Expansion

							# NOTE FOR SELF: 
							#	When adding new things here, make sure to increase the size of ALL arrays

							####################
							### DEMAND SHARE ###
							####################
								resize_temp_array = {
									array = share_array_temp
									value = 0
									size = 8
								}
								set_temp_variable = { share_array_temp^0 = factory_industrial_goods_demand }
								set_temp_variable = { share_array_temp^1 = factory_everyday_goods_construction_industrial_goods_demand }
								set_temp_variable = { share_array_temp^2 = factory_luxury_goods_construction_industrial_goods_demand }
								set_temp_variable = { share_array_temp^3 = factory_industrial_goods_construction_industrial_goods_demand }
								set_temp_variable = { share_array_temp^4 = infrastructure_industrial_goods_demand }
								set_temp_variable = { share_array_temp^5 = infrastructure_construction_industrial_goods_demand }
								set_temp_variable = { share_array_temp^6 = pops_rgos_mechanization_industrial_goods_demand }
								set_temp_variable = { share_array_temp^7 = pops_rgos_mechanization_expansion_industrial_goods_demand }

								for_each_loop = {
									array = share_array_temp
									value = vv_temp
									index = ii_temp
									
									multiply_temp_variable = { share_array_temp^ii_temp = 100 }
									divide_temp_variable = { share_array_temp^ii_temp = industrial_goods_demand }
								}

							####################

							#######################
							### VALUE & AMOUNTS ###
							#######################
								resize_temp_array = {
									array = value_array_temp
									value = 0
									size = 8
								}
								resize_temp_array = {
									array = amount_array_temp
									value = 0
									size = 8
								}
								set_temp_variable = { total_value_temp = 0 }
								set_temp_variable = { total_amount_temp = 0 }

								for_each_loop = {
									array = value_array_temp
									value = vv_temp
									index = ii_temp
									
									set_temp_variable = { value_array_temp^ii_temp = cost_temp }
									set_temp_variable = { amount_array_temp^ii_temp = industrial_goods_bought_amount }

									multiply_temp_variable = { value_array_temp^ii_temp = share_array_temp^ii_temp }
									multiply_temp_variable = { amount_array_temp^ii_temp = share_array_temp^ii_temp }

									divide_temp_variable = { value_array_temp^ii_temp = 100 }
									divide_temp_variable = { amount_array_temp^ii_temp = 100 }

									add_to_temp_variable = { total_value_temp = value_array_temp^ii_temp }
									add_to_temp_variable = { total_amount_temp = amount_array_temp^ii_temp }
								}

								if = {
									limit = {
										NOT = { check_variable = { total_value_temp = cost_temp } }
									}
									set_temp_variable = { missing_value_temp = cost_temp }
									subtract_from_temp_variable = { missing_value_temp = total_value_temp }

									subtract_from_variable = { pops_money = missing_value_temp } #Pops deal with the missing value. Should be negligible though.
								}
								if = {
									limit = {
										NOT = { check_variable = { total_amount_temp = industrial_goods_bought_amount } }
									}
									for_each_loop = {
										array = value_array_temp
										value = vv_temp
										index = ii_temp
										if = {
											limit = {
												check_variable = { amount_array_temp^ii_temp > 0 }
											}
											add_to_temp_variable = { amount_array_temp^ii_temp = 0.001 }
											multiply_temp_variable = { amount_array_temp^ii_temp = 1.001 }
										}
									}
								}

							#######################

							###############
							### RESOLVE ###
							###############

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^0 > 0 }
											check_variable = { amount_array_temp^0 > 0 }
										}
									}
									#Splitting between industry categories
									set_temp_variable = { m_temp = factory_everyday_goods_industrial_goods_demand }
									multiply_temp_variable = { m_temp = 100 }
									divide_temp_variable = { m_temp = factory_industrial_goods_demand }
									set_temp_variable = { needs_fulfilled_temp = m_temp }
									multiply_temp_variable = { m_temp = value_array_temp^0 }
									divide_temp_variable = { m_temp = 100 }
									subtract_from_variable = { factory_everyday_goods_money = m_temp }
									add_to_variable = { factory_everyday_goods_spending = m_temp }
									
									multiply_temp_variable = { needs_fulfilled_temp = amount_array_temp^0 }
									divide_temp_variable = { needs_fulfilled_temp = factory_everyday_goods_industrial_goods_need }
									divide_temp_variable = { needs_fulfilled_temp = 100 }
									add_to_variable = { factory_everyday_goods_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
									clamp_variable = {
										var = factory_everyday_goods_industrial_goods_fulfilled_percentage
										min = 0
										max = 1
									}

									set_temp_variable = { m_temp = factory_luxury_goods_industrial_goods_demand }
									multiply_temp_variable = { m_temp = 100 }
									divide_temp_variable = { m_temp = factory_industrial_goods_demand }
									set_temp_variable = { needs_fulfilled_temp = m_temp }
									multiply_temp_variable = { m_temp = value_array_temp^0 }
									divide_temp_variable = { m_temp = 100 }
									subtract_from_variable = { factory_luxury_goods_money = m_temp }
									add_to_variable = { factory_luxury_goods_spending = m_temp }
									
									multiply_temp_variable = { needs_fulfilled_temp = amount_array_temp^0 }
									divide_temp_variable = { needs_fulfilled_temp = factory_luxury_goods_industrial_goods_need }
									divide_temp_variable = { needs_fulfilled_temp = 100 }
									add_to_variable = { factory_luxury_goods_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
									clamp_variable = {
										var = factory_luxury_goods_industrial_goods_fulfilled_percentage
										min = 0
										max = 1
									}

									set_temp_variable = { m_temp = factory_industrial_goods_industrial_goods_demand }
									multiply_temp_variable = { m_temp = 100 }
									divide_temp_variable = { m_temp = factory_industrial_goods_demand }
									set_temp_variable = { needs_fulfilled_temp = m_temp }
									multiply_temp_variable = { m_temp = value_array_temp^0 }
									divide_temp_variable = { m_temp = 100 }
									subtract_from_variable = { factory_industrial_goods_money = m_temp }
									add_to_variable = { factory_industrial_goods_spending = m_temp }
									
									multiply_temp_variable = { needs_fulfilled_temp = amount_array_temp^0 }
									divide_temp_variable = { needs_fulfilled_temp = factory_industrial_goods_industrial_goods_need }
									divide_temp_variable = { needs_fulfilled_temp = 100 }
									add_to_variable = { factory_industrial_goods_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
									clamp_variable = {
										var = factory_industrial_goods_industrial_goods_fulfilled_percentage
										min = 0
										max = 1
									}
								}

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^1 > 0 }
											check_variable = { amount_array_temp^1 > 0 }
										}
									}
									subtract_from_variable = { factory_everyday_goods_construction_investment_money = value_array_temp^1 }
									subtract_from_variable = { factory_everyday_goods_construction_industrial_goods_need = amount_array_temp^1 }
									if = {
										limit = {
											check_variable = { factory_everyday_goods_construction_industrial_goods_need < 0 }
										}
										set_variable = { factory_everyday_goods_construction_industrial_goods_need = 0 }
									}
								}
								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^2 > 0 }
											check_variable = { amount_array_temp^2 > 0 }
										}
									}
									subtract_from_variable = { factory_luxury_goods_construction_investment_money = value_array_temp^2 }
									subtract_from_variable = { factory_luxury_goods_construction_industrial_goods_need = amount_array_temp^2 }
									if = {
										limit = {
											check_variable = { factory_luxury_goods_construction_industrial_goods_need < 0 }
										}
										set_variable = { factory_luxury_goods_construction_industrial_goods_need = 0 }
									}
								}
								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^3 > 0 }
											check_variable = { amount_array_temp^3 > 0 }
										}
									}
									subtract_from_variable = { factory_industrial_goods_construction_investment_money = value_array_temp^3 }
									subtract_from_variable = { factory_industrial_goods_construction_industrial_goods_need = amount_array_temp^3 }
									if = {
										limit = {
											check_variable = { factory_industrial_goods_construction_industrial_goods_need < 0 }
										}
										set_variable = { factory_industrial_goods_construction_industrial_goods_need = 0 }
									}
								}

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^4 > 0 }
											check_variable = { amount_array_temp^4 > 0 }
										}
									}
									subtract_from_variable = { infrastructure_money = value_array_temp^4 }
									set_temp_variable = { needs_fulfilled_temp = amount_array_temp^4 }
									divide_temp_variable = { needs_fulfilled_temp = infrastructure_industrial_goods_need }
									add_to_variable = { infrastructure_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
									clamp_variable = {
										var = infrastructure_industrial_goods_fulfilled_percentage
										min = 0
										max = 1
									}
								}

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^5 > 0 }
											check_variable = { amount_array_temp^5 > 0 }
										}
									}
									subtract_from_variable = { infrastructure_construction_investment_money = value_array_temp^5 }
									subtract_from_variable = { infrastructure_construction_industrial_goods_need = amount_array_temp^5 }
									if = {
										limit = {
											check_variable = { infrastructure_construction_industrial_goods_need < 0 }
										}
										set_variable = { infrastructure_construction_industrial_goods_need = 0 }
									}
								}

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^6 > 0 }
											check_variable = { amount_array_temp^6 > 0 }
										}
									}
									subtract_from_variable = { pops_money = value_array_temp^6 }
									set_temp_variable = { needs_fulfilled_temp = amount_array_temp^6 }
									divide_temp_variable = { needs_fulfilled_temp = pops_rgos_mechanization_industrial_goods_need }
									add_to_variable = { pops_rgos_mechanization_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
									clamp_variable = {
										var = pops_rgos_mechanization_industrial_goods_fulfilled_percentage
										min = 0
										max = 1
									}
								}

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^7 > 0 }
											check_variable = { amount_array_temp^7 > 0 }
										}
									}
									subtract_from_variable = { pops_money = value_array_temp^7 }
									set_variable = { pops_rgos_mechanization_expansion_industrial_goods_fulfillment = amount_array_temp^7 }
								}
							###############

						}
					#
					#Industrial Goods Sold
						if = {
							limit = {
								OR = {
									check_variable = { industrial_goods_sold_value > 0 }
									check_variable = { industrial_goods_sold_amount > 0 }
								}
							}
							#Splitting between Factories and Artisans
							set_temp_variable = { artisan_share = pops_artisans_industrial_goods_production }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = industrial_goods_produced_amount }

							set_temp_variable = { factory_share = factory_industrial_goods_production }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = industrial_goods_produced_amount }

							set_temp_variable = { artisan_cost_temp = industrial_goods_sold_value }
							set_temp_variable = { artisan_buy_amount = industrial_goods_sold_amount }
							multiply_temp_variable = { artisan_cost_temp = artisan_share }
							divide_temp_variable = { artisan_cost_temp = 100 }
							multiply_temp_variable = { artisan_buy_amount = artisan_share }
							divide_temp_variable = { artisan_buy_amount = 100 }

							set_temp_variable = { factory_cost_temp = industrial_goods_sold_value }
							set_temp_variable = { factory_buy_amount = industrial_goods_sold_amount }
							multiply_temp_variable = { factory_cost_temp = factory_share }
							divide_temp_variable = { factory_cost_temp = 100 }
							multiply_temp_variable = { factory_buy_amount = factory_share }
							divide_temp_variable = { factory_buy_amount = 100 }

							set_temp_variable = { total_cost_temp = artisan_cost_temp }
							add_to_temp_variable = { total_cost_temp = factory_cost_temp }
							set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
							add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_cost_temp = industrial_goods_sold_value } }
								}
								subtract_from_temp_variable = { total_cost_temp = industrial_goods_sold_value }
								subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_buy_amount_temp = industrial_goods_sold_amount } }
								}
								subtract_from_temp_variable = { total_buy_amount_temp = industrial_goods_sold_amount }
								subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
								subtract_from_temp_variable = { factory_buy_amount = 0.001 }
								add_to_temp_variable = { artisan_buy_amount = 0.001 }
							}
							
							add_to_variable = { factory_industrial_goods_money = factory_cost_temp }
							add_to_variable = { factory_industrial_goods_earnings = factory_cost_temp }
							add_to_variable = { factory_industrial_goods_sold = factory_buy_amount }

							if = { 
								limit = {
									check_variable = { factory_industrial_goods_sold > factory_industrial_goods_production }
								}
								add_to_temp_variable = { artisan_buy_amount = factory_industrial_goods_sold }
								subtract_from_temp_variable = { artisan_buy_amount = factory_industrial_goods_production }
								set_variable = { factory_industrial_goods_sold = factory_industrial_goods_production }
							}

							add_to_variable = { artisans_earnings = artisan_cost_temp }
							add_to_variable = { pops_earnings = artisan_cost_temp }
							add_to_variable = { pops_artisans_industrial_goods_sold = artisan_buy_amount }
						}
					#
				#

				#Factory Wages & Profit
					#Everyday Goods
						set_variable = { factory_everyday_goods_wages = factory_everyday_goods_earnings }
						multiply_variable = { factory_everyday_goods_wages = global.factory_wages_revenue_percentage }

						set_temp_variable = { factory_wage_max_money_temp = global.factory_wages_max_money_percentage }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_everyday_goods_money_limit }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_employment_amount }
						divide_temp_variable = { factory_wage_max_money_temp = factory_employment_amount_max }
						add_to_variable = { factory_everyday_goods_wages = factory_wage_max_money_temp }

						add_to_variable = { factory_everyday_goods_spending = factory_everyday_goods_wages }

						set_variable = { factory_everyday_goods_profit = factory_everyday_goods_earnings }
						subtract_from_variable = { factory_everyday_goods_profit = factory_everyday_goods_spending }

						set_temp_variable = { bonuses_temp = factory_everyday_goods_profit }
						multiply_temp_variable = { bonuses_temp = global.factory_wages_profit_percentage }
						add_to_variable = { factory_everyday_goods_wages = bonuses_temp }

						add_to_variable = { factory_everyday_goods_spending = bonuses_temp }
						subtract_from_variable = { factory_everyday_goods_profit = bonuses_temp }

						subtract_from_variable = { factory_everyday_goods_money = factory_everyday_goods_wages }
						if = {
							limit = {
								check_variable = { factory_everyday_goods_money < 0 }
							}
							add_to_variable = { factory_everyday_goods_wages = factory_everyday_goods_money }
							set_variable = { factory_everyday_goods_money = 0 }
						}
						add_to_variable = { pops_earnings = factory_everyday_goods_wages }

						set_temp_variable = { capitalists_share = capitalists_percentage }
						multiply_temp_variable = { capitalists_share = 900 }
						set_temp_variable = { craftsmen_share = craftsmen_percentage }
						multiply_temp_variable = { craftsmen_share = 100 }
						set_temp_variable = { specialists_share = specialists_percentage }
						multiply_temp_variable = { specialists_share = 100 }
						set_temp_variable = { modifier_temp = global.pops_specialists_production_bonus }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_temp_variable = { specialists_share = modifier_temp }

						set_temp_variable = { share_total = capitalists_share }
						add_to_temp_variable = { share_total = craftsmen_share }
						add_to_temp_variable = { share_total = specialists_share }
						divide_temp_variable = { share_total = 100 }

						divide_temp_variable = { capitalists_share = share_total }
						divide_temp_variable = { craftsmen_share = share_total }
						divide_temp_variable = { specialists_share = share_total }

						set_temp_variable = { capitalists_value = factory_everyday_goods_wages }
						multiply_temp_variable = { capitalists_value = capitalists_share }
						divide_temp_variable = { capitalists_value = 100 }
						set_temp_variable = { craftsmen_value = factory_everyday_goods_wages }
						multiply_temp_variable = { craftsmen_value = craftsmen_share }
						divide_temp_variable = { craftsmen_value = 100 }
						set_temp_variable = { specialists_value = factory_everyday_goods_wages }
						multiply_temp_variable = { specialists_value = specialists_share }
						divide_temp_variable = { specialists_value = 100 }

						add_to_variable = { capitalists_earnings = capitalists_value }
						add_to_variable = { craftsmen_earnings = craftsmen_value }
						add_to_variable = { specialists_earnings = specialists_value }
						
						if = {
							limit = {
								check_variable = { factory_everyday_goods_money > factory_everyday_goods_money_limit }
							}
							set_temp_variable = { excess_temp = factory_everyday_goods_money }
							subtract_from_temp_variable = { excess_temp = factory_everyday_goods_money_limit }
							divide_temp_variable = { excess_temp = 2 }
							add_to_variable = { pops_earnings = excess_temp }
							set_temp_variable = { capitalists_value = excess_temp }
							multiply_temp_variable = { capitalists_value = capitalists_share }
							divide_temp_variable = { capitalists_value = 100 }
							set_temp_variable = { craftsmen_value = excess_temp }
							multiply_temp_variable = { craftsmen_value = craftsmen_share }
							divide_temp_variable = { craftsmen_value = 100 }
							set_temp_variable = { specialists_value = excess_temp }
							multiply_temp_variable = { specialists_value = specialists_share }
							divide_temp_variable = { specialists_value = 100 }

							add_to_variable = { capitalists_earnings = capitalists_value }
							add_to_variable = { craftsmen_earnings = craftsmen_value }
							add_to_variable = { specialists_earnings = specialists_value }

							subtract_from_variable = { factory_everyday_goods_money = excess_temp }
						}
					#
					#Luxury Goods
						set_variable = { factory_luxury_goods_wages = factory_luxury_goods_earnings }
						multiply_variable = { factory_luxury_goods_wages = global.factory_wages_revenue_percentage }

						set_temp_variable = { factory_wage_max_money_temp = global.factory_wages_max_money_percentage }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_luxury_goods_money_limit }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_employment_amount }
						divide_temp_variable = { factory_wage_max_money_temp = factory_employment_amount_max }
						add_to_variable = { factory_luxury_goods_wages = factory_wage_max_money_temp }

						add_to_variable = { factory_luxury_goods_spending = factory_luxury_goods_wages }

						set_variable = { factory_luxury_goods_profit = factory_luxury_goods_earnings }
						subtract_from_variable = { factory_luxury_goods_profit = factory_luxury_goods_spending }

						set_temp_variable = { bonuses_temp = factory_luxury_goods_profit }
						multiply_temp_variable = { bonuses_temp = global.factory_wages_profit_percentage }
						add_to_variable = { factory_luxury_goods_wages = bonuses_temp }

						add_to_variable = { factory_luxury_goods_spending = bonuses_temp }
						subtract_from_variable = { factory_luxury_goods_profit = bonuses_temp }

						subtract_from_variable = { factory_luxury_goods_money = factory_luxury_goods_wages }
						if = {
							limit = {
								check_variable = { factory_luxury_goods_money < 0 }
							}
							add_to_variable = { factory_luxury_goods_wages = factory_luxury_goods_money }
							set_variable = { factory_luxury_goods_money = 0 }
						}
						add_to_variable = { pops_earnings = factory_luxury_goods_wages }

						set_temp_variable = { capitalists_share = capitalists_percentage }
						multiply_temp_variable = { capitalists_share = 900 }
						set_temp_variable = { craftsmen_share = craftsmen_percentage }
						multiply_temp_variable = { craftsmen_share = 100 }
						set_temp_variable = { specialists_share = specialists_percentage }
						multiply_temp_variable = { specialists_share = 100 }
						set_temp_variable = { modifier_temp = global.pops_specialists_production_bonus }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_temp_variable = { specialists_share = modifier_temp }

						set_temp_variable = { share_total = capitalists_share }
						add_to_temp_variable = { share_total = craftsmen_share }
						add_to_temp_variable = { share_total = specialists_share }
						divide_temp_variable = { share_total = 100 }

						divide_temp_variable = { capitalists_share = share_total }
						divide_temp_variable = { craftsmen_share = share_total }
						divide_temp_variable = { specialists_share = share_total }

						set_temp_variable = { capitalists_value = factory_luxury_goods_wages }
						multiply_temp_variable = { capitalists_value = capitalists_share }
						divide_temp_variable = { capitalists_value = 100 }
						set_temp_variable = { craftsmen_value = factory_luxury_goods_wages }
						multiply_temp_variable = { craftsmen_value = craftsmen_share }
						divide_temp_variable = { craftsmen_value = 100 }
						set_temp_variable = { specialists_value = factory_luxury_goods_wages }
						multiply_temp_variable = { specialists_value = specialists_share }
						divide_temp_variable = { specialists_value = 100 }

						add_to_variable = { capitalists_earnings = capitalists_value }
						add_to_variable = { craftsmen_earnings = craftsmen_value }
						add_to_variable = { specialists_earnings = specialists_value }
						
						if = {
							limit = {
								check_variable = { factory_luxury_goods_money > factory_luxury_goods_money_limit }
							}
							set_temp_variable = { excess_temp = factory_luxury_goods_money }
							subtract_from_temp_variable = { excess_temp = factory_luxury_goods_money_limit }
							divide_temp_variable = { excess_temp = 2 }
							add_to_variable = { pops_earnings = excess_temp }
							set_temp_variable = { capitalists_value = excess_temp }
							multiply_temp_variable = { capitalists_value = capitalists_share }
							divide_temp_variable = { capitalists_value = 100 }
							set_temp_variable = { craftsmen_value = excess_temp }
							multiply_temp_variable = { craftsmen_value = craftsmen_share }
							divide_temp_variable = { craftsmen_value = 100 }
							set_temp_variable = { specialists_value = excess_temp }
							multiply_temp_variable = { specialists_value = specialists_share }
							divide_temp_variable = { specialists_value = 100 }

							add_to_variable = { capitalists_earnings = capitalists_value }
							add_to_variable = { craftsmen_earnings = craftsmen_value }
							add_to_variable = { specialists_earnings = specialists_value }

							subtract_from_variable = { factory_luxury_goods_money = excess_temp }
						}
					#
					#Industrial Goods
						set_variable = { factory_industrial_goods_wages = factory_industrial_goods_earnings }
						multiply_variable = { factory_industrial_goods_wages = global.factory_wages_revenue_percentage }

						set_temp_variable = { factory_wage_max_money_temp = global.factory_wages_max_money_percentage }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_industrial_goods_money_limit }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_employment_amount }
						divide_temp_variable = { factory_wage_max_money_temp = factory_employment_amount_max }
						add_to_variable = { factory_industrial_goods_wages = factory_wage_max_money_temp }

						add_to_variable = { factory_industrial_goods_spending = factory_industrial_goods_wages }

						set_variable = { factory_industrial_goods_profit = factory_industrial_goods_earnings }
						subtract_from_variable = { factory_industrial_goods_profit = factory_industrial_goods_spending }

						set_temp_variable = { bonuses_temp = factory_industrial_goods_profit }
						multiply_temp_variable = { bonuses_temp = global.factory_wages_profit_percentage }
						add_to_variable = { factory_industrial_goods_wages = bonuses_temp }

						add_to_variable = { factory_industrial_goods_spending = bonuses_temp }
						subtract_from_variable = { factory_industrial_goods_profit = bonuses_temp }

						subtract_from_variable = { factory_industrial_goods_money = factory_industrial_goods_wages }
						if = {
							limit = {
								check_variable = { factory_industrial_goods_money < 0 }
							}
							add_to_variable = { factory_industrial_goods_wages = factory_industrial_goods_money }
							set_variable = { factory_industrial_goods_money = 0 }
						}
						add_to_variable = { pops_earnings = factory_industrial_goods_wages }

						set_temp_variable = { capitalists_share = capitalists_percentage }
						multiply_temp_variable = { capitalists_share = 900 }
						set_temp_variable = { craftsmen_share = craftsmen_percentage }
						multiply_temp_variable = { craftsmen_share = 100 }
						set_temp_variable = { specialists_share = specialists_percentage }
						multiply_temp_variable = { specialists_share = 100 }
						set_temp_variable = { modifier_temp = global.pops_specialists_production_bonus }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_temp_variable = { specialists_share = modifier_temp }

						set_temp_variable = { share_total = capitalists_share }
						add_to_temp_variable = { share_total = craftsmen_share }
						add_to_temp_variable = { share_total = specialists_share }
						divide_temp_variable = { share_total = 100 }

						divide_temp_variable = { capitalists_share = share_total }
						divide_temp_variable = { craftsmen_share = share_total }
						divide_temp_variable = { specialists_share = share_total }

						set_temp_variable = { capitalists_value = factory_industrial_goods_wages }
						multiply_temp_variable = { capitalists_value = capitalists_share }
						divide_temp_variable = { capitalists_value = 100 }
						set_temp_variable = { craftsmen_value = factory_industrial_goods_wages }
						multiply_temp_variable = { craftsmen_value = craftsmen_share }
						divide_temp_variable = { craftsmen_value = 100 }
						set_temp_variable = { specialists_value = factory_industrial_goods_wages }
						multiply_temp_variable = { specialists_value = specialists_share }
						divide_temp_variable = { specialists_value = 100 }

						add_to_variable = { capitalists_earnings = capitalists_value }
						add_to_variable = { craftsmen_earnings = craftsmen_value }
						add_to_variable = { specialists_earnings = specialists_value }
						
						if = {
							limit = {
								check_variable = { factory_industrial_goods_money > factory_industrial_goods_money_limit }
							}
							set_temp_variable = { excess_temp = factory_industrial_goods_money }
							subtract_from_temp_variable = { excess_temp = factory_industrial_goods_money_limit }
							divide_temp_variable = { excess_temp = 2 }
							add_to_variable = { pops_earnings = excess_temp }
							set_temp_variable = { capitalists_value = excess_temp }
							multiply_temp_variable = { capitalists_value = capitalists_share }
							divide_temp_variable = { capitalists_value = 100 }
							set_temp_variable = { craftsmen_value = excess_temp }
							multiply_temp_variable = { craftsmen_value = craftsmen_share }
							divide_temp_variable = { craftsmen_value = 100 }
							set_temp_variable = { specialists_value = excess_temp }
							multiply_temp_variable = { specialists_value = specialists_share }
							divide_temp_variable = { specialists_value = 100 }

							add_to_variable = { capitalists_earnings = capitalists_value }
							add_to_variable = { craftsmen_earnings = craftsmen_value }
							add_to_variable = { specialists_earnings = specialists_value }

							subtract_from_variable = { factory_industrial_goods_money = excess_temp }
						}
					#
				#

				add_to_variable = { pops_earnings = pops_rgos_valuable_goods_production } #Gold in dem hills
				add_to_variable = { rgos_earnings = pops_rgos_valuable_goods_production }

				#Pops & National Bank put money into Savings
					#National Bank Interest
						set_temp_variable = { interest_temp = pops_savings }
						divide_temp_variable = { interest_temp = PREV.national_bank_amount_k }
						multiply_temp_variable = { interest_temp = PREV.national_bank_money }
						divide_temp_variable = { interest_temp = 100 }
						if = {
							limit = {
								check_variable = { interest_temp > PREV.national_bank_money }
							}
							set_temp_variable = { interest_temp = PREV.national_bank_money}
						}
						subtract_from_variable = { PREV.national_bank_money = interest_temp }
						add_to_variable = { pops_savings = interest_temp }
						add_to_variable = { pops_savings_interest = interest_temp }
					#

					set_temp_variable = { pops_savings_temp = pops_money }
					multiply_temp_variable = { pops_savings_temp = global.pops_savings_spending }
					
					set_variable = { pops_savings_goal = pops_earnings }
					multiply_variable = { pops_savings_goal = global.pops_savings_base_goal }
					if = {
						limit = {
							check_variable = { pops_savings < pops_savings_goal }
							check_variable = { pops_savings_temp > 0 }
						}
						add_to_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_savings_deposits = pops_savings_temp }
						subtract_from_variable = { pops_money = pops_savings_temp }
					}
					
					if = {
						limit = {
							check_variable = { pops_money < 0 }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { pops_savings_temp = pops_money }
						multiply_temp_variable = { pops_savings_temp = -1 }
						if = {
							limit = {
								check_variable = { pops_savings_temp > pops_savings }
							}
							set_temp_variable = { pops_savings_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_money = pops_savings_temp }
						add_to_variable = { pops_savings_withdrawals = pops_savings_temp }
					}
				#

				#RGO Revenue into Aristocrats

					set_temp_variable = { aristocrats_share = aristocrats_percentage }
					multiply_temp_variable = { aristocrats_share = 900 }
					set_temp_variable = { rgos_share = rgos_percentage }
					multiply_temp_variable = { rgos_share = 100 }

					set_temp_variable = { share_total = aristocrats_share }
					add_to_temp_variable = { share_total = rgos_share }
					divide_temp_variable = { share_total = 100 }

					divide_temp_variable = { aristocrats_share = share_total }
					divide_temp_variable = { rgos_share = share_total }

					set_temp_variable = { aristocrats_value = rgos_earnings }
					multiply_temp_variable = { aristocrats_value = aristocrats_share }
					divide_temp_variable = { aristocrats_value = 100 }
					set_temp_variable = { rgos_value = rgos_earnings }
					multiply_temp_variable = { rgos_value = rgos_share }
					divide_temp_variable = { rgos_value = 100 }

					set_variable = { aristocrats_earnings = aristocrats_value }
					set_variable = { rgos_earnings = rgos_value }
				#

				#Pop Demographics
					#Growth/Death
						set_variable = { pops_natural_birth_amount = pops_amount }
						divide_variable = { pops_natural_birth_amount = 100 }
						multiply_variable = { pops_natural_birth_amount = global.pops_natural_birth_base_rate }
						divide_variable = { pops_natural_birth_amount = 12 }

						set_variable = { pops_natural_death_amount = pops_amount }
						divide_variable = { pops_natural_death_amount = 100 }
						multiply_variable = { pops_natural_death_amount = global.pops_natural_death_base_rate }
						divide_variable = { pops_natural_death_amount = 12 }

						set_temp_variable = { disease_temp = pops_disease_death_amount }
						divide_temp_variable = { disease_temp = 1000 }
						add_to_variable = { pops_natural_death_amount = disease_temp }
						set_variable = { pops_disease_death_amount = 0 }

						set_variable = { pops_accidents_death_amount = pops_amount }
						divide_variable = { pops_accidents_death_amount = 100 }
						multiply_variable = { pops_accidents_death_amount = global.pops_accidents_death_base_rate }
						divide_variable = { pops_accidents_death_amount = 12 }

						set_variable = { pops_crime_death_amount = pops_amount }
						divide_variable = { pops_crime_death_amount = 100 }
						multiply_variable = { pops_crime_death_amount = global.pops_crime_death_base_rate }
						divide_variable = { pops_crime_death_amount = 12 }

						set_variable = { pops_other_death_amount = pops_amount }
						divide_variable = { pops_other_death_amount = 100 }
						multiply_variable = { pops_other_death_amount = global.pops_other_death_base_rate }
						divide_variable = { pops_other_death_amount = 12 }

						set_variable = { pops_starvation_percentage = 0 } #Percentage needed for starvation
						if = {
							limit = {
								check_variable = { pops_amount < 100 }
							}
							set_temp_variable = { pops_amount_temp = pops_amount }
							divide_temp_variable = { pops_amount_temp = 2000 }
							add_to_variable = { pops_starvation_percentage = pops_amount_temp }
						}
						else = {
							add_to_variable = { pops_starvation_percentage = 0.05 }

							if = {
								limit = {
									check_variable = { pops_amount < 1000 }
								}
								set_temp_variable = { pops_amount_temp = pops_amount }
								divide_temp_variable = { pops_amount_temp = 10000 }
								add_to_variable = { pops_starvation_percentage = pops_amount_temp }
							}
							else = {
								add_to_variable = { pops_starvation_percentage = 0.1 }
								if = {
									limit = {
										check_variable = { pops_amount < 30000 }
									}
									set_temp_variable = { pops_amount_temp = pops_amount }
									divide_temp_variable = { pops_amount_temp = 200000 }
									add_to_variable = { pops_starvation_percentage = pops_amount_temp }
								}
								else = {
									add_to_variable = { pops_starvation_percentage = 0.15 }
									set_temp_variable = { pops_amount_temp = pops_amount }
									divide_temp_variable = { pops_amount_temp = 2000000 }
									add_to_variable = { pops_starvation_percentage = pops_amount_temp }
								}
							}
						}
						if = {
							limit = {
								check_variable = { pops_annual_life_goods_fulfilled_percentage < pops_starvation_percentage } #Starvation
							}
							if = {
								limit = {
									check_variable = { pops_amount > 20 } #Low pop amounts may lead to them not getting goods by default
								}
								set_temp_variable = { pops_starvation_death_amount_temp = pops_amount }
								divide_temp_variable = { pops_starvation_death_amount_temp = 100 }
								multiply_temp_variable = { pops_starvation_death_amount_temp = global.pops_maximum_starvation_death_rate }
								divide_temp_variable = { pops_starvation_death_amount_temp = 12 }

								set_temp_variable = { percentage_applied_temp = pops_starvation_percentage }
								subtract_from_temp_variable = { percentage_applied_temp = pops_annual_life_goods_fulfilled_percentage }
								divide_temp_variable = { percentage_applied_temp = pops_starvation_percentage }
								multiply_temp_variable = { pops_starvation_death_amount_temp = percentage_applied_temp }
								add_to_variable = { pops_other_death_amount = pops_starvation_death_amount_temp }
							}
						}

						set_variable = { pops_net_change_amount = pops_natural_birth_amount }
						subtract_from_variable = { pops_net_change_amount = pops_natural_death_amount }
						subtract_from_variable = { pops_net_change_amount = pops_accidents_death_amount }
						subtract_from_variable = { pops_net_change_amount = pops_crime_death_amount }
						subtract_from_variable = { pops_net_change_amount = pops_other_death_amount }

						add_to_variable = { pops_amount = pops_net_change_amount }
					#

					#Pop Promotions/Demotions
						set_variable = { rgo_promotion_demotion_change = 0 }
						set_variable = { artisans_promotion_demotion_change = 0 }
						set_variable = { craftsmen_promotion_demotion_change = 0 }
						set_variable = { specialists_promotion_demotion_change = 0 }
						set_variable = { clerks_promotion_demotion_change = 0 }
						set_variable = { professionals_promotion_demotion_change = 0 }
						set_variable = { soldiers_promotion_demotion_change = 0 }
						set_variable = { officers_promotion_demotion_change = 0 }
						set_variable = { capitalists_promotion_demotion_change = 0 }
						set_variable = { aristocrats_promotion_demotion_change = 0 }

						if = {
							limit = {
								check_variable = { factory_employment_amount < factory_employment_amount_max }
								check_variable = { craftsmen_percentage < 100 }
								check_variable = { rgos_percentage > 0 }
							}
							#RGOs Promote into Craftsmen
							add_to_variable = { rgo_promotion_demotion_change = -0.01 }
							add_to_variable = { rgos_percentage = -0.01 }
							add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
							add_to_variable = { craftsmen_percentage = 0.01 }

							set_temp_variable = { factory_employment_temp = factory_employment_amount_max }
							multiply_temp_variable = { factory_employment_temp = 0.9 }
							if = {
								limit = {
									check_variable = { factory_employment_amount < factory_employment_temp }
									check_variable = { craftsmen_percentage < 100 }
									check_variable = { rgos_percentage > 0 }
								}
								#RGOs Promote into Craftsmen
								add_to_variable = { rgo_promotion_demotion_change = -0.01 }
								add_to_variable = { rgos_percentage = -0.01 }
								add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
								add_to_variable = { craftsmen_percentage = 0.01 }

								set_temp_variable = { factory_employment_temp = factory_employment_amount_max }
								multiply_temp_variable = { factory_employment_temp = 0.9 }
								if = {
									limit = {
										check_variable = { factory_employment_amount < factory_employment_temp }
										check_variable = { craftsmen_percentage < 100 }
										check_variable = { rgos_percentage > 0 }
									}
									#RGOs Promote into Craftsmen
									add_to_variable = { rgo_promotion_demotion_change = -0.01 }
									add_to_variable = { rgos_percentage = -0.01 }
									add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
									add_to_variable = { craftsmen_percentage = 0.01 }

									set_temp_variable = { factory_employment_temp = factory_employment_amount_max }
									multiply_temp_variable = { factory_employment_temp = 0.9 }
									if = {
										limit = {
											check_variable = { factory_employment_amount < factory_employment_temp }
											check_variable = { craftsmen_percentage < 100 }
											check_variable = { rgos_percentage > 0 }
										}
										#RGOs Promote into Craftsmen
										add_to_variable = { rgo_promotion_demotion_change = -0.01 }
										add_to_variable = { rgos_percentage = -0.01 }
										add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
										add_to_variable = { craftsmen_percentage = 0.01 }
									}
								}
							}
						}
						if = {
							limit = {
								check_variable = { craftsmen_unemployment_percentage > 0  }
								check_variable = { rgos_percentage < 100 }
								check_variable = { craftsmen_percentage > 0 }
							}
							#Craftsmen Demote into RGOs
							add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
							add_to_variable = { craftsmen_percentage = -0.01 }
							add_to_variable = { rgo_promotion_demotion_change = 0.01 }
							add_to_variable = { rgos_percentage = 0.01 }
							if = {
								limit = {
									check_variable = { craftsmen_unemployment_percentage > 5  }
									check_variable = { rgos_percentage < 100 }
									check_variable = { craftsmen_percentage > 0 }
								}
								#Craftsmen Demote into RGOs
								add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
								add_to_variable = { craftsmen_percentage = -0.01 }
								add_to_variable = { rgo_promotion_demotion_change = 0.01 }
								add_to_variable = { rgos_percentage = 0.01 }
								if = {
									limit = {
										check_variable = { craftsmen_unemployment_percentage > 10  }
										check_variable = { rgos_percentage < 100 }
										check_variable = { craftsmen_percentage > 0 }
									}
									#Craftsmen Demote into RGOs
									add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
									add_to_variable = { craftsmen_percentage = -0.01 }
									add_to_variable = { rgo_promotion_demotion_change = 0.01 }
									add_to_variable = { rgos_percentage = 0.01 }
								}
							}
						}

						set_variable = { rgos_earnings_per_capita = rgos_earnings }
						divide_variable = { rgos_earnings_per_capita = rgos_workforce_amount }

						set_variable = { craftsmen_earnings_per_capita = craftsmen_earnings }
						divide_variable = { craftsmen_earnings_per_capita = craftsmen_workforce_amount }

						set_temp_variable = { craftsmen_earnings_per_capita_temp = craftsmen_earnings_per_capita }
						multiply_temp_variable = { craftsmen_earnings_per_capita_temp = 1.5 }
						if = {
							limit = {
								check_variable = { craftsmen_earnings_per_capita_temp > rgos_earnings_per_capita }
								check_variable = { craftsmen_percentage < 100 }
								check_variable = { rgos_percentage > 0 }
							}
							#RGOs Promote into Craftsmen
							add_to_variable = { rgo_promotion_demotion_change = -0.01 }
							add_to_variable = { rgos_percentage = -0.01 }
							add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
							add_to_variable = { craftsmen_percentage = 0.01 }

							multiply_temp_variable = { craftsmen_earnings_per_capita_temp = 1.25 }
							if = {
								limit = {
									check_variable = { craftsmen_earnings_per_capita_temp > rgos_earnings_per_capita }
									check_variable = { craftsmen_percentage < 100 }
									check_variable = { rgos_percentage > 0 }
								}
								#RGOs Promote into Craftsmen
								add_to_variable = { rgo_promotion_demotion_change = -0.01 }
								add_to_variable = { rgos_percentage = -0.01 }
								add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
								add_to_variable = { craftsmen_percentage = 0.01 }

								multiply_temp_variable = { craftsmen_earnings_per_capita_temp = 1.25 }
								if = {
									limit = {
										check_variable = { craftsmen_earnings_per_capita_temp > rgos_earnings_per_capita }
										check_variable = { craftsmen_percentage < 100 }
										check_variable = { rgos_percentage > 0 }
									}
									#RGOs Promote into Craftsmen
									add_to_variable = { rgo_promotion_demotion_change = -0.01 }
									add_to_variable = { rgos_percentage = -0.01 }
									add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
									add_to_variable = { craftsmen_percentage = 0.01 }

									multiply_temp_variable = { craftsmen_earnings_per_capita_temp = 1.25 }
									if = {
										limit = {
											check_variable = { craftsmen_earnings_per_capita_temp > rgos_earnings_per_capita }
											check_variable = { craftsmen_percentage < 100 }
											check_variable = { rgos_percentage > 0 }
										}
										#RGOs Promote into Craftsmen
										add_to_variable = { rgo_promotion_demotion_change = -0.01 }
										add_to_variable = { rgos_percentage = -0.01 }
										add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
										add_to_variable = { craftsmen_percentage = 0.01 }
									}
								}
							}
						}
						if = {
							limit = {
								check_variable = { rgos_earnings_per_capita > craftsmen_earnings_per_capita }
								check_variable = { rgos_percentage < 100 }
								check_variable = { craftsmen_percentage > 0 }
							}
							#Craftsmen Demote into RGOs
							add_to_variable = { rgo_promotion_demotion_change = 0.01 }
							add_to_variable = { rgos_percentage = 0.01 }
							add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
							add_to_variable = { craftsmen_percentage = -0.01 }

							set_temp_variable = { rgos_earnings_per_capita_temp = rgos_earnings_per_capita }
							multiply_temp_variable = { rgos_earnings_per_capita_temp = 1.25 }
							if = {
								limit = {
									check_variable = { rgos_earnings_per_capita_temp > craftsmen_earnings_per_capita }
									check_variable = { rgos_percentage < 100 }
									check_variable = { craftsmen_percentage > 0 }
								}
								#Craftsmen Demote into RGOs
								add_to_variable = { rgo_promotion_demotion_change = 0.01 }
								add_to_variable = { rgos_percentage = 0.01 }
								add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
								add_to_variable = { craftsmen_percentage = -0.01 }
							}
						}
					#
				#
			}

			#National Bank
				national_bank_update = yes
			#

			set_variable = { private_factory_amount = 0 }
			set_variable = { pops_goods_spending = 0 }
			every_controlled_state = {
				calculate_base_price = yes
				calculate_price = yes
				pops_update = yes
				factories_update = yes
				pops_update = yes
				factories_update = yes

				#Construction

					#Continue Construction
					#Everyday
						if = {
							limit = {
								has_state_flag = factory_everyday_goods_in_construction
								check_variable = { pops_savings > 100 }
							}
							set_temp_variable = { investment_money_temp = pops_savings }
							subtract_from_temp_variable = { investment_money_temp = 100 }
							
							set_temp_variable = { investment_money_max_temp = factory_everyday_goods_construction_industrial_goods_need }
							multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
							multiply_temp_variable = { investment_money_max_temp = 1.5 }
							subtract_from_temp_variable = { investment_money_max_temp = factory_everyday_goods_construction_investment_money }
							add_to_temp_variable = { investment_money_max_temp = 1 }

							if = {
								limit = {
									check_variable = { investment_money_temp > investment_money_max_temp }
								}
								set_temp_variable = { investment_money_temp = investment_money_max_temp }
							}
							subtract_from_variable = { pops_savings = investment_money_temp }
							add_to_variable = { factory_everyday_goods_construction_investment_money = investment_money_temp }
						}
					#
					#Luxury
						if = {
							limit = {
								has_state_flag = factory_luxury_goods_in_construction
								check_variable = { pops_savings > 100 }
							}
							set_temp_variable = { investment_money_temp = pops_savings }
							subtract_from_temp_variable = { investment_money_temp = 100 }
							
							set_temp_variable = { investment_money_max_temp = factory_luxury_goods_construction_industrial_goods_need }
							multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
							multiply_temp_variable = { investment_money_max_temp = 1.5 }
							subtract_from_temp_variable = { investment_money_max_temp = factory_luxury_goods_construction_investment_money }
							add_to_temp_variable = { investment_money_max_temp = 1 }

							if = {
								limit = {
									check_variable = { investment_money_temp > investment_money_max_temp }
								}
								set_temp_variable = { investment_money_temp = investment_money_max_temp }
							}
							subtract_from_variable = { pops_savings = investment_money_temp }
							add_to_variable = { factory_luxury_goods_construction_investment_money = investment_money_temp }
						}
					#
					#Industrial
						if = {
							limit = {
								has_state_flag = factory_industrial_goods_in_construction
								check_variable = { pops_savings > 100 }
							}
							set_temp_variable = { investment_money_temp = pops_savings }
							subtract_from_temp_variable = { investment_money_temp = 100 }
							
							set_temp_variable = { investment_money_max_temp = factory_industrial_goods_construction_industrial_goods_need }
							multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
							multiply_temp_variable = { investment_money_max_temp = 1.5 }
							subtract_from_temp_variable = { investment_money_max_temp = factory_industrial_goods_construction_investment_money }
							add_to_temp_variable = { investment_money_max_temp = 1 }

							if = {
								limit = {
									check_variable = { investment_money_temp > investment_money_max_temp }
								}
								set_temp_variable = { investment_money_temp = investment_money_max_temp }
							}
							subtract_from_variable = { pops_savings = investment_money_temp }
							add_to_variable = { factory_industrial_goods_construction_investment_money = investment_money_temp }
						}
					#

					end_everyday_goods_factory_construction = yes
					end_luxury_goods_factory_construction = yes
					end_industrial_goods_factory_construction = yes

					end_infrastructure_construction = yes
				#

				#Resolve Infra Crumbling
					if = {
						limit = {
							check_variable = { infrastructure_level > 0 }
							check_variable = { infrastructure_industrial_goods_fulfilled_percentage < global.infrastructure_crumbling_threshold }
						}
						add_to_variable = { infrastructure_crumbling_ticks = 1 }
						if = {
							limit = {
								NOT = { check_variable = { infrastructure_crumbling_ticks < global.infrastructure_crumbling_ticks_bar } } 
							}
							remove_building  = {
								type = infrastructure
								level = 1
							}
							set_variable = { infrastructure_crumbling_ticks = 0 }
						}
					}
					else = {
						subtract_from_variable = { infrastructure_crumbling_ticks = 1 }
						if = {
							limit = {
								check_variable = { infrastructure_crumbling_ticks < 0 }
							}
							set_variable = { infrastructure_crumbling_ticks = 0 }
						}
					}
				#

				#Infra Modifiers
					set_temp_variable = { efficiency_effect_temp = infrastructure_efficiency_effect }
					add_to_temp_variable = { efficiency_effect_temp = 1 }

					set_temp_variable = { infra_maintenance_fulfilled_temp = infrastructure_industrial_goods_fulfilled_percentage }
					add_to_temp_variable = { infra_maintenance_fulfilled_temp = 1 }
					divide_temp_variable = { infra_maintenance_fulfilled_temp = 2 }

					set_variable = { infrastructure_rgo_output_modifier = infrastructure_level }
					multiply_variable = { infrastructure_rgo_output_modifier = global.infrastructure_rgo_output_modifier }
					multiply_variable = { infrastructure_rgo_output_modifier = infra_maintenance_fulfilled_temp }
					multiply_variable = { infrastructure_rgo_output_modifier = infrastructure_efficiency_effect }

					set_variable = { infrastructure_factory_throughput_modifier = infrastructure_level }
					multiply_variable = { infrastructure_factory_throughput_modifier = global.infrastructure_factory_throughput_modifier }
					multiply_variable = { infrastructure_factory_throughput_modifier = infra_maintenance_fulfilled_temp }
					multiply_variable = { infrastructure_factory_throughput_modifier = infrastructure_efficiency_effect }

					set_variable = { infrastructure_build_cost_modifier = infrastructure_level }
					multiply_variable = { infrastructure_build_cost_modifier = global.infrastructure_build_cost_modifier }
					multiply_variable = { infrastructure_build_cost_modifier = infra_maintenance_fulfilled_temp }
					multiply_variable = { infrastructure_build_cost_modifier = infrastructure_efficiency_effect }

					set_variable = { infrastructure_transport_cost_modifier = 1 }
					add_to_variable = { infrastructure_transport_cost_modifier = PREV.modifier@transport_cost_modifier }
					set_variable = { infrastructure_transport_cost_multiplier_per_level = global.infrastructure_transport_cost_multiplier }
					subtract_from_variable = { infrastructure_transport_cost_multiplier_per_level = 1 }
					multiply_variable = { infrastructure_transport_cost_multiplier_per_level = infrastructure_efficiency_effect }
					add_to_variable = { infrastructure_transport_cost_multiplier_per_level = global.infrastructure_transport_cost_multiplier }
					for_loop_effect = {
						start = 0
						end = infrastructure_level
						multiply_variable = { infrastructure_transport_cost_modifier = infrastructure_transport_cost_multiplier_per_level }
					}
					subtract_from_variable = { infrastructure_transport_cost_modifier = 1 }
					multiply_variable = { infrastructure_transport_cost_modifier = infra_maintenance_fulfilled_temp }

				#

				#Mechanization & Mech Modifiers
					set_temp_variable = { needs_fulfilled_temp = pops_rgos_mechanization_expansion_industrial_goods_fulfillment }
					divide_temp_variable = { needs_fulfilled_temp = pops_rgos_mechanization_expansion_industrial_goods_need }
					set_temp_variable = { rgo_mech_temp = rgos_mechanization_percentage }
					add_to_temp_variable = { rgo_mech_temp = needs_fulfilled_temp }

					if = {
						limit = {
							has_state_flag = pops_rgos_valuable_goods_flag
						}
						set_variable = { rgos_max_mechanization_percentage = valuable_goods_rgos_max_mechanization }
					}
					else_if = {
						limit = {
							has_state_flag = pops_rgos_raw_goods_flag
						}
						set_variable = { rgos_max_mechanization_percentage = raw_goods_rgos_max_mechanization }
					}
					else = {
						set_variable = { rgos_max_mechanization_percentage = life_goods_rgos_max_mechanization }
					}
					multiply_variable = { rgos_max_mechanization_percentage = 100 }
					clamp_temp_variable = {
						var = rgo_mech_temp
						min = 0
						max = rgos_max_mechanization_percentage
					}
					if = {
						limit = {
							check_variable = { rgo_mech_temp > rgos_mechanization_percentage }
						}
						set_variable = { rgos_mechanization_percentage = rgo_mech_temp }
					}

					set_temp_variable = { rgos_mechanization_maintenance_fulfilled_temp = pops_rgos_mechanization_industrial_goods_fulfilled_percentage }
					add_to_temp_variable = { rgos_mechanization_maintenance_fulfilled_temp = 1 }
					divide_temp_variable = { rgos_mechanization_maintenance_fulfilled_temp = 2 }

					set_temp_variable = { effective_mech_temp = rgos_mechanization_percentage }
					multiply_temp_variable = { effective_mech_temp = pops_rgos_mechanization_industrial_goods_fulfilled_percentage }

					set_temp_variable = { rgo_mechanization_inverse_temp = 100 }
					subtract_from_temp_variable = { rgo_mechanization_inverse_temp = effective_mech_temp }
					
					#RGO Max Size
					set_variable = { rgos_mechanization_rgo_max_size_multiplier = global.pops_rgos_mechanization_rgo_size_multiplier }
					multiply_variable = { rgos_mechanization_rgo_max_size_multiplier = effective_mech_temp }
					add_to_variable = { rgos_mechanization_rgo_max_size_multiplier = rgo_mechanization_inverse_temp }
					divide_variable = { rgos_mechanization_rgo_max_size_multiplier = 100 }

					#RGO Output
					set_variable = { rgos_mechanization_rgo_output_multiplier = global.pops_rgos_mechanization_rgo_output_multiplier }
					multiply_variable = { rgos_mechanization_rgo_output_multiplier = effective_mech_temp }
					add_to_variable = { rgos_mechanization_rgo_output_multiplier = rgo_mechanization_inverse_temp }
					divide_variable = { rgos_mechanization_rgo_output_multiplier = 100 }
				#

				#Valuable Goods Decay
					if = {
						limit = {
							has_state_flag = pops_rgos_valuable_goods_flag
						}
						subtract_from_variable = { pops_rgos_valuable_goods_decay = 1 }
						if = {
							limit = {
								check_variable = { pops_rgos_valuable_goods_decay < 0 }
							}
							if = {
								limit = {
									has_state_flag = pops_rgos_valuable_goods_untapped_flag
								}
								set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_plentiful_decay_max }
								clr_state_flag = pops_rgos_valuable_goods_untapped_flag
								set_state_flag = pops_rgos_valuable_goods_plentiful_flag
							}
							else_if = {
								limit = {
									has_state_flag = pops_rgos_valuable_goods_plentiful_flag
								}
								set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_exploited_decay_max }
								clr_state_flag = pops_rgos_valuable_goods_plentiful_flag
							}
							else_if = {
								limit = {
									has_state_flag = pops_rgos_valuable_goods_depleted_flag
								}
								clear_variable = pops_rgos_valuable_goods_decay
								clr_state_flag = pops_rgos_valuable_goods_depleted_flag
								clr_state_flag = pops_rgos_valuable_goods_flag
							}
							else = {
								set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_depleted_decay_max }
								set_state_flag = pops_rgos_valuable_goods_depleted_flag
							}
						}
					}
				#

				#Adding Per Month Stats
					#Pop Needs Fulfilled
						add_to_array = { pops_life_goods_fulfilled_array = pops_life_goods_fulfilled_percentage }
						if = {
							limit = {
								check_variable = { pops_life_goods_fulfilled_array^num > 12 }
							}
							remove_from_array = { array = pops_life_goods_fulfilled_array index = 0 }
						}
						add_to_array = { pops_everyday_goods_fulfilled_array = pops_everyday_goods_fulfilled_percentage }
						if = {
							limit = {
								check_variable = { pops_everyday_goods_fulfilled_array^num > 12 }
							}
							remove_from_array = { array = pops_everyday_goods_fulfilled_array index = 0 }
						}
						add_to_array = { pops_luxury_goods_fulfilled_array = pops_luxury_goods_fulfilled_percentage }
						if = {
							limit = {
								check_variable = { pops_luxury_goods_fulfilled_array^num > 12 }
							}
							remove_from_array = { array = pops_luxury_goods_fulfilled_array index = 0 }
						}
					#

					#Factory Earnings/Spending
						add_to_array = { factory_everyday_goods_earnings_array = factory_everyday_goods_earnings }
						if = {
							limit = {
								check_variable = { factory_everyday_goods_earnings_array^num > 12 }
							}
							remove_from_array = { array = factory_everyday_goods_earnings_array index = 0 }
						}
						add_to_array = { factory_everyday_goods_spending_array = factory_everyday_goods_spending }
						if = {
							limit = {
								check_variable = { factory_everyday_goods_spending_array^num > 12 }
							}
							remove_from_array = { array = factory_everyday_goods_spending_array index = 0 }
						}
						
						add_to_array = { factory_luxury_goods_earnings_array = factory_luxury_goods_earnings }
						if = {
							limit = {
								check_variable = { factory_luxury_goods_earnings_array^num > 12 }
							}
							remove_from_array = { array = factory_luxury_goods_earnings_array index = 0 }
						}
						add_to_array = { factory_luxury_goods_spending_array = factory_luxury_goods_spending }
						if = {
							limit = {
								check_variable = { factory_luxury_goods_spending_array^num > 12 }
							}
							remove_from_array = { array = factory_luxury_goods_spending_array index = 0 }
						}
						
						add_to_array = { factory_industrial_goods_earnings_array = factory_industrial_goods_earnings }
						if = {
							limit = {
								check_variable = { factory_industrial_goods_earnings_array^num > 12 }
							}
							remove_from_array = { array = factory_industrial_goods_earnings_array index = 0 }
						}
						add_to_array = { factory_industrial_goods_spending_array = factory_industrial_goods_spending }
						if = {
							limit = {
								check_variable = { factory_industrial_goods_spending_array^num > 12 }
							}
							remove_from_array = { array = factory_industrial_goods_spending_array index = 0 }
						}
					#

					#Money Supply
						set_variable = { total_money = pops_money }
						add_to_variable = { total_money = infrastructure_money }
						add_to_variable = { total_money = factory_everyday_goods_money }
						add_to_variable = { total_money = factory_luxury_goods_money }
						add_to_variable = { total_money = factory_industrial_goods_money }
						add_to_variable = { total_money = pops_earnings }
						add_to_variable = { total_money = pops_savings }
						add_to_variable = { total_money = factory_everyday_goods_construction_investment_money }
						add_to_variable = { total_money = factory_luxury_goods_construction_investment_money }
						add_to_variable = { total_money = factory_industrial_goods_construction_investment_money }
						add_to_variable = { total_money = infrastructure_construction_investment_money }
						add_to_variable = { PREV.total_money = total_money }

						set_variable = { money_supply = total_money }
					#

					#Price of Goods Index
						set_temp_variable = { total_needs_temp = life_goods_need }
						add_to_temp_variable = { total_needs_temp = everyday_goods_need }
						add_to_temp_variable = { total_needs_temp = luxury_goods_need }
						add_to_temp_variable = { total_needs_temp = services_need }
						add_to_temp_variable = { total_needs_temp = raw_goods_need }
						add_to_temp_variable = { total_needs_temp = industrial_goods_need }

						set_temp_variable = { life_goods_inflation_temp = life_goods_price }
						multiply_temp_variable = { life_goods_inflation_temp = life_goods_need }

						set_temp_variable = { everyday_goods_inflation_temp = everyday_goods_price }
						multiply_temp_variable = { everyday_goods_inflation_temp = everyday_goods_need }

						set_temp_variable = { luxury_goods_inflation_temp = luxury_goods_price }
						multiply_temp_variable = { luxury_goods_inflation_temp = luxury_goods_need }

						set_temp_variable = { services_inflation_temp = services_price }
						multiply_temp_variable = { services_inflation_temp = services_need }

						set_temp_variable = { raw_goods_inflation_temp = raw_goods_price }
						multiply_temp_variable = { raw_goods_inflation_temp = raw_goods_need }

						set_temp_variable = { industrial_goods_inflation_temp = industrial_goods_price }
						multiply_temp_variable = { industrial_goods_inflation_temp = industrial_goods_need }

						set_variable = { price_of_goods_index = life_goods_inflation_temp }
						add_to_variable = { price_of_goods_index = everyday_goods_inflation_temp }
						add_to_variable = { price_of_goods_index = luxury_goods_inflation_temp }
						add_to_variable = { price_of_goods_index = services_inflation_temp }
						add_to_variable = { price_of_goods_index = raw_goods_inflation_temp }
						add_to_variable = { price_of_goods_index = industrial_goods_inflation_temp }
						divide_variable = { price_of_goods_index = total_needs_temp }

						if = {
							limit = {
								check_variable = { price_of_goods_index < 0 }
							}
							set_variable = { price_of_goods_index = 0 }
						}

						add_to_array = { price_of_goods_index_array = price_of_goods_index }
						if = {
							limit = {
								check_variable = { price_of_goods_index_array^num > 24 }
							}
							remove_from_array = { array = price_of_goods_index_array index = 0 }
						}
						set_temp_variable = { price_of_goods_index_temp = 0 }
						set_temp_variable = { previous_price_of_goods_index_temp = 0 }
						for_each_loop = {
							array = price_of_goods_index_array
							value = vv
							index = ii
							if = {
								limit = {
									check_variable = { ii < 12 }
								}
								add_to_temp_variable = { previous_price_of_goods_index_temp = vv }
							}
							else = {
								add_to_temp_variable = { price_of_goods_index_temp = vv }
							}
						}
					#
					set_variable = { annual_inflation = price_of_goods_index_temp }
					multiply_variable = { annual_inflation = 100 }
					divide_variable = { annual_inflation = previous_price_of_goods_index_temp }
					subtract_from_variable = { annual_inflation = 100 }
					

					add_to_variable = { PREV.private_factory_amount = private_factory_amount }
					
					#GDP
						#This month's GDP
						set_variable = { gdp_amount = 0 }
						
						set_temp_variable = { gdp_value_temp = life_goods_produced_amount }
						multiply_temp_variable = { gdp_value_temp = life_goods_price }
						add_to_variable = { gdp_amount = gdp_value_temp }
						
						set_temp_variable = { gdp_value_temp = everyday_goods_produced_amount }
						multiply_temp_variable = { gdp_value_temp = everyday_goods_price }
						add_to_variable = { gdp_amount = gdp_value_temp }
						
						set_temp_variable = { gdp_value_temp = luxury_goods_produced_amount }
						multiply_temp_variable = { gdp_value_temp = luxury_goods_price }
						add_to_variable = { gdp_amount = gdp_value_temp }
						
						set_temp_variable = { gdp_value_temp = services_produced_amount }
						multiply_temp_variable = { gdp_value_temp = services_price }
						add_to_variable = { gdp_amount = gdp_value_temp }
						
						set_temp_variable = { gdp_value_temp = raw_goods_produced_amount }
						multiply_temp_variable = { gdp_value_temp = raw_goods_price }
						add_to_variable = { gdp_amount = gdp_value_temp }
						
						set_temp_variable = { gdp_value_temp = industrial_goods_produced_amount }
						multiply_temp_variable = { gdp_value_temp = industrial_goods_price }
						add_to_variable = { gdp_amount = gdp_value_temp }

						add_to_variable = { gdp_amount = pops_rgos_valuable_goods_production }

						divide_variable = { gdp_amount = price_of_goods_index }
						add_to_variable = { PREV.gdp_amount = gdp_amount }

						
						add_to_array = { 
							array = gdp_amount_array
							value = gdp_amount
							index = 0
						}
						if = {
							limit = {
								check_variable = { gdp_amount_array^num > 37 }
							}
							remove_from_array = { array = gdp_amount_array }
						}
					
						set_variable = { gdp_amount_this_year = 0 }
						set_temp_variable = { this_year_months_temp = 0 }
						set_variable = { gdp_amount_last_year = 0 }
						set_temp_variable = { last_year_months_temp = 0 }
						for_each_loop = {
							array = gdp_amount_array
							value = vv
							index = ii
							if = {
								limit = {
									check_variable = { ii < 12 }
								}
								add_to_variable = { gdp_amount_this_year = vv }
								add_to_temp_variable = { this_year_months_temp = 1 }
							}
							else_if = {
								limit = {
									check_variable = { ii < 24 }
								}
								add_to_variable = { gdp_amount_last_year = vv }
								add_to_temp_variable = { last_year_months_temp = 1 }
							}
						}
						divide_variable = { gdp_amount_this_year = this_year_months_temp }
						divide_variable = { gdp_amount_last_year = last_year_months_temp }
						add_to_variable = { PREV.gdp_amount_this_year = gdp_amount_this_year }
						add_to_variable = { PREV.gdp_amount_last_year = gdp_amount_last_year }

						set_variable = { annual_gdp_amount = gdp_amount_this_year }
						multiply_variable = { annual_gdp_amount = 12 }

						set_variable = { annual_gdp_growth = gdp_amount_this_year }
						multiply_variable = { annual_gdp_growth = 100 }
						divide_variable = { annual_gdp_growth = gdp_amount_last_year }
						subtract_from_variable = { annual_gdp_growth = 100 }

						add_to_array = { annual_gdp_amount_array = annual_gdp_amount }
						if = {
							limit = {
								check_variable = { annual_gdp_amount_array^num > 37 }
							}
							remove_from_array = { array = annual_gdp_amount_array index = 0 }
						}
						add_to_variable = { PREV.annual_gdp_amount = annual_gdp_amount }

						set_variable = { gdp_per_capita = annual_gdp_amount }
						set_temp_variable = { pops_amount_temp = pops_amount }
						add_to_temp_variable = { pops_amount_temp = 4 }
						divide_variable = { gdp_per_capita = pops_amount_temp }
					#

					#Industrial Power
						set_variable = { industrial_power = 0 }

						set_temp_variable = { everyday_goods_industrial_power = factory_everyday_goods_production }
						divide_temp_variable = { everyday_goods_industrial_power = global.factory_everyday_goods_base_production }
						set_temp_variable = { luxury_goods_industrial_power = factory_luxury_goods_production }
						divide_temp_variable = { luxury_goods_industrial_power = global.factory_luxury_goods_base_production }
						set_temp_variable = { industrial_goods_industrial_power = factory_industrial_goods_production }
						divide_temp_variable = { industrial_goods_industrial_power = global.factory_industrial_goods_base_production }

						add_to_variable = { industrial_power = everyday_goods_industrial_power }
						add_to_variable = { industrial_power = luxury_goods_industrial_power }
						add_to_variable = { industrial_power = industrial_goods_industrial_power }

						add_to_variable = { PREV.industrial_power = industrial_power }
					#

					#Goods Spending
						#Bought
						add_to_variable = { PREV.life_goods_bought_amount = life_goods_bought_amount }
						add_to_variable = { PREV.life_goods_bought_value = life_goods_bought_value }

						add_to_variable = { PREV.everyday_goods_bought_amount = everyday_goods_bought_amount }
						add_to_variable = { PREV.everyday_goods_bought_value = everyday_goods_bought_value }
						
						add_to_variable = { PREV.luxury_goods_bought_amount = luxury_goods_bought_amount }
						add_to_variable = { PREV.luxury_goods_bought_value = luxury_goods_bought_value }
						
						add_to_variable = { PREV.services_bought_amount = services_bought_amount }
						add_to_variable = { PREV.services_bought_value = services_bought_value }
						
						add_to_variable = { PREV.raw_goods_bought_amount = raw_goods_bought_amount }
						add_to_variable = { PREV.raw_goods_bought_value = raw_goods_bought_value }
						
						add_to_variable = { PREV.industrial_goods_bought_amount = industrial_goods_bought_amount }
						add_to_variable = { PREV.industrial_goods_bought_value = industrial_goods_bought_value }

						#Sold
						add_to_variable = { PREV.life_goods_sold_amount = life_goods_sold_amount }
						add_to_variable = { PREV.life_goods_sold_value = life_goods_sold_value }

						add_to_variable = { PREV.everyday_goods_sold_amount = everyday_goods_sold_amount }
						add_to_variable = { PREV.everyday_goods_sold_value = everyday_goods_sold_value }
						
						add_to_variable = { PREV.luxury_goods_sold_amount = luxury_goods_sold_amount }
						add_to_variable = { PREV.luxury_goods_sold_value = luxury_goods_sold_value }
						
						add_to_variable = { PREV.services_sold_amount = services_sold_amount }
						add_to_variable = { PREV.services_sold_value = services_sold_value }
						
						add_to_variable = { PREV.raw_goods_sold_amount = raw_goods_sold_amount }
						add_to_variable = { PREV.raw_goods_sold_value = raw_goods_sold_value }
						
						add_to_variable = { PREV.industrial_goods_sold_amount = industrial_goods_sold_amount }
						add_to_variable = { PREV.industrial_goods_sold_value = industrial_goods_sold_value }
					#

					#Pop Spending
					add_to_variable = { pops_spending = pops_goods_spending }
					add_to_variable = { PREV.pops_goods_spending = pops_goods_spending }
				#
			}
			set_variable = { national_bank_interest_gain = 0 }
		}


		for_each_scope_loop = {
			array = global.econ_order_array
			#Government Debt
				#How much money can you borrow?
				set_temp_variable = { borrow_limit_temp = national_bank_amount_left_k }
				
				#DOMESTIC INTEREST
				set_variable = { national_debt_domestic_interest = debt_to_national_bank }
				divide_variable = { national_debt_domestic_interest = 100 } #100x as upcoming rate is a % which goes from 0.0 to 100.0
				#Ability to pay AKA Credit Rating
				set_variable = { credit_rating_interest = global.credit_rating_AAA_base_interest_rate } #TODO

				set_temp_variable = { interest_temp = credit_rating_interest }

				#Expensiveness of debt due to scarcity
				add_to_temp_variable = { interest_temp = national_bank_interest_from_scarcity }

				multiply_variable = { national_debt_domestic_interest = interest_temp }
				divide_variable = { national_debt_domestic_interest = 12 } #12x for monthly rate instead of yearly.

				set_variable = { national_debt_foreign_interest = 0 }
				#FOREIGN INTEREST
				for_each_loop = {
					array = debt_to_bank_country
					value = cc
					index = ii
					

					if = {
						limit = {
							NOT = { tag = cc }
						}
						set_temp_variable = { interest_temp = debt_to_bank_interest_rate^ii }
						divide_temp_variable = { interest_temp = 100 }
						multiply_temp_variable = { interest_temp = debt_to_bank_amount^ii }
						divide_temp_variable = { interest_temp = 12 }
						add_to_variable = { cc:national_bank_interest_gain = interest_temp }
						add_to_variable = { national_debt_foreign_interest = interest_temp }
					}
				}


				set_variable = { national_debt_interest = national_debt_domestic_interest }
				add_to_variable = { national_debt_interest = national_debt_foreign_interest }
				subtract_from_variable = { treasury = national_debt_interest }

				#BORROWING
				if = {
					limit = {
						check_variable = { treasury < 0 }
					}

					set_temp_variable = { borrow_money_temp = treasury }
					multiply_temp_variable = { borrow_money_temp = -1 }
					add_to_temp_variable = { borrow_money_temp = 1 }

					set_temp_variable = { country_temp = 0 }

					borrow_money = yes

					if = {
						limit = {
							check_variable = { treasury < 0 }
						}
						#Bankruptcy
					}
				}
			#
			national_debt_update = yes
		}

		#Global Bank
			clear_array = global.global_bank_countries #Sorted by international interest rate
			clear_array = global.global_bank_interest_rate #Sorted by international interest rate

			for_each_scope_loop = {
				array = global.econ_order_array
				#Loops through the global econ array and adds countries to the global bank array, sorting by international interest rate

				if = {
					limit = {
						check_variable = { national_bank_amount_left_k > 10 }
					}
					set_temp_variable = { bb = 0 }
					for_each_loop = {
						array = global.global_bank_countries
						index = ii
						value = country_temp
						break = bb

						if = {
							limit = {
								check_variable = { global.global_bank_interest_rate^ii > national_bank_international_interest_rate }
							}
							add_to_array = { 
								array = global.global_bank_countries 
								value = THIS
								index = ii
							}
							add_to_array = {  
								array = global.global_bank_interest_rate 
								value = national_bank_international_interest_rate
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}

					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.global_bank_countries = THIS }
						add_to_array = { global.global_bank_interest_rate = national_bank_international_interest_rate }
					}
				}
			}

		#

		for_each_scope_loop = {
			array = global.econ_order_array

			#National Bank Total Interest
				add_to_variable = { national_bank_interest_gain = national_debt_domestic_interest }
				add_to_variable = { national_bank_money = national_bank_interest_gain }
			#

			#Country Level Stats
				set_variable = { total_factory_amount = num_of_civilian_factories }
				add_to_variable = { total_factory_amount = num_of_military_factories }
				add_to_variable = { total_factory_amount = num_of_naval_factories }
				add_to_variable = { total_factory_amount = private_factory_amount }

				## Goods ##

				#Military Goods Fulfillment
					set_variable = { government_military_goods_percent = 0 }

					set_temp_variable = { gmg = life_goods_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = life_goods_government_demand }
					multiply_temp_variable = { gmg = military_life_goods_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { gmg = everyday_goods_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = everyday_goods_government_demand }
					multiply_temp_variable = { gmg = military_everyday_goods_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { gmg = luxury_goods_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = luxury_goods_government_demand }
					multiply_temp_variable = { gmg = military_luxury_goods_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { gmg = services_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = services_government_demand }
					multiply_temp_variable = { gmg = military_services_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { gmg = raw_goods_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = raw_goods_government_demand }
					multiply_temp_variable = { gmg = military_raw_goods_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { gmg = industrial_goods_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = industrial_goods_government_demand }
					multiply_temp_variable = { gmg = military_industrial_goods_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { tgmgn = military_life_goods_need }
					add_to_temp_variable = { tgmgn = military_everyday_goods_need }
					add_to_temp_variable = { tgmgn = military_luxury_goods_need }
					add_to_temp_variable = { tgmgn = military_services_need }
					add_to_temp_variable = { tgmgn = military_raw_goods_need }
					add_to_temp_variable = { tgmgn = military_industrial_goods_need }

					divide_variable = { government_military_goods_percent = tgmgn }
					round_variable = government_military_goods_percent

				#

				#Projects
					proj_update = yes
					for_each_loop = {
						array = proj_id
						index = pi
						value = pv
						break = pb

						set_temp_variable = { gmg = life_goods_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = life_goods_government_demand }
						multiply_temp_variable = { gmg = proj_life_goods_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_life_goods_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_life_goods_fulfilled^pi > proj_life_goods_need^pi }
							}
							set_variable = { proj_life_goods_fulfilled^pi = proj_life_goods_need^pi }
						}
						
						set_temp_variable = { gmg = everyday_goods_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = everyday_goods_government_demand }
						multiply_temp_variable = { gmg = proj_everyday_goods_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_everyday_goods_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_everyday_goods_fulfilled^pi > proj_everyday_goods_need^pi }
							}
							set_variable = { proj_everyday_goods_fulfilled^pi = proj_everyday_goods_need^pi }
						}
						
						set_temp_variable = { gmg = luxury_goods_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = luxury_goods_government_demand }
						multiply_temp_variable = { gmg = proj_luxury_goods_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_luxury_goods_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_luxury_goods_fulfilled^pi > proj_luxury_goods_need^pi }
							}
							set_variable = { proj_luxury_goods_fulfilled^pi = proj_luxury_goods_need^pi }
						}
						
						set_temp_variable = { gmg = services_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = services_government_demand }
						multiply_temp_variable = { gmg = proj_services_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_services_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_services_fulfilled^pi > proj_services_need^pi }
							}
							set_variable = { proj_services_fulfilled^pi = proj_services_need^pi }
						}
						
						set_temp_variable = { gmg = raw_goods_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = raw_goods_government_demand }
						multiply_temp_variable = { gmg = proj_raw_goods_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_raw_goods_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_raw_goods_fulfilled^pi > proj_raw_goods_need^pi }
							}
							set_variable = { proj_raw_goods_fulfilled^pi = proj_raw_goods_need^pi }
						}
						
						set_temp_variable = { gmg = industrial_goods_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = industrial_goods_government_demand }
						multiply_temp_variable = { gmg = proj_industrial_goods_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_industrial_goods_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_industrial_goods_fulfilled^pi > proj_industrial_goods_need^pi }
							}
							set_variable = { proj_industrial_goods_fulfilled^pi = proj_industrial_goods_need^pi }
						}

						add_to_variable = { proj_time_elapsed^pi = 1 }
					}
					for_loop_effect = {
						start = 0
						end = proj_id^num
						value = proj_index_temp

						# Check if done
						if = {
							limit = {
								check_variable = { proj_life_goods_fulfilled^pi = proj_life_goods_need^pi }
								check_variable = { proj_everyday_goods_fulfilled^pi = proj_everyday_goods_need^pi }
								check_variable = { proj_luxury_goods_fulfilled^pi = proj_luxury_goods_need^pi }
								check_variable = { proj_services_fulfilled^pi = proj_services_need^pi }
								check_variable = { proj_raw_goods_fulfilled^pi = proj_raw_goods_need^pi }
								check_variable = { proj_industrial_goods_fulfilled^pi = proj_industrial_goods_need^pi }
							}
							set_temp_variable = { id_temp = pv }
							proj_done = yes
						}
					}
				#

				calculate_govt_demand = yes
				taxes_update = yes
				spending_update = yes
				## ##

				#Industrial Power
					set_temp_variable = { industrial_power_temp = num_of_civilian_factories }
					multiply_temp_variable = { industrial_power_temp = global.factory_jobs_base_amount }
					divide_temp_variable = { industrial_power_temp = 50 }
					set_temp_variable = { modifier_temp = modifier@production_speed_buildings_factor }
					add_to_temp_variable = { modifier_temp = 1 }
					if = {
						limit = { 
							check_variable = { modifier_temp < 0 }
						}
						set_temp_variable = { modifier_temp = 0 }
					}
					multiply_temp_variable = { industrial_power_temp = modifier_temp }
					add_to_variable = { industrial_power = industrial_power_temp }

					set_temp_variable = { industrial_power_temp = num_of_military_factories }
					multiply_temp_variable = { industrial_power_temp = global.factory_jobs_base_amount }
					divide_temp_variable = { industrial_power_temp = 50 }
					set_temp_variable = { modifier_temp = modifier@industrial_capacity_factory  }
					add_to_temp_variable = { modifier_temp = 1 }
					if = {
						limit = { 
							check_variable = { modifier_temp < 0 }
						}
						set_temp_variable = { modifier_temp = 0 }
					}
					multiply_temp_variable = { industrial_power_temp = modifier_temp }
					add_to_variable = { industrial_power = industrial_power_temp }

					set_temp_variable = { industrial_power_temp = num_of_naval_factories }
					multiply_temp_variable = { industrial_power_temp = global.factory_jobs_base_amount }
					divide_temp_variable = { industrial_power_temp = 50 }
					set_temp_variable = { modifier_temp = modifier@industrial_capacity_dockyard  }
					add_to_temp_variable = { modifier_temp = 1 }
					if = {
						limit = { 
							check_variable = { modifier_temp < 0 }
						}
						set_temp_variable = { modifier_temp = 0 }
					}
					multiply_temp_variable = { industrial_power_temp = modifier_temp }
					add_to_variable = { industrial_power = industrial_power_temp }
				#

				#Price of Goods Index
					set_temp_variable = { total_needs_temp = life_goods_need }
					add_to_temp_variable = { total_needs_temp = everyday_goods_need }
					add_to_temp_variable = { total_needs_temp = luxury_goods_need }
					add_to_temp_variable = { total_needs_temp = services_need }
					add_to_temp_variable = { total_needs_temp = raw_goods_need }
					add_to_temp_variable = { total_needs_temp = industrial_goods_need }

					set_temp_variable = { life_goods_inflation_temp = life_goods_price }
					multiply_temp_variable = { life_goods_inflation_temp = life_goods_need }

					set_temp_variable = { everyday_goods_inflation_temp = everyday_goods_price }
					multiply_temp_variable = { everyday_goods_inflation_temp = everyday_goods_need }

					set_temp_variable = { luxury_goods_inflation_temp = luxury_goods_price }
					multiply_temp_variable = { luxury_goods_inflation_temp = luxury_goods_need }

					set_temp_variable = { services_inflation_temp = services_price }
					multiply_temp_variable = { services_inflation_temp = services_need }

					set_temp_variable = { raw_goods_inflation_temp = raw_goods_price }
					multiply_temp_variable = { raw_goods_inflation_temp = raw_goods_need }

					set_temp_variable = { industrial_goods_inflation_temp = industrial_goods_price }
					multiply_temp_variable = { industrial_goods_inflation_temp = industrial_goods_need }

					set_variable = { price_of_goods_index = life_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = everyday_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = luxury_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = services_inflation_temp }
					add_to_variable = { price_of_goods_index = raw_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = industrial_goods_inflation_temp }
					divide_variable = { price_of_goods_index = total_needs_temp }
				#

				#GDP
					divide_variable = { gdp_amount_this_year = 1000 }
					divide_variable = { gdp_amount_last_year = 1000 }

					set_variable = { annual_gdp_growth = gdp_amount_this_year }
					multiply_variable = { annual_gdp_growth = 100 }
					divide_variable = { annual_gdp_growth = gdp_amount_last_year }
					subtract_from_variable = { annual_gdp_growth = 100 }
				#

				#Budget
					set_variable = { actual_revenue = actual_income_tax_revenue }
					add_to_variable = { actual_revenue = actual_tariff_revenue }
					add_to_variable = { actual_revenue = actual_sales_tax_revenue }

					set_variable = { actual_subsidy_expense = actual_infrastructure_spending }
					add_to_variable = { actual_subsidy_expense = actual_trade_subsidy_spending }
					add_to_variable = { actual_subsidy_expense = actual_industrial_spending }

					#Military
						set_temp_variable = { mil_spend_temp = military_life_goods_demand }
						add_to_temp_variable = { mil_spend_temp = conscripted_life_goods_demand }
						divide_temp_variable = { mil_spend_temp = life_goods_government_demand }
						multiply_temp_variable = { mil_spend_temp = actual_life_goods_spending }
						add_to_variable = { actual_military_spending = mil_spend_temp }
						
						set_temp_variable = { mil_spend_temp = military_everyday_goods_demand }
						add_to_temp_variable = { mil_spend_temp = conscripted_everyday_goods_demand }
						divide_temp_variable = { mil_spend_temp = everyday_goods_government_demand }
						multiply_temp_variable = { mil_spend_temp = actual_everyday_goods_spending }
						add_to_variable = { actual_military_spending = mil_spend_temp }
						
						set_temp_variable = { mil_spend_temp = military_luxury_goods_demand }
						add_to_temp_variable = { mil_spend_temp = conscripted_luxury_goods_demand }
						divide_temp_variable = { mil_spend_temp = luxury_goods_government_demand }
						multiply_temp_variable = { mil_spend_temp = actual_luxury_goods_spending }
						add_to_variable = { actual_military_spending = mil_spend_temp }
						
						set_temp_variable = { mil_spend_temp = military_industrial_goods_demand }
						divide_temp_variable = { mil_spend_temp = industrial_goods_government_demand }
						multiply_temp_variable = { mil_spend_temp = actual_industrial_goods_spending }
						add_to_variable = { actual_military_spending = mil_spend_temp }
					#

					#Projects
						set_temp_variable = { project_spend_temp = projects_life_goods_demand }
						divide_temp_variable = { project_spend_temp = life_goods_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_life_goods_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}
						
						set_temp_variable = { project_spend_temp = projects_everyday_goods_demand }
						divide_temp_variable = { project_spend_temp = everyday_goods_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_everyday_goods_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}
						
						set_temp_variable = { project_spend_temp = projects_luxury_goods_demand }
						divide_temp_variable = { project_spend_temp = luxury_goods_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_luxury_goods_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}
						
						set_temp_variable = { project_spend_temp = projects_services_demand }
						divide_temp_variable = { project_spend_temp = services_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_services_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}
						
						set_temp_variable = { project_spend_temp = projects_raw_goods_demand }
						divide_temp_variable = { project_spend_temp = raw_goods_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_raw_goods_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}
						
						set_temp_variable = { project_spend_temp = projects_industrial_goods_demand }
						divide_temp_variable = { project_spend_temp = industrial_goods_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_industrial_goods_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}

						add_to_variable = { actual_construction_spending = actual_project_spending }
					#

					set_variable = { actual_spending = actual_subsidy_expense }
					add_to_variable = { actual_spending = actual_construction_spending }
					add_to_variable = { actual_spending = national_debt_interest }
					add_to_variable = { actual_spending = actual_administration_spending }
					add_to_variable = { actual_spending = actual_military_spending }

					set_variable = { net_budget = actual_revenue }
					subtract_from_variable = { net_budget = actual_spending }

					set_variable = { debt_to_gdp_ratio = national_debt }
					divide_variable = { debt_to_gdp_ratio = annual_gdp_amount }
					divide_variable = { debt_to_gdp_ratio = price_of_goods_index }
				#

				#Total Money
				add_to_variable = { total_money = treasury }
				add_to_variable = { total_money = national_bank_money }
			#

			clear_array = factory_everyday_goods_investment_interest_array
			clear_array = factory_everyday_goods_investment_state_array
			every_controlled_state = {
				create_pie_chart_pop_type = yes
				create_state_gdp_graph = yes
				add_to_variable = { update_state_econ_window = 1 }

				#Industrial Investment
					industrial_investment_calc = yes
				#

				if = {
					limit = {
						check_variable = { global.highest_state_gdp < annual_gdp_amount }
					}
					set_variable = { global.highest_state_gdp = annual_gdp_amount }
				}
				if = {
					limit = {
						check_variable = { global.highest_state_gdp_c < gdp_per_capita }
					}
					set_variable = { global.highest_state_gdp_c = gdp_per_capita }
				}
			}
			force_update_map_mode = yes

			#Adding to Global
				add_to_variable = { global.life_goods_supply = life_goods_supply }
				add_to_variable = { global.life_goods_produced_amount = life_goods_produced_amount }

				add_to_variable = { global.everyday_goods_supply = everyday_goods_supply }
				add_to_variable = { global.everyday_goods_produced_amount = everyday_goods_produced_amount }

				add_to_variable = { global.luxury_goods_supply = luxury_goods_supply }
				add_to_variable = { global.luxury_goods_produced_amount = luxury_goods_produced_amount }

				add_to_variable = { global.services_supply = services_supply }
				add_to_variable = { global.services_produced_amount = services_produced_amount }

				add_to_variable = { global.raw_goods_supply = raw_goods_supply }
				add_to_variable = { global.raw_goods_produced_amount = raw_goods_produced_amount }

				add_to_variable = { global.industrial_goods_supply = industrial_goods_supply }
				add_to_variable = { global.industrial_goods_produced_amount = industrial_goods_produced_amount }

				add_to_variable = { global.life_goods_demand = life_goods_demand }
				add_to_variable = { global.everyday_goods_demand = everyday_goods_demand }
				add_to_variable = { global.luxury_goods_demand = luxury_goods_demand }
				add_to_variable = { global.services_demand = services_demand }
				add_to_variable = { global.raw_goods_demand = raw_goods_demand }
				add_to_variable = { global.industrial_goods_demand = industrial_goods_demand }

				add_to_variable = { global.life_goods_need = life_goods_need }
				add_to_variable = { global.everyday_goods_need = everyday_goods_need }
				add_to_variable = { global.luxury_goods_need = luxury_goods_need }
				add_to_variable = { global.services_need = services_need }
				add_to_variable = { global.raw_goods_need = raw_goods_need }
				add_to_variable = { global.industrial_goods_need = industrial_goods_need }

				add_to_variable = { global.total_money = total_money }
			#
			global_bank_update = yes
		}
		random_country = {
			add_to_variable = { global.month = 1 }
		}
	}
    
	reset = {
		#Global Vars
			set_variable = { global.month = 0 }
			set_variable = { global.years_passed = 0 }
			#Pops
				#Defined Vars Default Values
					set_variable = { global.pops_male_female_ratio = 1.01 }
					set_variable = { global.pops_male_workforce_base_participation = 0.55 }
					set_variable = { global.pops_female_workforce_base_participation = 0.05 }
					set_variable = { global.pops_literacy_percentage = 15 }
					set_variable = { global.pops_education_percentage = 1 }
					set_variable = { global.pops_militancy = 20 }

					set_variable = { global.pops_natural_birth_base_rate = 3.0 } #Per year rate
					set_variable = { global.pops_natural_death_base_rate = 2.0 } #Per year rate
					set_variable = { global.pops_accidents_death_base_rate = 0.05 } #Per year rate
					set_variable = { global.pops_crime_death_base_rate = 0.005 } #Per year rate
					set_variable = { global.pops_other_death_base_rate = 0.005 } #Per year rate

					set_variable = { global.pops_maximum_starvation_death_rate = 25.0 } #Per year rate

				#Spending Patterns
					set_variable = { global.pops_artisans_raw_goods_spending = 0.20 }
					set_variable = { global.pops_artisans_raw_goods_spending_max = 0.30 }

					set_variable = { global.pops_life_goods_spending = 0.50 }
					set_variable = { global.pops_everyday_goods_spending = 0.75 }
					set_variable = { global.pops_luxury_goods_spending = 0.50 }
					set_variable = { global.pops_services_spending = 0.6 }
					set_variable = { global.pops_life_goods_spending_max = 0.75 }
					set_variable = { global.pops_everyday_goods_spending_max = 0.9 }
					set_variable = { global.pops_luxury_goods_spending_max = 0.9 }
					set_variable = { global.pops_services_spending_max = 0.90 }

					set_variable = { global.pops_savings_spending = 1 } #How much of their excess money goes into savings?
					set_variable = { global.pops_savings_base_goal = 6 } #How many months of earnings should pops save as a base (Can be affected by a lot of things)

				#Upper Strata
					set_variable = { global.pops_upper_strata_life_goods_base_need = 5 }
					set_variable = { global.pops_upper_strata_everyday_goods_base_need = 20 }
					set_variable = { global.pops_upper_strata_luxury_goods_base_need = 40 }

					#Aristocrats
						set_variable =  { global.aristocrats_percentage = 1 }
						set_variable =  { global.aristocrats_rgo_output_modifier = 0.1 } #At full aristocrats

					#Capitalists
						set_variable =  { global.capitalists_percentage = 0.0 }
						set_variable =  { global.capitalists_factory_raw_goods_input_modifier = -0.05 } #At full capitalists
						set_variable =  { global.capitalists_services_output_modifier = 0.1 } #At full capitalists

				#Middle Strata
					set_variable = { global.pops_middle_strata_life_goods_base_need = 3 }
					set_variable = { global.pops_middle_strata_everyday_goods_base_need = 10 }
					set_variable = { global.pops_middle_strata_luxury_goods_base_need = 2 }

					#Artisans
						set_variable =  { global.artisans_percentage = 20 }
						
						set_variable = { global.pops_artisans_everyday_goods_base_workforce_amount = 0.1 } #The base number of artisans that work on a set of goods. This is so that numbers don't tend to go too low
						set_variable = { global.pops_artisans_everyday_goods_base_production = 32 } #Every 100k artisans
						set_variable = { global.pops_artisans_everyday_goods_raw_goods_base_need = 0.3 }
						
						set_variable = { global.pops_artisans_luxury_goods_base_workforce_amount = 0.25 }
						set_variable = { global.pops_artisans_luxury_goods_base_production = 12 }
						set_variable = { global.pops_artisans_luxury_goods_raw_goods_base_need = 0.3 }
						
						set_variable = { global.pops_artisans_industrial_goods_base_workforce_amount = 0.2 }
						set_variable = { global.pops_artisans_industrial_goods_base_production = 16 }
						set_variable = { global.pops_artisans_industrial_goods_raw_goods_base_need = 0.9 }

					#Specialists
						set_variable =  { global.specialists_percentage = 0.0 }
						set_variable = { global.pops_specialists_production_bonus = 1 }

					#Professionals
						set_variable =  { global.professionals_percentage = 0.0 }
						set_variable = { global.pops_professionals_services_base_production = 24 }

					#Officers
						set_variable =  { global.officers_percentage = 0.5 }

				#Lower Strata
					set_variable = { global.pops_lower_strata_life_goods_base_need = 1 }
					set_variable = { global.pops_lower_strata_everyday_goods_base_need = 0.2 }
					set_variable = { global.pops_lower_strata_luxury_goods_base_need = 0.05 }
					
					#RGOs
						set_variable =  { global.rgos_percentage = 74 }
						
						set_variable = { global.pops_rgos_life_goods_base_workforce_amount = 2 } #Base amount of workers so numbers don't go too low
						set_variable = { global.pops_rgos_life_goods_base_production = 8 } #Every 100k RGOs
						set_variable = { global.pops_rgos_raw_goods_base_workforce_amount = 2 }
						set_variable = { global.pops_rgos_raw_goods_base_production = 6 }
						set_variable = { global.pops_rgos_valuable_goods_base_workforce_amount = 0.5 }
						set_variable = { global.pops_rgos_valuable_goods_base_production = 0 }

						set_variable = { global.pops_rgos_cash_crops_output_multiplier = 1.2 } #Applies to Life/Raw Goods
						set_variable = { global.pops_rgos_coal_output_multiplier = 1.25 } #Only to Raw
						set_variable = { global.pops_rgos_metals_output_multiplier = 1.33 } #Only to Raw
						set_variable = { global.pops_rgos_petroleum_output_multiplier = 1.25 } #Only to Raw

						#Valuable Goods
						set_variable = { global.pops_rgos_valuable_goods_untapped_output_multiplier = 25 }
						set_variable = { global.pops_rgos_valuable_goods_plentiful_output_multiplier = 10 }
						set_variable = { global.pops_rgos_valuable_goods_exploited_output_multiplier = 3 }
						set_variable = { global.pops_rgos_valuable_goods_depleted_output_multiplier = 1 }

						set_variable = { global.pops_rgos_valuable_goods_untapped_decay_max = 24 } #How many months until the valuable goods decays?
						set_variable = { global.pops_rgos_valuable_goods_plentiful_decay_max = 240 }
						set_variable = { global.pops_rgos_valuable_goods_exploited_decay_max = 360 }
						set_variable = { global.pops_rgos_valuable_goods_depleted_decay_max = 180 }

						#Mechanization
						set_variable = { global.pops_rgos_mechanization_rgo_size_multiplier = 0.1 } #At full mechanization
						set_variable = { global.pops_rgos_mechanization_rgo_output_multiplier = 20 }
						set_variable = { global.pops_rgos_mechanization_industrial_goods_base_need = 20.0 } #Per 100K RGOs at 100% mechanization
						set_variable = { global.pops_rgos_mechanization_expansion_industrial_goods_base_need = 20.0 } #Per 100K RGOS
						set_variable = { global.pops_rgos_mechanization_expansion_base_speed = 2.0 } #Per 100K RGOs.

					#Craftsmen
						set_variable =  { global.craftsmen_percentage = 0.0 }

					#Clerks
						set_variable =  { global.clerks_percentage = 0.0 }
						set_variable = { global.pops_clerks_services_base_production = 16 }
						set_variable = { global.pops_clerks_base_workforce_amount = 0.1 } #Base amount of workers so numbers don't go too low

					#Soldiers
						set_variable =  { global.soldiers_percentage = 4.5 }

			#
			#Factories
				set_variable = { global.factory_industrial_goods_base_need = 0.075 }

				set_variable = { global.factory_raw_goods_spending = 0.25 } #Minimum Spending
				set_variable = { global.factory_industrial_goods_spending = 0.15 }
				set_variable = { global.factory_raw_goods_spending_max = 0.4 } #Max Spending
				set_variable = { global.factory_industrial_goods_spending_max = 0.33 }

				set_variable = { global.factory_money_limit = 25 } #Per 100k employees and the goods base price

				set_variable = { global.factory_jobs_base_amount = 10 } #Per size, adjusted by the pop size
				set_variable = { global.factory_wages_revenue_percentage = 0.4 }
				set_variable = { global.factory_wages_profit_percentage = 0.25 }
				set_variable = { global.factory_wages_max_money_percentage = 0.02 } #Adjusted by % of employment

				set_variable = { global.factory_economy_of_scale = 1.1 } #Every magnitude of employee count at & above 10k, what production multiplier do you get

				#Everyday Goods Factory
					set_variable = { global.factory_everyday_goods_base_production = 20 } #These are for every 100k employees
					set_variable = { global.factory_everyday_goods_raw_goods_base_need = 0.5 } #Per Good Produced
					#Construction
						set_variable = { global.factory_everyday_goods_construction_industrial_goods_base_need = 60 } #Per 100K Employees per Factory
						set_variable = { global.factory_everyday_goods_construction_base_speed = 4 } #How fast construction is

				#Luxury Goods Factory
					set_variable = { global.factory_luxury_goods_base_production = 10 }
					set_variable = { global.factory_luxury_goods_raw_goods_base_need = 0.5 }
					#Construction
						set_variable = { global.factory_luxury_goods_construction_industrial_goods_base_need = 60 } #Per 100K Employees per Factory
						set_variable = { global.factory_luxury_goods_construction_base_speed = 4 } #How fast construction is

				#Industrial Goods Factory
					set_variable = { global.factory_industrial_goods_base_production = 10 }
					set_variable = { global.factory_industrial_goods_raw_goods_base_need = 1 }
					#Construction
						set_variable = { global.factory_industrial_goods_construction_industrial_goods_base_need = 90 } #Per 100K Employees per Factory
						set_variable = { global.factory_industrial_goods_construction_base_speed = 4 } #How fast construction is

			#
			#Resources
				clear_array = global.resources_array #Used for code
				add_to_array = { global.resources_array = 1 } #Life
				add_to_array = { global.resources_array = 2 } #Everyday
				add_to_array = { global.resources_array = 3 } #Luxury
				add_to_array = { global.resources_array = 4 } #Services
				add_to_array = { global.resources_array = 5 } #Raw
				add_to_array = { global.resources_array = 6 } #Industrial
				
				clear_array = global.factory_resources_array #Used for code
				add_to_array = { global.factory_resources_array = 2 } #Everyday
				add_to_array = { global.factory_resources_array = 3 } #Luxury
				add_to_array = { global.factory_resources_array = 6 } #Industrial

				set_variable = { global.base_transport_cost_divisor = 250 } #How much to divide distance_to@state to get the transport cost for state to state trade.
				set_variable = { global.base_shipping_cost_divisor = 400 } #How much to divide distance_to@state to get the shipping cost for country to country trade.
				

				#Life Goods
					set_variable = { global.life_goods_base_price = 1 }
				#Everyday Goods
					set_variable = { global.everyday_goods_base_price = 2 }
				#Luxury Goods
					set_variable = { global.luxury_goods_base_price = 4 }
				#Services
					set_variable = { global.services_base_price = 4 }
				#Raw Goods
					set_variable = { global.raw_goods_base_price = 0.5 }
				#Industrial Goods
					set_variable = { global.industrial_goods_base_price = 2 }
			#
			#Infrastructure
				set_variable = { global.infrastructure_industrial_goods_base_need = 0.0 } #Per level
				set_variable = { global.infrastructure_industrial_goods_base_need_increase_per_level = 0.005 }
				set_variable = { global.infrastructure_industrial_goods_base_need_squared = 0.005 } #level^2 * this
				set_variable = { global.infrastructure_industrial_goods_base_need_cubed = 0.001 } #level^3 * this

				set_variable = { global.infrastructure_construction_industrial_goods_base_need = 40 } #Per level
				set_variable = { global.infrastructure_construction_industrial_goods_base_need_increase_per_level = 4 } #Per level
				set_variable = { global.infrastructure_construction_base_speed = 5 } #How fast construction is

				set_variable = { global.infrastructure_rgo_output_modifier = 0.025 } #per level
				set_variable = { global.infrastructure_factory_throughput_modifier = 0.025 } #per level
				set_variable = { global.infrastructure_build_cost_modifier = -0.01 } #per level
				set_variable = { global.infrastructure_transport_cost_multiplier = 0.95 } #per level

				set_variable = { global.infrastructure_crumbling_threshold = 0.25 } #Below this % fulfillment of industrial goods, infrastructure_crumbling_ticks increases by 1. If above, it is reduced by 1
				set_variable = { global.infrastructure_crumbling_ticks_bar = 36 } #How many ticks is needed until you lose an infra

			#
			#State Categories
			#
			#Governments
				#Military
					#Army
					set_variable = { global.infantry_base_life_goods_need = 0.2 } #Per Battalion
					set_variable = { global.infantry_base_everyday_goods_need = 0.08 }
					set_variable = { global.infantry_base_luxury_goods_need = 0.02 }
					set_variable = { global.infantry_base_industrial_goods_need = 0 }
					
					set_variable = { global.militia_base_life_goods_need = 0.1 }
					set_variable = { global.militia_base_everyday_goods_need = 0.02 }
					set_variable = { global.militia_base_luxury_goods_need = 0 }
					set_variable = { global.militia_base_industrial_goods_need = 0 }
					
					set_variable = { global.artillery_base_life_goods_need = 0.12 }
					set_variable = { global.artillery_base_everyday_goods_need = 0.08 }
					set_variable = { global.artillery_base_luxury_goods_need = 0.02 }
					set_variable = { global.artillery_base_industrial_goods_need = 0.04 }
					
					set_variable = { global.cavalry_base_life_goods_need = 0.2 }
					set_variable = { global.cavalry_base_everyday_goods_need = 0.12 }
					set_variable = { global.cavalry_base_luxury_goods_need = 0.04 }
					set_variable = { global.cavalry_base_industrial_goods_need = 0 }
					
					set_variable = { global.mobile_base_life_goods_need = 0.2 }
					set_variable = { global.mobile_base_everyday_goods_need = 0.12 }
					set_variable = { global.mobile_base_luxury_goods_need = 0.04 }
					set_variable = { global.mobile_base_industrial_goods_need = 0.06 }
					
					set_variable = { global.armor_base_life_goods_need = 0.2 }
					set_variable = { global.armor_base_everyday_goods_need = 0.12 }
					set_variable = { global.armor_base_luxury_goods_need = 0.04 }
					set_variable = { global.armor_base_industrial_goods_need = 0.4 }
					
					set_variable = { global.robotic_base_life_goods_need = 0.04 }
					set_variable = { global.robotic_base_everyday_goods_need = 0.16 }
					set_variable = { global.robotic_base_luxury_goods_need = 0.08 }
					set_variable = { global.robotic_base_industrial_goods_need = 1.0 }
					
					set_variable = { global.support_base_life_goods_need = 0.06 } #Per Support Company
					set_variable = { global.support_base_everyday_goods_need = 0.03 }
					set_variable = { global.support_base_luxury_goods_need = 0 }
					set_variable = { global.support_base_industrial_goods_need = 0 }
					
					#Navy
					set_variable = { global.screen_base_life_goods_need = 0.06 } #Per Ship
					set_variable = { global.screen_base_everyday_goods_need = 0.015 }
					set_variable = { global.screen_base_luxury_goods_need = 0.006 }
					set_variable = { global.screen_base_industrial_goods_need = 0.006 }
					
					set_variable = { global.capital_base_life_goods_need = 0.24 }
					set_variable = { global.capital_base_everyday_goods_need = 0.06 }
					set_variable = { global.capital_base_luxury_goods_need = 0.015 }
					set_variable = { global.capital_base_industrial_goods_need = 0.003 }
					
					set_variable = { global.submarine_base_life_goods_need = 0.05 }
					set_variable = { global.submarine_base_everyday_goods_need = 0.015 }
					set_variable = { global.submarine_base_luxury_goods_need = 0.003 }
					set_variable = { global.submarine_base_industrial_goods_need = 0.03 }
					
					#Airforce
					set_variable = { global.deployed_planes_base_life_goods_need = 0.005 } #Per Deployed Plane
					set_variable = { global.deployed_planes_base_everyday_goods_need = 0.005 }
					set_variable = { global.deployed_planes_base_luxury_goods_need = 0.001 }
					set_variable = { global.deployed_planes_base_industrial_goods_need = 0.003 }

					#Other
					set_variable = { global.conscripted_base_life_goods_need = 3 } #Per 100K
					set_variable = { global.conscripted_base_everyday_goods_need = 1 }
					set_variable = { global.conscripted_base_luxury_goods_need = 0.1 }
					set_variable = { global.conscripted_payroll_multiplier = 2 } #The multiple of the above expense that goes directly to pops

					###############################################################
					# set_variable = { global.infantry_base_life_goods_need = 0.0 } #Per Battalion
					# set_variable = { global.infantry_base_everyday_goods_need = 0.0 }
					# set_variable = { global.infantry_base_luxury_goods_need = 0.0 }
					# set_variable = { global.infantry_base_industrial_goods_need = 0 }
					
					# set_variable = { global.militia_base_life_goods_need = 0.0 }
					# set_variable = { global.militia_base_everyday_goods_need = 0.0 }
					# set_variable = { global.militia_base_luxury_goods_need = 0 }
					# set_variable = { global.militia_base_industrial_goods_need = 0 }
					
					# set_variable = { global.artillery_base_life_goods_need = 0.0 }
					# set_variable = { global.artillery_base_everyday_goods_need = 0.0 }
					# set_variable = { global.artillery_base_luxury_goods_need = 0.0 }
					# set_variable = { global.artillery_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.cavalry_base_life_goods_need = 0.0 }
					# set_variable = { global.cavalry_base_everyday_goods_need = 0.0 }
					# set_variable = { global.cavalry_base_luxury_goods_need = 0.0 }
					# set_variable = { global.cavalry_base_industrial_goods_need = 0 }
					
					# set_variable = { global.mobile_base_life_goods_need = 0.0 }
					# set_variable = { global.mobile_base_everyday_goods_need = 0.0 }
					# set_variable = { global.mobile_base_luxury_goods_need = 0.0 }
					# set_variable = { global.mobile_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.armor_base_life_goods_need = 0.0 }
					# set_variable = { global.armor_base_everyday_goods_need = 0.0 }
					# set_variable = { global.armor_base_luxury_goods_need = 0.0 }
					# set_variable = { global.armor_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.robotic_base_life_goods_need = 0.0 }
					# set_variable = { global.robotic_base_everyday_goods_need = 0.0 }
					# set_variable = { global.robotic_base_luxury_goods_need = 0.0 }
					# set_variable = { global.robotic_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.support_base_life_goods_need = 0.0 } #Per Support Company
					# set_variable = { global.support_base_everyday_goods_need = 0.0 }
					# set_variable = { global.support_base_luxury_goods_need = 0 }
					# set_variable = { global.support_base_industrial_goods_need = 0 }
					
					# #Navy
					# set_variable = { global.screen_base_life_goods_need = 0.0 } #Per Ship
					# set_variable = { global.screen_base_everyday_goods_need = 0.0 }
					# set_variable = { global.screen_base_luxury_goods_need = 0.0 }
					# set_variable = { global.screen_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.capital_base_life_goods_need = 0.0 }
					# set_variable = { global.capital_base_everyday_goods_need = 0.0 }
					# set_variable = { global.capital_base_luxury_goods_need = 0.0 }
					# set_variable = { global.capital_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.submarine_base_life_goods_need = 0.0 }
					# set_variable = { global.submarine_base_everyday_goods_need = 0.0 }
					# set_variable = { global.submarine_base_luxury_goods_need = 0.0 }
					# set_variable = { global.submarine_base_industrial_goods_need = 0.0 }
					
					# #Airforce
					# set_variable = { global.deployed_planes_base_life_goods_need = 0.0 } #Per Deployed Plane
					# set_variable = { global.deployed_planes_base_everyday_goods_need = 0.0 }
					# set_variable = { global.deployed_planes_base_luxury_goods_need = 0.0}
					# set_variable = { global.deployed_planes_base_industrial_goods_need = 0.0 }

					# #Other
					# set_variable = { global.conscripted_base_life_goods_need = 0 } #Per 100K
					# set_variable = { global.conscripted_base_everyday_goods_need = 0 }
					# set_variable = { global.conscripted_base_luxury_goods_need = 0.0 }
					# set_variable = { global.conscripted_payroll_multiplier = 0 } #The multiple of the above expense that goes directly to pops
				#
				#Projects
					clear_array = proj_id
					clear_array = proj_relative
					clear_array = proj_estimated_cost
					clear_array = proj_estimated_monthly_cost
					clear_array = proj_estimated_complete_time
					clear_array = proj_time_elapsed
					clear_array = proj_life_goods_need
					clear_array = proj_life_goods_fulfilled
					clear_array = proj_life_goods_demand
					clear_array = proj_life_goods_build_speed
					clear_array = proj_everyday_goods_need
					clear_array = proj_everyday_goods_fulfilled
					clear_array = proj_everyday_goods_demand
					clear_array = proj_everyday_goods_build_speed
					clear_array = proj_luxury_goods_need
					clear_array = proj_luxury_goods_fulfilled
					clear_array = proj_luxury_goods_demand
					clear_array = proj_luxury_goods_build_speed
					clear_array = proj_services_need
					clear_array = proj_services_fulfilled
					clear_array = proj_services_demand
					clear_array = proj_services_build_speed
					clear_array = proj_raw_goods_need
					clear_array = proj_raw_goods_fulfilled
					clear_array = proj_raw_goods_demand
					clear_array = proj_raw_goods_build_speed
					clear_array = proj_industrial_goods_need
					clear_array = proj_industrial_goods_fulfilled
					clear_array = proj_industrial_goods_demand
					clear_array = proj_industrial_goods_build_speed
				#

				set_variable = { global.administration_base_expense = 0.5 } #Percentage (from 0.0 to 100.0) of pop earnings that are needed for basic administration
				set_variable = { global.administration_population_expense = 100 } #Below this population amount (in thousands), administration becomes more expensive. Should not be 0
				set_variable = { global.administration_population_expense_modifier = 2 } #Maximum modifier of admin costs when population is 0

				set_variable = { global.default_interest_rate = 3.0 } #Percent per year - Default national bank interest rate for loans to pops/corporations
				set_variable = { global.loan_scarcity_rate = 5.0 } #Percent per year - How much interest should be added when you use up all loans you can get
				set_variable = { global.base_international_interest_rate = 1.0 } #The additional rate that entities pay on getting loans from a foreign national bank
				set_variable = { global.loan_scarcity_increase_willingness = 0.25 } #When doing the autoborrow, how much scarcity increase is willing to be tolerated?

				#Credit Ratings & Interest Rates for Each
					#NOTE - Credit Rating is determined by the system.
					#	  - Actual interest rate can be higher b/c of lack of available funds
					#AAA - An obligor has EXTREMELY STRONG capacity to meet its financial commitments.
					set_variable = { global.credit_rating_AAA_base_interest_rate = 1.75 }
					#AA - An obligor has VERY STRONG capacity to meet its financial commitments. It differs from the highest-rated obligors only to a small degree.
					set_variable = { global.credit_rating_AA_base_interest_rate = 2.0 }
					#A - An obligor has STRONG capacity to meet its financial commitments 
					set_variable = { global.credit_rating_A_base_interest_rate = 2.25 }
					#BBB - An obligor has ADEQUATE capacity to meet its financial commitments
					set_variable = { global.credit_rating_BBB_base_interest_rate = 2.5 }
					#BB - An obligor is LESS VULNERABLE in the near term than other lower-rated obligors
					set_variable = { global.credit_rating_BB_base_interest_rate = 2.75 }
					#B - An obligor is MORE VULNERABLE than the obligors rated 'BB', but the obligor currently has the capacity to meet its financial commitments.
					set_variable = { global.credit_rating_B_base_interest_rate = 3.0 }
					#CCC - An obligor is CURRENTLY VULNERABLE, and is dependent upon favourable business, financial, and economic conditions to meet its financial commitments.
					set_variable = { global.credit_rating_CCC_base_interest_rate = 3.25 }
					#CC - An obligor is CURRENTLY HIGHLY-VULNERABLE.
					set_variable = { global.credit_rating_CC_base_interest_rate = 3.5 }
					#SD - An obligor has failed to pay one or more of its financial obligations (rated or unrated) when it became due. Sovereign Default / Bankruptcy
					set_variable = { global.credit_rating_SD_base_interest_rate = 10.0 }
				#
			#
		#

		#Setup Projects
			clear_array = global.proj_id
			clear_array = global.proj_life_goods_base_need
			clear_array = global.proj_life_goods_base_build_speed
			clear_array = global.proj_everyday_goods_base_need
			clear_array = global.proj_everyday_goods_base_build_speed
			clear_array = global.proj_luxury_goods_base_need
			clear_array = global.proj_luxury_goods_base_build_speed
			clear_array = global.proj_services_base_need
			clear_array = global.proj_services_base_build_speed
			clear_array = global.proj_raw_goods_base_need
			clear_array = global.proj_raw_goods_base_build_speed
			clear_array = global.proj_industrial_goods_base_need
			clear_array = global.proj_industrial_goods_base_build_speed
			clear_array = global.proj_repeatable
			clear_array = global.proj_relative
			proj_setup = yes
		#

		clear_array = global.econ_order_array

		#Resources
			clear_array = global.raw_goods_states
			clear_array = global.valuable_goods_states
			clear_array = global.coal_states
			clear_array = global.cash_crops_states
			clear_array = global.metals_states
			clear_array = global.petroleum_states

			set_historical_state_rgos = yes #States

			for_each_scope_loop = {
				array = global.raw_goods_states
				set_state_flag = pops_rgos_raw_goods_flag
			}
			for_each_scope_loop = {
				array = global.valuable_goods_states
				set_state_flag = pops_rgos_valuable_goods_flag
				
				if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_untapped_flag
					}
					set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_untapped_decay_max }
				}
				if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_plentiful_flag
					}
					set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_plentiful_decay_max }
				}
				if = {
					limit = {
						NOT = {
							OR = {
								has_state_flag = pops_rgos_valuable_goods_untapped_flag
								has_state_flag = pops_rgos_valuable_goods_plentiful_flag
								has_state_flag = pops_rgos_valuable_goods_depleted_flag
							}
						}
					}
					set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_exploited_decay_max }
				}
				if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_depleted_flag
					}
					set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_depleted_decay_max }
				}
			}
			for_each_scope_loop = {
				array = global.cash_crops_states
				set_state_flag = pops_rgos_cash_crops_flag
			}
			for_each_scope_loop = {
				array = global.coal_states
				set_state_flag = pops_rgos_coal_flag
			}
			for_each_scope_loop = {
				array = global.metals_states
				set_state_flag = pops_rgos_metals_flag
			}
			for_each_scope_loop = {
				array = global.petroleum_states
				set_state_flag = pops_rgos_petroleum_flag
			}
		#

		#Country Setup
		every_country = {

			calibrate_tech_bonuses = yes

			#Goods
				set_variable = { life_goods_base_price = global.life_goods_base_price }
				set_variable = { life_goods_price = life_goods_base_price }

				set_variable = { everyday_goods_base_price = global.everyday_goods_base_price }
				set_variable = { everyday_goods_price = everyday_goods_base_price }
				
				set_variable = { luxury_goods_base_price = global.luxury_goods_base_price }
				set_variable = { luxury_goods_price = luxury_goods_base_price }
				
				set_variable = { services_base_price = global.services_base_price }
				set_variable = { services_price = services_base_price }
				
				set_variable = { raw_goods_base_price = global.raw_goods_base_price }
				set_variable = { raw_goods_price = raw_goods_base_price }
				
				set_variable = { industrial_goods_base_price = global.industrial_goods_base_price }
				set_variable = { industrial_goods_price = industrial_goods_base_price }
			#
			#Pops
				#Male/Female Workforce Participation
					if = {
						limit = {
							NOT = { has_variable = pops_male_workforce_participation }
						}
						set_variable = { pops_male_workforce_participation = global.pops_male_workforce_base_participation }
					}
					if = {
						limit = {
							NOT = { has_variable = pops_female_workforce_participation }
						}
						set_variable = { pops_female_workforce_participation = global.pops_female_workforce_base_participation }
					}
				#
			#

			set_variable = { treasury = 0 }
			set_variable = { debt_to_national_bank = 0 }
			clear_array = debt_to_bank_country
			clear_array = debt_to_bank_amount
			clear_array = debt_to_bank_interest_rate
			clear_array = money_lent_country
			clear_array = money_lent_amount

			set_variable = { national_bank_money = 0 }
			set_variable = { national_bank_amount_k = 0 }
			set_variable = { national_bank_amount_left_k = 0 }
			set_variable = { national_bank_amount_lent_k = 0 }
			set_variable = { national_bank_interest_rate = global.default_interest_rate }
			set_variable = { national_bank_interest_income = 0 }

			set_variable = { income_tax_upper_strata_percentage = 0 }
			set_variable = { income_tax_middle_strata_percentage = 0 }
			set_variable = { income_tax_lower_strata_percentage = 0 }
			set_variable = { export_tariff_percentage = 25 }
			set_variable = { import_tariff_percentage = 25 }
			set_variable = { sales_tax_percentage = 5 }

			set_variable = { military_spending_percentage = 50 }
			set_variable = { intelligence_spending_percentage = 100 }
			set_variable = { construction_spending_percentage = 100 }
			

			reset_supply = yes
			reset_demand = yes

			#State Setup
			every_controlled_state = {
				#Reset
					set_variable = { life_goods_trade_amount = 0 } #Positive: Goods Bought / Negative: Goods Sold - Note, this only applies in this effect. It's always positive elsewhere.
					set_variable = { life_goods_trade_value = 0 } #Positive: Amount Recieved / Negative: Amount Paid

					set_variable = { everyday_goods_trade_amount = 0 }
					set_variable = { everyday_goods_trade_value = 0 }
					
					set_variable = { luxury_goods_trade_amount = 0 }
					set_variable = { luxury_goods_trade_value = 0 }
					
					set_variable = { services_trade_amount = 0 }
					set_variable = { services_trade_value = 0 }
					
					set_variable = { raw_goods_trade_amount = 0 }
					set_variable = { raw_goods_trade_value = 0 }
					
					set_variable = { industrial_goods_trade_amount = 0 }
					set_variable = { industrial_goods_trade_value = 0 }

					set_variable = { pops_earnings = 0 }
					set_variable = { pops_spending = 0 }
					set_variable = { pops_goods_spending = 0 }
					set_variable = { pops_savings = 0 }
					set_variable = { pops_debt = 0 }
					
					set_variable = { factory_everyday_goods_sold = 0 }
					set_variable = { factory_everyday_goods_earnings = 0 }
					set_variable = { factory_everyday_goods_spending = 0 }
					
					set_variable = { factory_luxury_goods_sold = 0 }
					set_variable = { factory_luxury_goods_earnings = 0 }
					set_variable = { factory_luxury_goods_spending = 0 }
					
					set_variable = { factory_industrial_goods_sold = 0 }
					set_variable = { factory_industrial_goods_earnings = 0 }
					set_variable = { factory_industrial_goods_spending = 0 }

					set_variable = { pops_life_goods_fulfilled_percentage = 1 }
					set_variable = { pops_everyday_goods_fulfilled_percentage = 1 }
					set_variable = { pops_luxury_goods_fulfilled_percentage = 1 }
					set_variable = { pops_services_fulfilled_percentage = 1 }

					set_variable = { pops_annual_life_goods_fulfilled_percentage = 1 }
					set_variable = { pops_annual_everyday_goods_fulfilled_percentage = 1 }
					set_variable = { pops_annual_luxury_goods_fulfilled_percentage = 1 }
					set_variable = { pops_annual_services_goods_fulfilled_percentage = 1 }

					set_variable = { pops_artisans_raw_goods_fulfilled_percentage = 1 }

					set_variable = { factory_everyday_goods_raw_goods_fulfilled_percentage = 1 }
					set_variable = { factory_luxury_goods_raw_goods_fulfilled_percentage = 1 }
					set_variable = { factory_industrial_goods_raw_goods_fulfilled_percentage = 1 }
					set_variable = { factory_everyday_goods_industrial_goods_fulfilled_percentage = 1 }
					set_variable = { factory_luxury_goods_industrial_goods_fulfilled_percentage = 1 }
					set_variable = { factory_industrial_goods_industrial_goods_fulfilled_percentage = 1 }

					set_variable = { infrastructure_industrial_goods_fulfilled_percentage = 1 }
					set_variable = { infrastructure_crumbling_ticks = 0 }

					set_variable = { pops_rgos_mechanization_industrial_goods_fulfilled_percentage = 0 }
					set_variable = { pops_rgos_mechanization_expansion_industrial_goods_fulfillment = 0 }

					clr_state_flag = factory_everyday_goods_in_construction
					clr_state_flag = factory_everyday_goods_construction_government_subsidized
					set_variable = { factory_everyday_goods_construction_investment_money = 0 }
					set_variable = { factory_everyday_goods_construction_industrial_goods_need = 0 }

					clr_state_flag = factory_luxury_goods_in_construction
					clr_state_flag = factory_luxury_goods_construction_government_subsidized
					set_variable = { factory_luxury_goods_construction_investment_money = 0 }
					set_variable = { factory_luxury_goods_construction_industrial_goods_need = 0 }

					clr_state_flag = factory_industrial_goods_in_construction
					clr_state_flag = factory_industrial_goods_construction_government_subsidized
					set_variable = { factory_industrial_goods_construction_investment_money = 0 }
					set_variable = { factory_industrial_goods_construction_industrial_goods_need = 0 }

					clr_state_flag = infrastructure_in_construction
					clr_state_flag = infrastructure_construction_government_subsidized
					set_variable = { infrastructure_construction_investment_money = 0 }
					set_variable = { infrastructure_construction_industrial_goods_need = 0 }

					set_variable = { rgos_mechanization_percentage = 0 }
					set_variable = { pops_rgos_mechanization_expansion_industrial_goods_need = 0 }

					clear_array = annual_gdp_amount_array

				#

				set_variable = { infrastructure_max_level = PREV.infrastructure_max_level }

				#State Categories
					if = {
						limit = {
							has_state_category = megalopolis
						}
						set_variable = { aristocrats_percentage = 0.10 }
						set_variable = { capitalists_percentage = 1.50 }
						set_variable = { artisans_percentage = 15.00 }
						set_variable = { specialists_percentage = 12.00 }
						set_variable = { professionals_percentage = 11.00 }
						set_variable = { officers_percentage = 0.20 }
						set_variable = { rgos_percentage = 8.00 }
						set_variable = { craftsmen_percentage = 27.5 }
						set_variable = { clerks_percentage = 22.00 }
						set_variable = { soldiers_percentage = 2.70 }
					}
					else_if = {
						limit = {
							has_state_category = metropolis
						}
						set_variable = { aristocrats_percentage = 0.20 }
						set_variable = { capitalists_percentage = 1.10 }
						set_variable = { artisans_percentage = 18.00 }
						set_variable = { specialists_percentage = 10.5 }
						set_variable = { professionals_percentage = 7.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 13.70 }
						set_variable = { craftsmen_percentage = 26.00 }
						set_variable = { clerks_percentage = 20.00 }
						set_variable = { soldiers_percentage = 3.20 }
					}
					else_if = {
						limit = {
							has_state_category = large_city 
						}
						set_variable = { aristocrats_percentage = 0.40 }
						set_variable = { capitalists_percentage = 0.80 }
						set_variable = { artisans_percentage = 20.00 }
						set_variable = { specialists_percentage = 6.00 }
						set_variable = { professionals_percentage = 4.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 26.90 }
						set_variable = { craftsmen_percentage = 24.00 }
						set_variable = { clerks_percentage = 14.00 }
						set_variable = { soldiers_percentage = 3.60 }
					}
					else_if = {
						limit = {
							has_state_category = city 
						}
						set_variable = { aristocrats_percentage = 0.70 }
						set_variable = { capitalists_percentage = 0.50 }
						set_variable = { artisans_percentage = 15.50 }
						set_variable = { specialists_percentage = 5.00 }
						set_variable = { professionals_percentage = 2.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 45.00 }
						set_variable = { craftsmen_percentage = 17.00 }
						set_variable = { clerks_percentage = 10.00 }
						set_variable = { soldiers_percentage = 4.00 }
					}
					else_if = {
						limit = {
							has_state_category = large_town 
						}
						set_variable = { aristocrats_percentage = 1.20 }
						set_variable = { capitalists_percentage = 0.20 }
						set_variable = { artisans_percentage = 15.00 }
						set_variable = { specialists_percentage = 2.00 }
						set_variable = { professionals_percentage = 1.00 }
						set_variable = { officers_percentage = 0.40 }
						set_variable = { rgos_percentage = 61.00 }
						set_variable = { craftsmen_percentage = 9.00 }
						set_variable = { clerks_percentage = 6.00 }
						set_variable = { soldiers_percentage = 4.20 }
					}
					else_if = {
						limit = {
							has_state_category = town 
						}
						set_variable = { aristocrats_percentage = 1.70 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 10.00 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.40 }
						set_variable = { rgos_percentage = 76.00 }
						set_variable = { craftsmen_percentage = 3.00 }
						set_variable = { clerks_percentage = 4.50 }
						set_variable = { soldiers_percentage = 4.40 }
					}
					else_if = {
						limit = {
							has_state_category = rural 
						}
						set_variable = { aristocrats_percentage = 2.50 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 5.50 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.35 }
						set_variable = { rgos_percentage = 84.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 2.00 }
						set_variable = { soldiers_percentage = 3.65 }
					}
					else_if = {
						limit = {
							has_state_category = pastoral 
						}
						set_variable = { aristocrats_percentage = 1.25 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 3.50 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.25 }
						set_variable = { rgos_percentage = 91.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 1.00 }
						set_variable = { soldiers_percentage = 3.00 }
					}
					else_if = {
						limit = {
							has_state_category = wasteland 
						}
						set_variable = { aristocrats_percentage = 0.50 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 2.00 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.0 }
						set_variable = { rgos_percentage = 96.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 0.00 }
						set_variable = { soldiers_percentage = 1.50 }
					}
					else = {
						set_variable = { aristocrats_percentage = 2.00 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 6.00 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 86.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 2.00 }
						set_variable = { soldiers_percentage = 3.70 }
					}
				#

				#Pop Setup
					set_variable = { pops_amount = state_population_k }
					set_variable = { pops_money = pops_amount }
					divide_variable = { pops_money = 10 }

					set_variable = { pops_savings = pops_amount }

					#Pop Type Percentages
						#Aristocrats
							if = {
								limit = {
									NOT = { has_variable = aristocrats_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = aristocrats_percentage
										}
										set_variable = { PREV.aristocrats_percentage = aristocrats_percentage }
									}
									else = {
										set_variable = { PREV.aristocrats_percentage = global.aristocrats_percentage }
									}
								}
							}
						#Capitalists
							if = {
								limit = {
									NOT = { has_variable = capitalists_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = capitalists_percentage
										}
										set_variable = { PREV.capitalists_percentage = capitalists_percentage }
									}
									else = {
										set_variable = { PREV.capitalists_percentage = global.capitalists_percentage }
									}
								}
							}
						#Artisans
							if = {
								limit = {
									NOT = { has_variable = artisans_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = artisans_percentage
										}
										set_variable = { PREV.artisans_percentage = artisans_percentage }
									}
									else = {
										set_variable = { PREV.artisans_percentage = global.artisans_percentage }
									}
								}
							}
						#Specialists
							if = {
								limit = {
									NOT = { has_variable = specialists_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = specialists_percentage
										}
										set_variable = { PREV.specialists_percentage = specialists_percentage }
									}
									else = {
										set_variable = { PREV.specialists_percentage = global.specialists_percentage }
									}
								}
							}
						#Professionals
							if = {
								limit = {
									NOT = { has_variable = professionals_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = professionals_percentage
										}
										set_variable = { PREV.professionals_percentage = professionals_percentage }
									}
									else = {
										set_variable = { PREV.professionals_percentage = global.professionals_percentage }
									}
								}
							}
						#Officers
							if = {
								limit = {
									NOT = { has_variable = officers_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = officers_percentage
										}
										set_variable = { PREV.officers_percentage = officers_percentage }
									}
									else = {
										set_variable = { PREV.officers_percentage = global.officers_percentage }
									}
								}
							}
						#RGOs
							if = {
								limit = {
									NOT = { has_variable = rgos_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = rgos_percentage
										}
										set_variable = { PREV.rgos_percentage = rgos_percentage }
									}
									else = {
										set_variable = { PREV.rgos_percentage = global.rgos_percentage }
									}
								}
							}
						#Craftsmen
							if = {
								limit = {
									NOT = { has_variable = craftsmen_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = craftsmen_percentage
										}
										set_variable = { PREV.craftsmen_percentage = craftsmen_percentage }
									}
									else = {
										set_variable = { PREV.craftsmen_percentage = global.craftsmen_percentage }
									}
								}
							}
						#Clerks
							if = {
								limit = {
									NOT = { has_variable = clerks_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = clerks_percentage
										}
										set_variable = { PREV.clerks_percentage = clerks_percentage }
									}
									else = {
										set_variable = { PREV.clerks_percentage = global.clerks_percentage }
									}
								}
							}
						#Soldiers
							if = {
								limit = {
									NOT = { has_variable = soldiers_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = soldiers_percentage
										}
										set_variable = { PREV.soldiers_percentage = soldiers_percentage }
									}
									else = {
										set_variable = { PREV.soldiers_percentage = global.soldiers_percentage }
									}
								}
							}
					#
					#Pops Male to Female Ratio
						if = {
							limit = {
								NOT = { has_variable = pops_male_female_ratio }
							}
							PREV = {
								if = {
									limit = {
										has_variable = pops_male_female_ratio
									}
									set_variable = { PREV.pops_male_female_ratio = pops_male_female_ratio }
								}
								else = {
									set_variable = { PREV.pops_male_female_ratio = global.pops_male_female_ratio }
								}
							}
						}
					#
				#

				#Goods
					set_variable = { life_goods_base_price = PREV.life_goods_base_price }
					set_variable = { life_goods_price = life_goods_base_price }

					set_variable = { everyday_goods_base_price = PREV.everyday_goods_base_price }
					set_variable = { everyday_goods_price = everyday_goods_base_price }
					
					set_variable = { luxury_goods_base_price = PREV.luxury_goods_base_price }
					set_variable = { luxury_goods_price = luxury_goods_base_price }
					
					set_variable = { services_base_price = PREV.services_base_price }
					set_variable = { services_price = services_base_price }
					
					set_variable = { raw_goods_base_price = PREV.raw_goods_base_price }
					set_variable = { raw_goods_price = raw_goods_base_price }
					
					set_variable = { industrial_goods_base_price = PREV.industrial_goods_base_price }
					set_variable = { industrial_goods_price = industrial_goods_base_price }
				#
				
				update_modifiers_state_effects = yes
				
				pops_update = yes

				calculate_demand = yes

				factories_update = yes
				
				#Starting Factory Distribution:
					set_variable = { private_factory_amount = specialists_workforce_amount }
					add_to_variable = { private_factory_amount = craftsmen_workforce_amount }

					set_temp_variable = { govt_factories = industrial_complex_level }
					add_to_temp_variable = { govt_factories = arms_factory_level }
					add_to_temp_variable = { govt_factories = building_level@dockyard }
					set_temp_variable = { govt_employment_max_temp = govt_factories }
					multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
					subtract_from_variable = { private_factory_amount = govt_employment_max_temp }

					divide_variable = { private_factory_amount = factory_employment_amount_per_factory }
					add_to_variable = { private_factory_amount = 0.4 }
					round_variable = private_factory_amount
					if = {
						limit = {
							check_variable = { private_factory_amount < 0 }
						}
						set_variable = { private_factory_amount = 0 }
					}
					if = {
						limit = {
							check_variable = { factory_employment_amount_per_factory < 2.5 }
						}
						set_variable = { private_factory_amount = 0 }
					}
					
					set_variable = { total_factory_amount = private_factory_amount }
					add_to_variable = { total_factory_amount = govt_factories }

					#For setting different weights for each type. 0 is none, <1 is less, 1 is normal, >1 is more 
					set_temp_variable = { factory_everyday_goods_distribution_adjust_temp = 1 }
					set_temp_variable = { factory_luxury_goods_distribution_adjust_temp = 1 }
					set_temp_variable = { factory_industrial_goods_distribution_adjust_temp = 1 }

					#Change weights here


					#

					#Factory Modifiers
					set_temp_variable = { factory_everyday_goods_base_production_temp = global.factory_everyday_goods_base_production }
					set_temp_variable = { modifier_temp = factory_everyday_goods_throughput_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_everyday_goods_base_production_temp = modifier_temp }
					set_temp_variable = { modifier_temp = factory_everyday_goods_output_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_everyday_goods_base_production_temp = modifier_temp }
					
					set_temp_variable = { factory_luxury_goods_base_production_temp = global.factory_luxury_goods_base_production }
					set_temp_variable = { modifier_temp = factory_luxury_goods_throughput_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_luxury_goods_base_production_temp = modifier_temp }
					set_temp_variable = { modifier_temp = factory_luxury_goods_output_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_luxury_goods_base_production_temp = modifier_temp }
					
					set_temp_variable = { factory_industrial_goods_base_production_temp = global.factory_industrial_goods_base_production }
					set_temp_variable = { modifier_temp = factory_industrial_goods_throughput_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_industrial_goods_base_production_temp = modifier_temp }
					set_temp_variable = { modifier_temp = factory_industrial_goods_output_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_industrial_goods_base_production_temp = modifier_temp }

					#Get Needs Amount adjusted by factory prodution
					set_temp_variable = { factory_everyday_goods_distribution_temp = pops_everyday_goods_demand }
					divide_temp_variable = { factory_everyday_goods_distribution_temp = factory_everyday_goods_base_production_temp } #TOOD - Use actual factory production amount, not the base one
					multiply_temp_variable = { factory_everyday_goods_distribution_temp = factory_everyday_goods_distribution_adjust_temp }


					set_temp_variable = { factory_luxury_goods_distribution_temp = pops_luxury_goods_demand }
					divide_temp_variable = { factory_luxury_goods_distribution_temp = factory_luxury_goods_base_production_temp } #TOOD
					multiply_temp_variable = { factory_luxury_goods_distribution_temp = factory_luxury_goods_distribution_adjust_temp }

					#Using Everyday Goods factories as a base to get a rough need
					set_variable = { factory_industrial_goods_need = factory_employment_amount_per_factory }
					multiply_variable = { factory_industrial_goods_need = global.factory_everyday_goods_base_production }
					divide_variable = { factory_industrial_goods_need = 100 }
					multiply_variable = { factory_industrial_goods_need = private_factory_amount }
					set_temp_variable = { modifier_temp = factory_everyday_goods_throughput_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_variable = { factory_industrial_goods_need = modifier_temp }
					multiply_variable = { factory_industrial_goods_need = global.factory_industrial_goods_base_need }
					set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_variable = { factory_industrial_goods_need = modifier_temp }

					set_temp_variable = { factory_industrial_goods_distribution_temp = factory_industrial_goods_need }
					divide_temp_variable = { factory_industrial_goods_distribution_temp = factory_industrial_goods_base_production_temp } #TOOD
					multiply_temp_variable = { factory_industrial_goods_distribution_temp = factory_industrial_goods_distribution_adjust_temp }


					set_temp_variable = { total_distribution_temp = factory_everyday_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_luxury_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_industrial_goods_distribution_temp }

					divide_temp_variable = { factory_everyday_goods_distribution_temp = total_distribution_temp }
					multiply_temp_variable = { factory_everyday_goods_distribution_temp = private_factory_amount }
					set_temp_variable = { factory_everyday_goods_round_temp = factory_everyday_goods_distribution_temp }
					round_temp_variable = factory_everyday_goods_distribution_temp
					subtract_from_temp_variable = { factory_everyday_goods_round_temp = factory_everyday_goods_distribution_temp }

					divide_temp_variable = { factory_luxury_goods_distribution_temp = total_distribution_temp }
					multiply_temp_variable = { factory_luxury_goods_distribution_temp = private_factory_amount }
					set_temp_variable = { factory_luxury_goods_round_temp = factory_luxury_goods_distribution_temp }
					round_temp_variable = factory_luxury_goods_distribution_temp
					subtract_from_temp_variable = { factory_luxury_goods_round_temp = factory_luxury_goods_distribution_temp }

					divide_temp_variable = { factory_industrial_goods_distribution_temp = total_distribution_temp }
					multiply_temp_variable = { factory_industrial_goods_distribution_temp = private_factory_amount }
					set_temp_variable = { factory_industrial_goods_round_temp = factory_industrial_goods_distribution_temp }
					round_temp_variable = factory_industrial_goods_distribution_temp
					subtract_from_temp_variable = { factory_industrial_goods_round_temp = factory_industrial_goods_distribution_temp }

					set_temp_variable = { total_distribution_temp = factory_everyday_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_luxury_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_industrial_goods_distribution_temp }

					#Basically, what this does is that it adds a factory to the category that was the closest to being rounded
					#Positive: Rounded Down
					#Negative: Rounded Up
					if = {
						limit = {
							NOT = { check_variable = { total_distribution_temp = private_factory_amount } }
						}

						if = {
							limit = {
								check_variable = { total_distribution_temp > private_factory_amount }
							}

							if = {
								limit = {
									check_variable = { factory_everyday_goods_round_temp < factory_luxury_goods_round_temp }
									check_variable = { factory_everyday_goods_round_temp < factory_industrial_goods_round_temp }
								}
								subtract_from_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
								subtract_from_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_luxury_goods_round_temp < factory_industrial_goods_round_temp }
										}
										subtract_from_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
									else = {
										subtract_from_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else_if = {
								limit = {
									check_variable = { factory_luxury_goods_round_temp < factory_everyday_goods_round_temp }
									check_variable = { factory_luxury_goods_round_temp < factory_industrial_goods_round_temp }
								}
								subtract_from_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
								subtract_from_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp < factory_industrial_goods_round_temp }
										}
										subtract_from_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										subtract_from_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else = {
								subtract_from_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
								subtract_from_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp < factory_luxury_goods_round_temp }
										}
										subtract_from_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										subtract_from_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
								}
							}
						}
						else = {
							if = {
								limit = {
									check_variable = { factory_everyday_goods_round_temp > factory_luxury_goods_round_temp }
									check_variable = { factory_everyday_goods_round_temp > factory_industrial_goods_round_temp }
								}
								add_to_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
								add_to_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_luxury_goods_round_temp > factory_industrial_goods_round_temp }
										}
										add_to_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
									else = {
										add_to_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else_if = {
								limit = {
									check_variable = { factory_luxury_goods_round_temp > factory_everyday_goods_round_temp }
									check_variable = { factory_luxury_goods_round_temp > factory_industrial_goods_round_temp }
								}
								add_to_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
								add_to_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp > factory_industrial_goods_round_temp }
										}
										add_to_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										add_to_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else = {
								add_to_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
								add_to_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp > factory_luxury_goods_round_temp }
										}
										add_to_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										add_to_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
								}
							}
						}
					}



					set_variable = { factory_everyday_goods_amount = factory_everyday_goods_distribution_temp }
					set_variable = { factory_luxury_goods_amount = factory_luxury_goods_distribution_temp }
					set_variable = { factory_industrial_goods_amount = factory_industrial_goods_distribution_temp }
				#
				

				factories_update = yes
				set_variable = { factory_everyday_goods_money = factory_everyday_goods_money_limit }
				multiply_variable = { factory_everyday_goods_money = 1.25 }
				set_variable = { factory_luxury_goods_money = factory_luxury_goods_money_limit }
				multiply_variable = { factory_luxury_goods_money = 1.25 }
				set_variable = { factory_industrial_goods_money = factory_industrial_goods_money_limit }
				multiply_variable = { factory_industrial_goods_money = 1.25 }
				update_production_maintenance = yes
				calculate_supply = yes

				clear_array = pops_life_goods_fulfilled_array
				clear_array = pops_everyday_goods_fulfilled_array
				clear_array = pops_luxury_goods_fulfilled_array
				clear_array = factory_everyday_goods_earnings_array
				clear_array = factory_everyday_goods_spending_array
				clear_array = factory_luxury_goods_earnings_array
				clear_array = factory_luxury_goods_spending_array
				clear_array = factory_industrial_goods_earnings_array
				clear_array = factory_industrial_goods_spending_array
				clear_array = gdp_amount_array

				pops_update = yes

				create_pie_chart_pop_type = yes
				calculate_price = yes
				calculate_demand = yes
				calculate_price = yes
				reset_demand = yes
			}
			reset_demand = yes
			every_controlled_state = {
				calculate_demand = yes
				add_to_variable = { update_state_econ_window = 1 }
			}
		}
	}
#

#Update Scripts
	pops_update = {

		#Males/Females
		set_temp_variable = { divisor_temp = 1 }
		add_to_temp_variable = { divisor_temp = pops_male_female_ratio }

		set_variable = { pops_females_amount = pops_amount }
		divide_variable = { pops_females_amount = divisor_temp }

		set_variable = { pops_males_amount = pops_amount }
		subtract_from_variable = { pops_males_amount = pops_females_amount }

		#Workforce
		set_temp_variable = { women_in_workforce_temp = pops_females_amount }
		set_temp_variable = { men_in_workforce_temp = pops_males_amount }
		owner = {
			multiply_temp_variable = { PREV.women_in_workforce_temp = pops_female_workforce_participation }
			multiply_temp_variable = { PREV.men_in_workforce_temp = pops_male_workforce_participation }
		}
		set_variable = { pops_workforce_amount = women_in_workforce_temp }
		add_to_variable = { pops_workforce_amount = men_in_workforce_temp }
		set_variable = { pops_workforce_percentage = pops_workforce_amount }
		multiply_variable = { pops_workforce_percentage = 100 }
		divide_variable = { pops_workforce_percentage = pops_amount }

		#Pop Types
			#Upper Strata
			#Aristocrats
				set_variable = { aristocrats_amount = pops_amount }
				divide_variable = { aristocrats_amount = 100 }
				multiply_variable = { aristocrats_amount = aristocrats_percentage }

				set_variable = { aristocrats_workforce_amount = pops_workforce_amount }
				divide_variable = { aristocrats_workforce_amount = 100 }
				multiply_variable = { aristocrats_workforce_amount = aristocrats_percentage }
			#
			#Capitalists
				set_variable = { capitalists_amount = pops_amount }
				divide_variable = { capitalists_amount = 100 }
				multiply_variable = { capitalists_amount = capitalists_percentage }

				set_variable = { capitalists_workforce_amount = pops_workforce_amount }
				divide_variable = { capitalists_workforce_amount = 100 }
				multiply_variable = { capitalists_workforce_amount = capitalists_percentage }
			#

			#Middle Strata
			#Artisans
				set_variable = { artisans_amount = pops_amount }
				divide_variable = { artisans_amount = 100 }
				multiply_variable = { artisans_amount = artisans_percentage }

				set_variable = { artisans_workforce_amount = pops_workforce_amount }
				divide_variable = { artisans_workforce_amount = 100 }
				multiply_variable = { artisans_workforce_amount = artisans_percentage }
			#
			#Specialists
				set_variable = { specialists_amount = pops_amount }
				divide_variable = { specialists_amount = 100 }
				multiply_variable = { specialists_amount = specialists_percentage }

				set_variable = { specialists_workforce_amount = pops_workforce_amount }
				divide_variable = { specialists_workforce_amount = 100 }
				multiply_variable = { specialists_workforce_amount = specialists_percentage }
			#
			#Professionals
				set_variable = { professionals_amount = pops_amount }
				divide_variable = { professionals_amount = 100 }
				multiply_variable = { professionals_amount = professionals_percentage }

				set_variable = { professionals_workforce_amount = pops_workforce_amount }
				divide_variable = { professionals_workforce_amount = 100 }
				multiply_variable = { professionals_workforce_amount = professionals_percentage }
			#
			#Officers
				set_variable = { officers_amount = pops_amount }
				divide_variable = { officers_amount = 100 }
				multiply_variable = { officers_amount = officers_percentage }

				set_variable = { officers_workforce_amount = pops_workforce_amount }
				divide_variable = { officers_workforce_amount = 100 }
				multiply_variable = { officers_workforce_amount = officers_percentage }
			#

			#Lower Strata
			#RGOs
				set_variable = { rgos_amount = pops_amount }
				divide_variable = { rgos_amount = 100 }
				multiply_variable = { rgos_amount = rgos_percentage }

				set_variable = { rgos_workforce_amount = pops_workforce_amount }
				divide_variable = { rgos_workforce_amount = 100 }
				multiply_variable = { rgos_workforce_amount = rgos_percentage }
			#
			#Craftsmen
				set_variable = { craftsmen_amount = pops_amount }
				divide_variable = { craftsmen_amount = 100 }
				multiply_variable = { craftsmen_amount = craftsmen_percentage }

				set_variable = { craftsmen_workforce_amount = pops_workforce_amount }
				divide_variable = { craftsmen_workforce_amount = 100 }
				multiply_variable = { craftsmen_workforce_amount = craftsmen_percentage }
			#
			#Clerks
				set_variable = { clerks_amount = pops_amount }
				divide_variable = { clerks_amount = 100 }
				multiply_variable = { clerks_amount = clerks_percentage }

				set_variable = { clerks_workforce_amount = pops_workforce_amount }
				divide_variable = { clerks_workforce_amount = 100 }
				multiply_variable = { clerks_workforce_amount = clerks_percentage }
			#
			#Soldiers
				set_variable = { soldiers_amount = pops_amount }
				divide_variable = { soldiers_amount = 100 }
				multiply_variable = { soldiers_amount = soldiers_percentage }

				set_variable = { soldiers_workforce_amount = pops_workforce_amount }
				divide_variable = { soldiers_workforce_amount = 100 }
				multiply_variable = { soldiers_workforce_amount = soldiers_percentage }
			#
		#
		#Pop Strata
			#Upper Strata
				set_variable = { upper_strata_amount = aristocrats_amount }
				add_to_variable = { upper_strata_amount = capitalists_amount }
				set_variable = { upper_strata_percentage = upper_strata_amount }
				multiply_variable = { upper_strata_percentage = 100 }
				divide_variable = { upper_strata_percentage = pops_amount }
			#
			#Middle Strata
				set_variable = { middle_strata_amount = artisans_amount }
				add_to_variable = { middle_strata_amount = specialists_amount }
				add_to_variable = { middle_strata_amount = professionals_amount }
				add_to_variable = { middle_strata_amount = officers_amount }
				set_variable = { middle_strata_percentage = middle_strata_amount }
				multiply_variable = { middle_strata_percentage = 100 }
				divide_variable = { middle_strata_percentage = pops_amount }
			#
			#Lower Strata
				set_variable = { lower_strata_amount = rgos_amount }
				add_to_variable = { lower_strata_amount = craftsmen_amount }
				add_to_variable = { lower_strata_amount = clerks_amount }
				add_to_variable = { lower_strata_amount = soldiers_amount }
				set_variable = { lower_strata_percentage = lower_strata_amount }
				multiply_variable = { lower_strata_percentage = 100 }
				divide_variable = { lower_strata_percentage = pops_amount }
			#
		#
		
		#Employment & Unemployment
			#RGOs and Aristocrats
				set_variable = { rgos_employed_amount = rgos_workforce_amount }
				set_variable = { rgos_max_employment = pops_workforce_amount }
				set_temp_variable = { rgo_max_size = 1 }
				add_to_temp_variable = { rgo_max_size = rgo_max_size_effect }
				multiply_variable = { rgos_max_employment = rgo_max_size }
				if = {
					limit = {
						check_variable = { rgos_employed_amount > rgos_max_employment }
					}
					set_variable = { rgos_employed_amount = rgos_max_employment }
				}

				set_variable = { rgos_unemployed_amount = rgos_workforce_amount }
				subtract_from_variable = { rgos_unemployed_amount = rgos_employed_amount }
				set_variable = { rgos_unemployment_percentage = rgos_unemployed_amount }
				multiply_variable = { rgos_unemployment_percentage = 100 }
				divide_variable = { rgos_unemployment_percentage = rgos_workforce_amount }
				if = {
					limit = {
						check_variable = { rgos_unemployment_percentage < 0 }
					}
					set_variable = { rgos_unemployment_percentage = 0 }
				}

				set_variable = { aristocrats_employed_amount = aristocrats_workforce_amount }
				set_temp_variable = { aristocrats_max_employment_temp = rgos_employed_amount }
				divide_temp_variable = { aristocrats_max_employment_temp = 20 }
				if = {
					limit = {
						check_variable = { aristocrats_employed_amount > aristocrats_max_employment_temp }
					}
					set_variable = { aristocrats_employed_amount = aristocrats_max_employment_temp }
					set_variable = { aristocrats_rgo_output_modifier = global.aristocrats_rgo_output_modifier }
				}
				else = {
					set_variable = { aristocrats_rgo_output_modifier = capitalists_employed_amount }
					divide_variable = { aristocrats_rgo_output_modifier = capitalists_max_employment_temp }

					multiply_variable = { aristocrats_rgo_output_modifier = global.aristocrats_rgo_output_modifier }
				}

				set_variable = { aristocrats_unemployed_amount = aristocrats_workforce_amount }
				subtract_from_variable = { aristocrats_unemployed_amount = aristocrats_employed_amount }
				set_variable = { aristocrats_unemployment_percentage = aristocrats_unemployed_amount }
				multiply_variable = { aristocrats_unemployment_percentage = 100 }
				divide_variable = { aristocrats_unemployment_percentage = aristocrats_workforce_amount }
				if = {
					limit = {
						check_variable = { aristocrats_unemployment_percentage < 0 }
					}
					set_variable = { aristocrats_unemployment_percentage = 0 }
				}
			#
			#Artisans
				set_variable = { artisans_employed_amount = artisans_workforce_amount }
				set_variable = { artisans_unemployed_amount = 0 }
				set_variable = { artisans_unemployment_percentage = 0 }
			#
			#Craftsmen and Specialists
				set_temp_variable = { factory_employment_amount_temp = factory_employment_amount }
				subtract_from_temp_variable = { factory_employment_amount_temp = specialists_workforce_amount }
				if = {
					limit = {
						check_variable = { factory_employment_amount_temp < 0 }
					}
					set_variable = { specialists_employed_amount = factory_employment_amount }
					set_variable = { craftsmen_employed_amount = 0 }
				}
				else = {
					set_variable = { specialists_employed_amount = specialists_workforce_amount }
					if = {
						limit = {
							check_variable = { factory_employment_amount_temp < craftsmen_workforce_amount }
						}
						set_variable = { craftsmen_employed_amount = factory_employment_amount_temp }
					}
					else = {
						set_variable = { craftsmen_employed_amount = craftsmen_workforce_amount }
					}
				}

				set_variable = { craftsmen_unemployed_amount = craftsmen_workforce_amount }
				subtract_from_variable = { craftsmen_unemployed_amount = craftsmen_employed_amount }
				set_variable = { craftsmen_unemployment_percentage = craftsmen_unemployed_amount }
				multiply_variable = { craftsmen_unemployment_percentage = 100 }
				divide_variable = { craftsmen_unemployment_percentage = craftsmen_workforce_amount }
				if = {
					limit = {
						check_variable = { craftsmen_unemployment_percentage < 0 }
					}
					set_variable = { craftsmen_unemployment_percentage = 0 }
				}

				set_variable = { specialists_unemployed_amount = specialists_workforce_amount }
				subtract_from_variable = { specialists_unemployed_amount = specialists_employed_amount }
				set_variable = { specialists_unemployment_percentage = specialists_unemployed_amount }
				multiply_variable = { specialists_unemployment_percentage = 100 }
				divide_variable = { specialists_unemployment_percentage = specialists_workforce_amount }
				if = {
					limit = {
						check_variable = { specialists_unemployment_percentage < 0 }
					}
					set_variable = { specialists_unemployment_percentage = 0 }
				}
			#
			#Clerks and Professionals
				set_variable = { clerks_employed_amount = clerks_workforce_amount }
				set_variable = { clerks_unemployed_amount = 0 }
				set_variable = { clerks_unemployment_percentage = 0 }

				set_variable = { professionals_employed_amount = professionals_workforce_amount }
				set_variable = { professionals_unemployed_amount = 0 }
				set_variable = { professionals_unemployment_percentage = 0 }
			#
			#Capitalists

				set_variable = { capitalists_employed_amount = capitalists_workforce_amount }
				set_temp_variable = { capitalists_max_employment_temp = specialists_employed_amount }
				add_to_temp_variable = { capitalists_max_employment_temp = craftsmen_employed_amount }
				add_to_temp_variable = { capitalists_max_employment_temp = clerks_employed_amount }
				add_to_temp_variable = { capitalists_max_employment_temp = professionals_employed_amount }
				divide_temp_variable = { capitalists_max_employment_temp = 10 }
				if = {
					limit = {
						check_variable = { capitalists_employed_amount > capitalists_max_employment_temp }
					}
					set_variable = { capitalists_employed_amount = capitalists_max_employment_temp }
					set_variable = { capitalists_factory_raw_goods_input_modifier = global.capitalists_factory_raw_goods_input_modifier }
					set_variable = { capitalists_services_output_modifier = global.capitalists_services_output_modifier }
				}
				else = {
					set_variable = { capitalists_factory_raw_goods_input_modifier = capitalists_employed_amount }
					divide_variable = { capitalists_factory_raw_goods_input_modifier = capitalists_max_employment_temp }
					set_variable = { capitalists_services_output_modifier = capitalists_factory_raw_goods_input_modifier }

					multiply_variable = { capitalists_factory_raw_goods_input_modifier = global.capitalists_factory_raw_goods_input_modifier }
					multiply_variable = { capitalists_services_output_modifier = global.capitalists_services_output_modifier }
				}

				set_variable = { capitalists_unemployed_amount = capitalists_workforce_amount }
				subtract_from_variable = { capitalists_unemployed_amount = capitalists_employed_amount }
				set_variable = { capitalists_unemployment_percentage = capitalists_unemployed_amount }
				multiply_variable = { capitalists_unemployment_percentage = 100 }
				divide_variable = { capitalists_unemployment_percentage = capitalists_workforce_amount }
				if = {
					limit = {
						check_variable = { capitalists_unemployment_percentage < 0 }
					}
					set_variable = { capitalists_unemployment_percentage = 0 }
				}
			#
			#Soldiers and Officers
				set_variable = { soldiers_employed_amount = soldiers_workforce_amount }
				set_variable = { soldiers_unemployed_amount = 0 }
				set_variable = { soldiers_unemployment_percentage = 0 }

				set_variable = { officers_employed_amount = officers_workforce_amount }
				set_temp_variable = { officers_max_employment_temp = soldiers_employed_amount }
				divide_temp_variable = { officers_max_employment_temp = 10 }
				if = {
					limit = {
						check_variable = { officers_employed_amount > officers_max_employment_temp }
					}
					set_variable = { officers_employed_amount = officers_max_employment_temp }
				}

				set_variable = { officers_unemployed_amount = officers_workforce_amount }
				subtract_from_variable = { officers_unemployed_amount = officers_employed_amount }
				set_variable = { officers_unemployment_percentage = officers_unemployed_amount }
				multiply_variable = { officers_unemployment_percentage = 100 }
				divide_variable = { officers_unemployment_percentage = officers_workforce_amount }
				if = {
					limit = {
						check_variable = { officers_unemployment_percentage < 0 }
					}
					set_variable = { officers_unemployment_percentage = 0 }
				}
			#
		#

		#Life Needs. Do these before Artisan Production
		set_temp_variable = { upper_strata_life_goods_need = upper_strata_amount }
		multiply_temp_variable = { upper_strata_life_goods_need = global.pops_upper_strata_life_goods_base_need }
		set_temp_variable = { middle_strata_life_goods_need = middle_strata_amount }
		multiply_temp_variable = { middle_strata_life_goods_need = global.pops_middle_strata_life_goods_base_need }
		set_temp_variable = { lower_strata_life_goods_need = lower_strata_amount }
		multiply_temp_variable = { lower_strata_life_goods_need = global.pops_lower_strata_life_goods_base_need }
		
		set_variable = { pops_life_goods_need = upper_strata_life_goods_need }
		add_to_variable = { pops_life_goods_need = middle_strata_life_goods_need }
		add_to_variable = { pops_life_goods_need = lower_strata_life_goods_need }
		divide_variable = { pops_life_goods_need = 100 }

		#Everyday
		set_temp_variable = { upper_strata_everyday_goods_need = upper_strata_amount }
		multiply_temp_variable = { upper_strata_everyday_goods_need = global.pops_upper_strata_everyday_goods_base_need }
		set_temp_variable = { middle_strata_everyday_goods_need = middle_strata_amount }
		multiply_temp_variable = { middle_strata_everyday_goods_need = global.pops_middle_strata_everyday_goods_base_need }
		set_temp_variable = { lower_strata_everyday_goods_need = lower_strata_amount }
		multiply_temp_variable = { lower_strata_everyday_goods_need = global.pops_lower_strata_everyday_goods_base_need }
		
		set_variable = { pops_everyday_goods_need = upper_strata_everyday_goods_need }
		add_to_variable = { pops_everyday_goods_need = middle_strata_everyday_goods_need }
		add_to_variable = { pops_everyday_goods_need = lower_strata_everyday_goods_need }
		divide_variable = { pops_everyday_goods_need = 100 }

		#Luxury
		set_temp_variable = { upper_strata_luxury_goods_need = upper_strata_amount }
		multiply_temp_variable = { upper_strata_luxury_goods_need = global.pops_upper_strata_luxury_goods_base_need }
		set_temp_variable = { middle_strata_luxury_goods_need = middle_strata_amount }
		multiply_temp_variable = { middle_strata_luxury_goods_need = global.pops_middle_strata_luxury_goods_base_need }
		set_temp_variable = { lower_strata_luxury_goods_need = lower_strata_amount }
		multiply_temp_variable = { lower_strata_luxury_goods_need = global.pops_lower_strata_luxury_goods_base_need }
		
		set_variable = { pops_luxury_goods_need = upper_strata_luxury_goods_need }
		add_to_variable = { pops_luxury_goods_need = middle_strata_luxury_goods_need }
		add_to_variable = { pops_luxury_goods_need = lower_strata_luxury_goods_need }
		divide_variable = { pops_luxury_goods_need = 100 }

		if = {
			limit = {
				check_variable = { pops_life_goods_fulfilled_percentage > 0.989 }
			}
			set_variable = { pops_life_goods_fulfilled_percentage = 1 }
		}
		if = {
			limit = {
				check_variable = { pops_everyday_goods_fulfilled_percentage > 0.989 }
			}
			set_variable = { pops_everyday_goods_fulfilled_percentage = 1 }
		}
		if = {
			limit = {
				check_variable = { pops_luxury_goods_fulfilled_percentage > 0.989 }
			}
			set_variable = { pops_luxury_goods_fulfilled_percentage = 1 }
		}

		set_temp_variable = { life_goods_fulfilled_temp = 0 }
		for_each_loop = { 
			array = pops_life_goods_fulfilled_array
			value = vv
			add_to_temp_variable = { life_goods_fulfilled_temp = vv }
		}
		set_variable = { pops_annual_life_goods_fulfilled_percentage = life_goods_fulfilled_temp }
		divide_variable = { pops_annual_life_goods_fulfilled_percentage = pops_life_goods_fulfilled_array^num }
		if = {
			limit = {
				check_variable = { pops_life_goods_fulfilled_array^num < 1 }
			}
			set_variable = { pops_annual_life_goods_fulfilled_percentage = 1 }
		}

		set_temp_variable = { everyday_goods_fulfilled_temp = 0 }
		for_each_loop = { 
			array = pops_everyday_goods_fulfilled_array
			value = vv
			add_to_temp_variable = { everyday_goods_fulfilled_temp = vv }
		}
		set_variable = { pops_annual_everyday_goods_fulfilled_percentage = everyday_goods_fulfilled_temp }
		divide_variable = { pops_annual_everyday_goods_fulfilled_percentage = pops_everyday_goods_fulfilled_array^num }
		if = {
			limit = {
				check_variable = { pops_everyday_goods_fulfilled_array^num < 1 }
			}
			set_variable = { pops_annual_everyday_goods_fulfilled_percentage = 1 }
		}

		set_temp_variable = { luxury_goods_fulfilled_temp = 0 }
		for_each_loop = { 
			array = pops_luxury_goods_fulfilled_array
			value = vv
			add_to_temp_variable = { luxury_goods_fulfilled_temp = vv }
		}
		set_variable = { pops_annual_luxury_goods_fulfilled_percentage = luxury_goods_fulfilled_temp }
		divide_variable = { pops_annual_luxury_goods_fulfilled_percentage = pops_luxury_goods_fulfilled_array^num }
		if = {
			limit = {
				check_variable = { pops_luxury_goods_fulfilled_array^num < 1 }
			}
			set_variable = { pops_annual_luxury_goods_fulfilled_percentage = 1 }
		}

		set_variable = { pops_life_needs_fulfilled_frame = pops_annual_life_goods_fulfilled_percentage }
		multiply_variable = { pops_life_needs_fulfilled_frame = 10 }
		round_variable = pops_life_needs_fulfilled_frame
		add_to_variable = { pops_life_needs_fulfilled_frame = 1 }

		set_variable = { pops_everyday_needs_fulfilled_frame = pops_annual_everyday_goods_fulfilled_percentage }
		multiply_variable = { pops_everyday_needs_fulfilled_frame = 10 }
		round_variable = pops_everyday_needs_fulfilled_frame
		add_to_variable = { pops_everyday_needs_fulfilled_frame = 1 }

		set_variable = { pops_luxury_needs_fulfilled_frame = pops_annual_luxury_goods_fulfilled_percentage }
		multiply_variable = { pops_luxury_needs_fulfilled_frame = 10 }
		round_variable = pops_luxury_needs_fulfilled_frame
		add_to_variable = { pops_luxury_needs_fulfilled_frame = 1 }
	}

	factories_update = {
		#Factory Employment
		set_variable = { factory_employment_amount_per_factory = global.factory_jobs_base_amount }

		set_temp_variable = { pops_amount_temp = pops_amount }
		set_temp_variable = { magnitude_temp = 1 }
		if = {
			limit = {
				check_variable = { pops_amount_temp > 50 }
			}
			while_loop_effect = {
				limit = {
					check_variable = { pops_amount_temp > 100 }
				}
				divide_temp_variable = { pops_amount_temp = 2 }
				add_to_temp_variable = { magnitude_temp = 0.5 }
			}
			multiply_variable = { factory_employment_amount_per_factory = magnitude_temp }
		}
		else_if = {
			limit = {
				check_variable = { pops_amount_temp < 25 }
			}
			while_loop_effect = {
				limit = {
					check_variable = { pops_amount_temp < 50 }
					check_variable = { magnitude_temp < 2.5 }
				}
				multiply_temp_variable = { pops_amount_temp = 2 }
				add_to_temp_variable = { magnitude_temp = 0.5 }
			}
			divide_variable = { factory_employment_amount_per_factory = magnitude_temp }
		}

		set_variable = { private_factory_amount = factory_everyday_goods_amount }
		add_to_variable = { private_factory_amount = factory_luxury_goods_amount }
		add_to_variable = { private_factory_amount = factory_industrial_goods_amount }

		set_variable = { total_factory_amount = industrial_complex_level }
		add_to_variable = { total_factory_amount = arms_factory_level }
		add_to_variable = { total_factory_amount = building_level@dockyard }
		add_to_variable = { total_factory_amount = private_factory_amount }

		set_variable = { factory_employment_amount_max = private_factory_amount }
		multiply_variable = { factory_employment_amount_max = factory_employment_amount_per_factory }
		
		set_temp_variable = { govt_employment_max_temp = industrial_complex_level }
		add_to_temp_variable = { govt_employment_max_temp = arms_factory_level }
		add_to_temp_variable = { govt_employment_max_temp = building_level@dockyard }
		multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
		add_to_variable = { factory_employment_amount_max = govt_employment_max_temp }

		set_temp_variable = { factory_employment_max_temp = specialists_workforce_amount }
		add_to_temp_variable = { factory_employment_max_temp = craftsmen_workforce_amount }
		set_variable = { factory_employment_amount = factory_employment_amount_max }
		if = {
			limit = {
				check_variable = { factory_employment_amount > factory_employment_max_temp }
			}
			set_variable = { factory_employment_amount = factory_employment_max_temp }
		}

		set_variable = { factory_employment_percentage = factory_employment_amount }
		multiply_variable = { factory_employment_percentage = 100 }
		divide_variable = { factory_employment_percentage = factory_employment_amount_max }

		#Money Limit
		set_variable = { factory_everyday_goods_money_limit = global.factory_money_limit }
		multiply_variable = { factory_everyday_goods_money_limit = factory_everyday_goods_amount }
		multiply_variable = { factory_everyday_goods_money_limit = everyday_goods_base_price }
		divide_variable = { factory_everyday_goods_money_limit = 100 }
		multiply_variable = { factory_everyday_goods_money_limit = factory_employment_amount_per_factory }
		
		set_variable = { factory_luxury_goods_money_limit = global.factory_money_limit }
		multiply_variable = { factory_luxury_goods_money_limit = factory_luxury_goods_amount }
		multiply_variable = { factory_luxury_goods_money_limit = luxury_goods_base_price }
		divide_variable = { factory_luxury_goods_money_limit = 100 }
		multiply_variable = { factory_luxury_goods_money_limit = factory_employment_amount_per_factory }
		
		set_variable = { factory_industrial_goods_money_limit = global.factory_money_limit }
		multiply_variable = { factory_industrial_goods_money_limit = factory_industrial_goods_amount }
		multiply_variable = { factory_industrial_goods_money_limit = industrial_goods_base_price }
		divide_variable = { factory_industrial_goods_money_limit = 100 }
		multiply_variable = { factory_industrial_goods_money_limit = factory_employment_amount_per_factory }

		#Profitability
		set_variable = { factory_everyday_goods_profitability_this_month = factory_everyday_goods_profit }
		divide_variable = { factory_everyday_goods_profitability_this_month = factory_everyday_goods_earnings }
		
		set_variable = { factory_luxury_goods_profitability_this_month = factory_luxury_goods_profit }
		divide_variable = { factory_luxury_goods_profitability_this_month = factory_luxury_goods_earnings }
		
		set_variable = { factory_industrial_goods_profitability_this_month = factory_industrial_goods_profit }
		divide_variable = { factory_industrial_goods_profitability_this_month = factory_industrial_goods_earnings }

		set_temp_variable = { factory_earnings_temp = 0 }
		set_temp_variable = { factory_spending_temp = 0 }
		for_each_loop = { 
			array = factory_everyday_goods_earnings_array
			value = vv
			add_to_temp_variable = { factory_earnings_temp = vv }
		}
		for_each_loop = { 
			array = factory_everyday_goods_spending_array
			value = vv
			add_to_temp_variable = { factory_spending_temp = vv }
		}
		set_variable = { factory_everyday_goods_profitability = factory_earnings_temp }
		subtract_from_variable ={ factory_everyday_goods_profitability = factory_spending_temp }
		divide_variable = { factory_everyday_goods_profitability = factory_earnings_temp }

		set_temp_variable = { factory_earnings_temp = 0 }
		set_temp_variable = { factory_spending_temp = 0 }
		for_each_loop = { 
			array = factory_luxury_goods_earnings_array
			value = vv
			add_to_temp_variable = { factory_earnings_temp = vv }
		}
		for_each_loop = { 
			array = factory_luxury_goods_spending_array
			value = vv
			add_to_temp_variable = { factory_spending_temp = vv }
		}
		set_variable = { factory_luxury_goods_profitability = factory_earnings_temp }
		subtract_from_variable ={ factory_luxury_goods_profitability = factory_spending_temp }
		divide_variable = { factory_luxury_goods_profitability = factory_earnings_temp }

		set_temp_variable = { factory_earnings_temp = 0 }
		set_temp_variable = { factory_spending_temp = 0 }
		for_each_loop = { 
			array = factory_industrial_goods_earnings_array
			value = vv
			add_to_temp_variable = { factory_earnings_temp = vv }
		}
		for_each_loop = { 
			array = factory_industrial_goods_spending_array
			value = vv
			add_to_temp_variable = { factory_spending_temp = vv }
		}
		set_variable = { factory_industrial_goods_profitability = factory_earnings_temp }
		subtract_from_variable ={ factory_industrial_goods_profitability = factory_spending_temp }
		divide_variable = { factory_industrial_goods_profitability = factory_earnings_temp }

		#Input %
		set_variable = { factory_raw_goods_fulfilled_percentage = 0 }
		
		set_temp_variable = { g_temp = factory_everyday_goods_raw_goods_fulfilled_percentage }
		multiply_temp_variable = { g_temp = factory_everyday_goods_raw_goods_need }
		add_to_variable = { factory_raw_goods_fulfilled_percentage = g_temp }
		
		set_temp_variable = { g_temp = factory_luxury_goods_raw_goods_fulfilled_percentage }
		multiply_temp_variable = { g_temp = factory_luxury_goods_raw_goods_need }
		add_to_variable = { factory_raw_goods_fulfilled_percentage = g_temp }
		
		set_temp_variable = { g_temp = factory_industrial_goods_raw_goods_fulfilled_percentage }
		multiply_temp_variable = { g_temp = factory_industrial_goods_raw_goods_need }
		add_to_variable = { factory_raw_goods_fulfilled_percentage = g_temp }

		divide_variable = { factory_raw_goods_fulfilled_percentage = factory_raw_goods_need }


		set_variable = { factory_industrial_goods_fulfilled_percentage = 0 }
		
		set_temp_variable = { g_temp = factory_everyday_goods_industrial_goods_fulfilled_percentage }
		multiply_temp_variable = { g_temp = factory_everyday_goods_industrial_goods_need }
		add_to_variable = { factory_industrial_goods_fulfilled_percentage = g_temp }
		
		set_temp_variable = { g_temp = factory_luxury_goods_industrial_goods_fulfilled_percentage }
		multiply_temp_variable = { g_temp = factory_luxury_goods_industrial_goods_need }
		add_to_variable = { factory_industrial_goods_fulfilled_percentage = g_temp }
		
		set_temp_variable = { g_temp = factory_industrial_goods_industrial_goods_fulfilled_percentage }
		multiply_temp_variable = { g_temp = factory_industrial_goods_industrial_goods_need }
		add_to_variable = { factory_industrial_goods_fulfilled_percentage = g_temp }
		
		divide_variable = { factory_industrial_goods_fulfilled_percentage = factory_industrial_goods_need }
	}

	update_production_maintenance = {
		#State Scope
		#Updates the production and input reqs for factories/pops
		#Should be done before setting the fulfilled %s to 0

		#RGOs Goods Production

			if = {
				limit = {
					has_state_flag = pops_rgos_valuable_goods_flag
				}
				set_variable = { pops_rgos_valuable_goods_production = rgos_workforce_amount }
				if = {
					limit = {
						check_variable = { pops_rgos_valuable_goods_production > 0.1 }
					}
					add_to_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_base_workforce_amount }
				}
				multiply_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_base_production }
				divide_variable = { pops_rgos_valuable_goods_production = 100 }

				set_temp_variable = { modifier_temp = valuable_goods_output_effect }
				add_to_temp_variable = { modifier_temp = 1 }
				multiply_variable = { pops_rgos_valuable_goods_production = modifier_temp }
				
				if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_untapped_flag
					}
					multiply_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_untapped_output_multiplier }
				}
				else_if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_plentiful_flag
					}
					multiply_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_plentiful_output_multiplier }
				}
				else_if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_depleted_flag
					}
					multiply_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_depleted_output_multiplier }
				}
				else = {
					multiply_variable = { pops_rgos_valuable_goods_production = global.pops_rgos_valuable_goods_exploited_output_multiplier }
				}

				set_variable = { pops_rgos_raw_goods_production = 0 }
				set_variable = { pops_rgos_life_goods_production = 0 }
			}
			else_if = {
				limit = {
					has_state_flag = pops_rgos_raw_goods_flag
				}
				set_variable = { pops_rgos_raw_goods_production = rgos_workforce_amount }
				if = {
					limit = {
						check_variable = { pops_rgos_raw_goods_production > 0.1 }
					}
					add_to_variable = { pops_rgos_raw_goods_production = global.pops_rgos_raw_goods_base_workforce_amount }
				}
				multiply_variable = { pops_rgos_raw_goods_production = global.pops_rgos_raw_goods_base_production }
				divide_variable = { pops_rgos_raw_goods_production = 100 }

				set_temp_variable = { modifier_temp = raw_goods_output_effect }
				add_to_temp_variable = { modifier_temp = 1 }
				multiply_variable = { pops_rgos_raw_goods_production = modifier_temp }

				set_variable = { pops_rgos_life_goods_production = 0 }
				set_variable = { pops_rgos_valuable_goods_production = 0 }

				if = {
					limit = {
						has_state_flag = pops_rgos_cash_crops_flag
					}
					multiply_variable = { pops_rgos_raw_goods_production = global.pops_rgos_cash_crops_output_multiplier }
				}
				if = {
					limit = {
						has_state_flag = pops_rgos_coal_flag
					} 
					multiply_variable = { pops_rgos_raw_goods_production = global.pops_rgos_coal_output_multiplier }
				}
				if = {
					limit = {
						has_state_flag = pops_rgos_metals_flag
					}
					multiply_variable = { pops_rgos_raw_goods_production = global.pops_rgos_metals_output_multiplier }
				}
				if = {
					limit = {
						has_state_flag = pops_rgos_petroleum_flag
					}
					multiply_variable = { pops_rgos_raw_goods_production = global.pops_rgos_petroleum_output_multiplier }
				}
			}
			else = {
				set_variable = { pops_rgos_life_goods_production = rgos_workforce_amount }
				if = {
					limit = {
						check_variable = { pops_rgos_life_goods_production > 0.1 }
					}
					add_to_variable = { pops_rgos_life_goods_production = global.pops_rgos_life_goods_base_workforce_amount }
				}
				multiply_variable = { pops_rgos_life_goods_production = global.pops_rgos_life_goods_base_production }
				divide_variable = { pops_rgos_life_goods_production = 100 }

				set_temp_variable = { modifier_temp = life_goods_output_effect }
				add_to_temp_variable = { modifier_temp = 1 }
				multiply_variable = { pops_rgos_life_goods_production = modifier_temp }

				set_variable = { pops_rgos_raw_goods_production = 0 }
				set_variable = { pops_rgos_valuable_goods_production = 0 }

				if = {
					limit = {
						has_state_flag = pops_rgos_cash_crops_flag
					}
					multiply_variable = { pops_rgos_life_goods_production = global.pops_rgos_cash_crops_output_multiplier }
				}
			}
		#

		#Artisans Goods Production
			#Get excess demand after industrial production
			#Divide it from the production per artisan
			#Get ratios
			#Use those for artisan production
			set_temp_variable = { artisans_everyday_goods_distribution_temp = everyday_goods_price }
			multiply_temp_variable = { artisans_everyday_goods_distribution_temp = global.pops_artisans_everyday_goods_base_production } #TODO - Change this to actual production
			if = {
				limit = {
					check_variable = { artisans_everyday_goods_distribution_temp < 0.001 }
				}
				set_temp_variable = { artisans_everyday_goods_distribution_temp = 0.001 }
			}
			
			set_temp_variable = { artisans_luxury_goods_distribution_temp = luxury_goods_price }
			multiply_temp_variable = { artisans_luxury_goods_distribution_temp = global.pops_artisans_luxury_goods_base_production } #TODO - Change this to actual production
			if = {
				limit = {
					check_variable = { artisans_luxury_goods_distribution_temp < 0.001 }
				}
				set_temp_variable = { artisans_luxury_goods_distribution_temp = 0.001 }
			}

			set_temp_variable = { artisans_industrial_goods_distribution_temp = industrial_goods_price }
			multiply_temp_variable = { artisans_industrial_goods_distribution_temp = global.pops_artisans_industrial_goods_base_production } #TODO - Change this to actual production
			if = {
				limit = {
					check_variable = { artisans_industrial_goods_distribution_temp < 0.001 }
				}
				set_temp_variable = { artisans_industrial_goods_distribution_temp = 0.001 }
			}

			set_temp_variable = { total_distribution_temp = artisans_everyday_goods_distribution_temp }
			add_to_temp_variable = { total_distribution_temp = artisans_luxury_goods_distribution_temp }
			add_to_temp_variable = { total_distribution_temp = artisans_industrial_goods_distribution_temp }

			divide_temp_variable = { artisans_everyday_goods_distribution_temp = total_distribution_temp }
			divide_temp_variable = { artisans_luxury_goods_distribution_temp = total_distribution_temp }
			divide_temp_variable = { artisans_industrial_goods_distribution_temp = total_distribution_temp }

			set_variable = { pops_artisans_everyday_goods_amount = artisans_workforce_amount }
			set_variable = { pops_artisans_luxury_goods_amount = artisans_workforce_amount }
			set_variable = { pops_artisans_industrial_goods_amount = artisans_workforce_amount }

			multiply_variable = { pops_artisans_everyday_goods_amount = artisans_everyday_goods_distribution_temp }
			multiply_variable = { pops_artisans_luxury_goods_amount = artisans_luxury_goods_distribution_temp }
			multiply_variable = { pops_artisans_industrial_goods_amount = artisans_industrial_goods_distribution_temp }
			
			if = {
				limit = {
					check_variable = { pops_artisans_everyday_goods_amount > 0.01 }
				}
				add_to_variable = { pops_artisans_everyday_goods_amount = global.pops_artisans_everyday_goods_base_workforce_amount }
			}
			if = {
				limit = {
					check_variable = { pops_artisans_everyday_goods_amount > 0.01 }
				}
				add_to_variable = { pops_artisans_luxury_goods_amount = global.pops_artisans_luxury_goods_base_workforce_amount }
			}
			if = {
				limit = {
					check_variable = { pops_artisans_everyday_goods_amount > 0.01 }
				}
				add_to_variable = { pops_artisans_industrial_goods_amount = global.pops_artisans_industrial_goods_base_workforce_amount }
			}

			set_variable = { pops_artisans_everyday_goods_production = pops_artisans_everyday_goods_amount }
			multiply_variable = { pops_artisans_everyday_goods_production = global.pops_artisans_everyday_goods_base_production } #TODO - Change this to actual production
			divide_variable = { pops_artisans_everyday_goods_production = 100 }

			set_variable = { pops_artisans_luxury_goods_production = pops_artisans_luxury_goods_amount }
			multiply_variable = { pops_artisans_luxury_goods_production = global.pops_artisans_luxury_goods_base_production } #TODO - Change this to actual production
			divide_variable = { pops_artisans_luxury_goods_production = 100 }

			set_variable = { pops_artisans_industrial_goods_production = pops_artisans_industrial_goods_amount }
			multiply_variable = { pops_artisans_industrial_goods_production = global.pops_artisans_industrial_goods_base_production } #TODO - Change this to actual production
			divide_variable = { pops_artisans_industrial_goods_production = 100 }

			#Needs
			set_variable = { pops_artisans_everyday_goods_raw_goods_need = global.pops_artisans_everyday_goods_raw_goods_base_need }
			multiply_variable = { pops_artisans_everyday_goods_raw_goods_need = pops_artisans_everyday_goods_production }

			set_variable = { pops_artisans_luxury_goods_raw_goods_need = global.pops_artisans_luxury_goods_raw_goods_base_need }
			multiply_variable = { pops_artisans_luxury_goods_raw_goods_need = pops_artisans_luxury_goods_production }

			set_variable = { pops_artisans_industrial_goods_raw_goods_need = global.pops_artisans_industrial_goods_raw_goods_base_need }
			multiply_variable = { pops_artisans_industrial_goods_raw_goods_need = pops_artisans_industrial_goods_production }

			set_variable = { pops_artisans_raw_goods_need = pops_artisans_everyday_goods_raw_goods_need }
			add_to_variable = { pops_artisans_raw_goods_need = pops_artisans_luxury_goods_raw_goods_need }
			add_to_variable = { pops_artisans_raw_goods_need = pops_artisans_industrial_goods_raw_goods_need }

			#Fulfilled
			multiply_variable = { pops_artisans_everyday_goods_production = pops_artisans_raw_goods_fulfilled_percentage }
			multiply_variable = { pops_artisans_luxury_goods_production = pops_artisans_raw_goods_fulfilled_percentage }
			multiply_variable = { pops_artisans_industrial_goods_production = pops_artisans_raw_goods_fulfilled_percentage }

		#	

		#Professionals Services Production
			set_variable = { pops_services_workforce_amount = professionals_workforce_amount }
			set_variable = { pops_professionals_services_production = professionals_workforce_amount }
			multiply_variable = { pops_professionals_services_production = global.pops_professionals_services_base_production }
			divide_variable = { pops_professionals_services_production = 100 }
			set_variable = { pops_services_production = pops_professionals_services_production }
		#
		#Clerks Services Production
			add_to_variable = { pops_services_workforce_amount = clerks_workforce_amount }
			set_variable = { pops_clerks_services_production = clerks_workforce_amount }
			if = {
				limit = {
					check_variable = { pops_clerks_services_production > 0.1 }
				}
				add_to_variable = { pops_clerks_services_production = global.pops_clerks_base_workforce_amount }
			}
			multiply_variable = { pops_clerks_services_production = global.pops_clerks_services_base_production }
			divide_variable = { pops_clerks_services_production = 100 }
			add_to_variable = { pops_services_production = pops_clerks_services_production }

			set_temp_variable = { modifier_temp = services_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { pops_services_production = modifier_temp}
		#

		#Factories Production
			set_temp_variable = { specialists_bonus_multiplier = 1 }
			set_temp_variable = { specialists_percentage_temp = specialists_workforce_amount }
			divide_temp_variable = { specialists_percentage_temp = factory_employment_amount }
			multiply_temp_variable = { specialists_percentage_temp = global.pops_specialists_production_bonus }
			add_to_temp_variable = { specialists_bonus_multiplier = specialists_percentage_temp }

			#Throughput
			set_variable = { factory_everyday_goods_production = factory_employment_amount_per_factory }
			multiply_variable = { factory_everyday_goods_production = global.factory_everyday_goods_base_production }
			multiply_variable = { factory_everyday_goods_production = factory_everyday_goods_amount }
			multiply_variable = { factory_everyday_goods_production = specialists_bonus_multiplier }
			divide_variable = { factory_everyday_goods_production = 100 }
			multiply_variable = { factory_everyday_goods_production = factory_employment_percentage }
			divide_variable = { factory_everyday_goods_production = 100 }
			set_temp_variable = { modifier_temp = factory_everyday_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_everyday_goods_production = modifier_temp }

			set_variable = { factory_luxury_goods_production = factory_employment_amount_per_factory }
			multiply_variable = { factory_luxury_goods_production = global.factory_luxury_goods_base_production }
			multiply_variable = { factory_luxury_goods_production = factory_luxury_goods_amount }
			multiply_variable = { factory_luxury_goods_production = specialists_bonus_multiplier }
			divide_variable = { factory_luxury_goods_production = 100 }
			multiply_variable = { factory_luxury_goods_production = factory_employment_percentage }
			divide_variable = { factory_luxury_goods_production = 100 }
			set_temp_variable = { modifier_temp = factory_luxury_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_luxury_goods_production = modifier_temp }

			set_variable = { factory_industrial_goods_production = factory_employment_amount_per_factory }
			multiply_variable = { factory_industrial_goods_production = global.factory_industrial_goods_base_production }
			multiply_variable = { factory_industrial_goods_production = factory_industrial_goods_amount }
			multiply_variable = { factory_industrial_goods_production = specialists_bonus_multiplier }
			divide_variable = { factory_industrial_goods_production = 100 }
			multiply_variable = { factory_industrial_goods_production = factory_employment_percentage }
			divide_variable = { factory_industrial_goods_production = 100 }
			set_temp_variable = { modifier_temp = factory_industrial_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_industrial_goods_production = modifier_temp }

			#Maintenance
			set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
			add_to_temp_variable = { modifier_temp = 1 }

			set_variable = { factory_everyday_goods_industrial_goods_need = factory_everyday_goods_production }
			multiply_variable = { factory_everyday_goods_industrial_goods_need = global.factory_industrial_goods_base_need }
			multiply_variable = { factory_everyday_goods_industrial_goods_need = modifier_temp }
			
			set_variable = { factory_luxury_goods_industrial_goods_need = factory_luxury_goods_production }
			multiply_variable = { factory_luxury_goods_industrial_goods_need = global.factory_industrial_goods_base_need }
			multiply_variable = { factory_luxury_goods_industrial_goods_need = modifier_temp }
			
			set_variable = { factory_industrial_goods_industrial_goods_need = factory_industrial_goods_production }
			multiply_variable = { factory_industrial_goods_industrial_goods_need = global.factory_industrial_goods_base_need }
			multiply_variable = { factory_industrial_goods_industrial_goods_need = modifier_temp }

			set_variable = { factory_industrial_goods_need = factory_everyday_goods_industrial_goods_need }
			add_to_variable = { factory_industrial_goods_need = factory_luxury_goods_industrial_goods_need }
			add_to_variable = { factory_industrial_goods_need = factory_industrial_goods_industrial_goods_need }

			#Input
			set_variable = { factory_everyday_goods_raw_goods_need = global.factory_everyday_goods_raw_goods_base_need }
			multiply_variable = { factory_everyday_goods_raw_goods_need = factory_everyday_goods_production }
			set_temp_variable = { modifier_temp = factory_everyday_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_everyday_goods_raw_goods_need = modifier_temp }

			set_variable = { factory_luxury_goods_raw_goods_need = global.factory_luxury_goods_raw_goods_base_need }
			multiply_variable = { factory_luxury_goods_raw_goods_need = factory_luxury_goods_production }
			set_temp_variable = { modifier_temp = factory_luxury_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_luxury_goods_raw_goods_need = modifier_temp }

			set_variable = { factory_industrial_goods_raw_goods_need = global.factory_industrial_goods_raw_goods_base_need }
			multiply_variable = { factory_industrial_goods_raw_goods_need = factory_industrial_goods_production }
			set_temp_variable = { modifier_temp = factory_industrial_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_industrial_goods_raw_goods_need = modifier_temp }

			set_variable = { factory_raw_goods_need = factory_everyday_goods_raw_goods_need }
			add_to_variable = { factory_raw_goods_need = factory_luxury_goods_raw_goods_need }
			add_to_variable = { factory_raw_goods_need = factory_industrial_goods_raw_goods_need }

			#Output
			set_temp_variable = { fulfilled_temp = factory_everyday_goods_raw_goods_fulfilled_percentage }
			add_to_temp_variable = { fulfilled_temp = factory_everyday_goods_industrial_goods_fulfilled_percentage }
			divide_temp_variable = { fulfilled_temp = 2 }
			multiply_variable = { factory_everyday_goods_production = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_everyday_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_everyday_goods_production = modifier_temp }

			set_temp_variable = { fulfilled_temp = factory_luxury_goods_raw_goods_fulfilled_percentage }
			add_to_temp_variable = { fulfilled_temp = factory_luxury_goods_industrial_goods_fulfilled_percentage }
			divide_temp_variable = { fulfilled_temp = 2 }
			multiply_variable = { factory_luxury_goods_production = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_luxury_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_luxury_goods_production = modifier_temp }

			set_temp_variable = { fulfilled_temp = factory_industrial_goods_raw_goods_fulfilled_percentage }
			add_to_temp_variable = { fulfilled_temp = factory_industrial_goods_industrial_goods_fulfilled_percentage }
			divide_temp_variable = { fulfilled_temp = 2 }
			multiply_variable = { factory_industrial_goods_production = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_industrial_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_industrial_goods_production = modifier_temp }
		#

		#Infrastructure Maintenance
			set_variable = { infrastructure_industrial_goods_need = infrastructure_level }
			multiply_variable = { infrastructure_industrial_goods_need = global.infrastructure_industrial_goods_base_need }

			set_temp_variable = { infra_need_temp = infrastructure_level }
			add_to_temp_variable = { infra_need_temp = 1 }
			multiply_temp_variable = { infra_need_temp = infrastructure_level }
			divide_temp_variable = { infra_need_temp = 2 }
			multiply_temp_variable = { infra_need_temp = global.infrastructure_industrial_goods_base_need_increase_per_level }
			add_to_variable = { infrastructure_industrial_goods_need = infra_need_temp }

			set_temp_variable = { infra_need_temp = infrastructure_level }
			multiply_temp_variable = { infra_need_temp = infra_need_temp }
			multiply_temp_variable = { infra_need_temp = global.infrastructure_industrial_goods_base_need_squared }
			add_to_variable = { infrastructure_industrial_goods_need = infra_need_temp }

			set_temp_variable = { infra_need_temp = infrastructure_level }
			multiply_temp_variable = { infra_need_temp = infrastructure_level }
			multiply_temp_variable = { infra_need_temp = global.infrastructure_industrial_goods_base_need_cubed }
			multiply_temp_variable = { infra_need_temp = infrastructure_level }
			add_to_variable = { infrastructure_industrial_goods_need = infra_need_temp }

			set_temp_variable = { modifier_temp = infrastructure_maintenance_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { infrastructure_industrial_goods_need = modifier_temp }
		#

 		#RGO Mechanization Maintenance
			set_variable = { pops_rgos_mechanization_industrial_goods_need = global.pops_rgos_mechanization_industrial_goods_base_need }
			multiply_variable = { pops_rgos_mechanization_industrial_goods_need = rgos_workforce_amount }
			divide_variable = { pops_rgos_mechanization_industrial_goods_need = 100 }
			multiply_variable = { pops_rgos_mechanization_industrial_goods_need = rgos_mechanization_percentage }
			divide_variable = { pops_rgos_mechanization_industrial_goods_need = 100 }

			#Expansion Reqs
				if = {
					limit = {
						check_variable = { rgos_mechanization_percentage < rgos_max_mechanization_percentage }
					}
					set_temp_variable = { percent_temp = rgos_max_mechanization_percentage }
					subtract_from_temp_variable = { percent_temp = rgos_mechanization_percentage }
					clamp_temp_variable = {
						var = percent_temp
						max = 1
						min = 0
					}
					set_variable = { pops_rgos_mechanization_expansion_industrial_goods_need = percent_temp }
					multiply_variable = { pops_rgos_mechanization_expansion_industrial_goods_need = rgos_workforce_amount }
					divide_variable = { pops_rgos_mechanization_expansion_industrial_goods_need = 100 }
					multiply_variable = { pops_rgos_mechanization_expansion_industrial_goods_need = global.pops_rgos_mechanization_expansion_industrial_goods_base_need }
				}
				else = {
					set_variable = { pops_rgos_mechanization_expansion_industrial_goods_need = 0 }
				}
			#
		#

		#State Category Maintenance

		#
	}

	create_pie_chart_pop_type = {
		# this creates a pie chart of popularities - can be easily adapted to show anything that adds up to 100%
		# This code is much different from Yard's, but I'll credit him anyway
		# State Scope

		clear_array = pie_chart_pop_type
		resize_array = {
			array = pie_chart_pop_type
			value = 1 # 1 is value for RGO frame
			size = 100 # 100 pieces, each percent is one piece
		}

		clear_temp_array = pop_types_percentage
		add_to_temp_array = { pop_types_percentage = 0 }
		add_to_temp_array = { pop_types_percentage = rgos_percentage }
		add_to_temp_array = { pop_types_percentage = artisans_percentage }
		add_to_temp_array = { pop_types_percentage = craftsmen_percentage }
		add_to_temp_array = { pop_types_percentage = specialists_percentage }
		add_to_temp_array = { pop_types_percentage = clerks_percentage }
		add_to_temp_array = { pop_types_percentage = professionals_percentage }
		add_to_temp_array = { pop_types_percentage = soldiers_percentage }
		add_to_temp_array = { pop_types_percentage = officers_percentage }
		add_to_temp_array = { pop_types_percentage = capitalists_percentage }
		add_to_temp_array = { pop_types_percentage = aristocrats_percentage }

		set_temp_variable = { pie_pop = 0 }
		set_temp_variable = { excess_pop = 0 }
		for_each_loop = {
			array = pop_types_percentage
			index = rr
			value = vv

			set_variable = { last_idx = pie_pop }
			set_temp_variable = { pie_pop = vv }
			round_temp_variable = pie_pop

			#Excess
			set_temp_variable = { excess_temp = vv }
			subtract_from_temp_variable = { excess_temp = pie_pop }
			add_to_temp_variable = { excess_pop = pie_pop }
			if = {
				limit = {
					NOT = { check_variable = { excess_pop < 1 } }
				}
				subtract_from_temp_variable = { excess_pop = 1 }
				add_to_temp_variable = { pie_pop = 1 }
			}
			
			add_to_temp_variable = { pie_pop = last_idx }
			subtract_from_temp_variable = { pie_pop = 1 }
			if = {
				limit = {
					check_variable = { pie_pop > 100 }
				}
				set_temp_variable = { pie_pop = 100 }
			}
			for_loop_effect = {
				start = last_idx
				end = pie_pop
				set_variable = { pie_chart_pop_type^v = rr }
			}
			set_variable = { last_idx = pie_pop }
		}
		clear_variable = last_idx

		add_to_variable = { update_state_econ_window = 1 }
	}

	create_state_gdp_graph = {
		set_variable = { gdp_graph_min = 2000000 }
		set_variable = { gdp_graph_max = 0 }
		clr_state_flag = gdp_graph_thousands
		clear_array = gdp_graph_amount_array
		clear_array = gdp_graph_color_array
		clear_array = gdp_graph_y_array

		for_each_loop = {
			array = annual_gdp_amount_array
			value = vv
			index = ii
			if = {
				limit = {
					check_variable = { vv > gdp_graph_max }
				}
				set_variable = { gdp_graph_max = vv }
			}
			if = {
				limit = {
					check_variable = { vv < gdp_graph_min }
				}
				set_variable = { gdp_graph_min = vv }
			}
			
			if = {
				limit = {
					check_variable = { ii > 0 }
				}
				set_temp_variable = { prev_i = ii }
				subtract_from_temp_variable = { prev_i = 1 }

				set_temp_variable = { value_temp = vv }
				add_to_temp_variable = { value_temp = annual_gdp_amount_array^prev_i }
				divide_temp_variable = { value_temp = 2 }
				add_to_array = { gdp_graph_amount_array = value_temp }

				if = {
					limit = {
						check_variable = { vv > annual_gdp_amount_array^prev_i }
					}
					add_to_array = { gdp_graph_color_array = 1 }
					add_to_array = { gdp_graph_color_array = 1 }
				}
				else_if = {
					limit = {
						check_variable = { vv = annual_gdp_amount_array^prev_i }
					}
					add_to_array = { gdp_graph_color_array = 2 }
					add_to_array = { gdp_graph_color_array = 2 }
				}
				else = {
					add_to_array = { gdp_graph_color_array = 3 }
					add_to_array = { gdp_graph_color_array = 3 }
				}

				add_to_array = { gdp_graph_amount_array = vv }
			}
			else = {
				add_to_array = { gdp_graph_amount_array = vv }
				add_to_array = { gdp_graph_color_array = 2 }
			}
		}

		#Creating the Graph
		for_each_loop = {
			array = gdp_graph_amount_array
			value = vv
			index = ii

			set_temp_variable = { gdp_per_y_temp = gdp_graph_max }
			subtract_from_temp_variable = { gdp_per_y_temp = gdp_graph_min }
			divide_temp_variable = { gdp_per_y_temp = -75 } #75 Pixels, making it negative b/c going from top to bottom

			set_temp_variable = { y_temp = vv }
			subtract_from_temp_variable = { y_temp = gdp_graph_max }
			divide_temp_variable = { y_temp = gdp_per_y_temp }
			round_temp_variable = y_temp
			if = {
				limit = {
					check_variable = { y_temp > 76 }
				}
				set_temp_variable = { y_temp = 76 }
			}
			add_to_array = { gdp_graph_y_array = y_temp }
		}



		#Correcting the max/min
		if = {
			limit = {
				check_variable = { gdp_graph_max > 1000 } #gdp_graph_min should always be less than max, so there's no point to checking it
			}
			divide_variable = { gdp_graph_min = 1000 }
			divide_variable = { gdp_graph_max = 1000 }
			set_state_flag = gdp_graph_thousands
		}
		else_if = {
			limit = {
				check_variable = { gdp_graph_max > 100 }
			}
			divide_variable = { gdp_graph_min = 100 } #This gets rid of some decimals so there's only up to 4 digits
			divide_variable = { gdp_graph_max = 100 }
			multiply_variable = { gdp_graph_min = 100 }
			multiply_variable = { gdp_graph_max = 100 }
		}
		else_if = {
			limit = {
				check_variable = { gdp_graph_max > 10 }
			}
			divide_variable = { gdp_graph_min = 10 } #This gets rid of some decimals so there's only up to 4 digits
			divide_variable = { gdp_graph_max = 10 }
			multiply_variable = { gdp_graph_min = 10 }
			multiply_variable = { gdp_graph_max = 10 }
		}
		add_to_variable = { update_state_econ_window = 1 }
	}

	
	national_bank_update = {
		#Country Scope

		#Amount of money that can be loaned
			set_variable = { pops_savings_k = 0 }
			every_controlled_state = {
				set_temp_variable = { pops_savings_temp = pops_savings }
				divide_temp_variable = { pops_savings_temp = 1000 }
				add_to_variable = { PREV.pops_savings_k = pops_savings_temp }
			}
			set_variable = { national_bank_amount_k = pops_savings_k }
			multiply_variable = { national_bank_amount_k = 10 }
		#

		#Money scarcity
			#Go through borrowers to get loan amounts - TODO
				#Home Country
				set_variable = { national_bank_amount_lent_k = 0 }

				#Foreign Countries/Corporations
				set_temp_variable = { money_lent_temp = 0 }
				for_each_loop = {
					array = money_lent_amount
					value = m
					add_to_temp_variable = { money_lent_temp = m }
				}
				divide_temp_variable = { money_lent_temp = 1000 }
				add_to_variable = { national_bank_amount_lent_k = money_lent_temp }
			#

			set_variable = { national_bank_amount_left_k = national_bank_amount_k }
			subtract_from_variable = { national_bank_amount_left_k = national_bank_amount_lent_k }

			if = {
				limit = {
					check_variable = { national_bank_amount_left_k < 0 }
				}
				set_variable = { national_bank_interest_from_scarcity = 1 }
			}
			else = {
				set_variable = { national_bank_interest_from_scarcity = national_bank_amount_lent_k }
				divide_variable = { national_bank_interest_from_scarcity = national_bank_amount_k }
			}
			multiply_variable = { national_bank_interest_from_scarcity = global.loan_scarcity_rate }

			set_variable = { national_bank_international_interest_rate = national_bank_interest_from_scarcity }
			add_to_variable = { national_bank_international_interest_rate = global.base_international_interest_rate } #National Banks prefer to lend to their own country
		#
	}
	national_debt_update = {
		#Country Scope

		
		#Money owed to foreign countries & interest
			clear_array = debt_to_bank_interest_rate
			set_variable = { debt_to_foreign_countries = 0 }
			set_variable = { debt_to_national_bank = 0 }
			for_each_loop = {
				array = debt_to_bank_amount
				value = m
				index = c
				if = {
					limit = {
						tag = debt_to_bank_country^c
					}
					set_variable = { debt_to_national_bank = m }
					set_temp_variable = { interest_temp = national_bank_interest_from_scarcity }
					add_to_temp_variable = { interest_temp = credit_rating_interest }
					add_to_array = { debt_to_bank_interest_rate = interest_temp }
				}
				else = {
					add_to_variable = { debt_to_foreign_countries = m }
					set_temp_variable = { country_temp = debt_to_bank_country^c }
					set_temp_variable = { interest_temp = country_temp:national_bank_international_interest_rate }
					add_to_temp_variable = { interest_temp = credit_rating_interest }
					add_to_array = { debt_to_bank_interest_rate = interest_temp }
				}
			}
		#

		set_variable = { national_debt = debt_to_national_bank }
		add_to_variable = { national_debt = debt_to_foreign_countries }

		#Total Interest Rate
		set_variable = { national_debt_interest_rate = national_debt_interest }
		multiply_variable = { national_debt_interest_rate = 1200 }
		divide_variable = { national_debt_interest_rate = national_debt }

		#Max Repayment Amount (Used in Loc)
		set_variable = { national_debt_max_repayment_amount = treasury }
		if = {
			limit = { 
				check_variable = { national_debt_max_repayment_amount > national_debt }
			}
			set_variable = { national_debt_max_repayment_amount = national_debt }
		}

		#Sorting the debt to bank arrays by interest rate
			
			set_temp_variable = { length_temp = debt_to_bank_interest_rate^num }
			if = {
				limit = {
					check_variable = { length_temp > 1 }
				}
				for_loop_effect = {
					start = 0
					end = length_temp
					add = 1
					value = v
					find_highest_in_array = {
						array = debt_to_bank_interest_rate
						value = highest_value
						index = highest_index
					}
					#Interest Rate
					add_to_temp_array = {
						array = debt_to_bank_interest_rate_temp
						value = highest_value
					}
					remove_from_array = {
						array = debt_to_bank_interest_rate
						index = highest_index
					}
					#Country
					add_to_temp_array = {
						array = debt_to_bank_country_temp
						value = debt_to_bank_country^highest_index
					}
					remove_from_array = {
						array = debt_to_bank_country
						index = highest_index
					}
					#Amount
					add_to_temp_array = {
						array = debt_to_bank_amount_temp
						value = debt_to_bank_amount^highest_index
					}
					remove_from_array = {
						array = debt_to_bank_amount
						index = highest_index
					}

				}
				for_loop_effect = {
					start = 0
					end = length_temp
					add = 1
					value = v
					break = b
					add_to_array = {
						array = debt_to_bank_interest_rate
						value = debt_to_bank_interest_rate_temp^v
					}
					add_to_array = {
						array = debt_to_bank_country
						value = debt_to_bank_country_temp^v
					}
					add_to_array = {
						array = debt_to_bank_amount
						value = debt_to_bank_amount_temp^v
					}
				}
			}
		#
	}

	global_bank_update = {
		#Country Scope
		#Note: This loops through every country. Use it sparingly
		
		clear_array = global_bank_countries #Sorted by international interest rate
		clear_array = global_bank_interest_rate #Sorted by international interest rate
		for_each_loop = {
			array = global.global_bank_countries
			index = gi
			#Loops through the global econ array and adds countries to the global bank array, sorting by international interest rate

			if = {
				limit = {
					tag = global.global_bank_countries^gi
				}
				#Goes through the list to add it to the correct place
				set_temp_variable = { interest_temp = national_bank_interest_from_scarcity }
				add_to_temp_variable = { interest_temp = credit_rating_interest }
				for_each_loop = {
					array = global_bank_countries
					index = ii
					value = country_temp
					break = bb

					if = {
						limit = {
							check_variable = { global_bank_interest_rate^ii > interest_temp }
						}
						add_to_array = { 
							array = global_bank_countries 
							value = THIS
							index = ii
						}
						add_to_array = { 
							array = global_bank_interest_rate 
							value = interest_temp
							index = ii
						}
						set_temp_variable = { bb = 1 }
					}
				}
			}
			else = {
				add_to_array = { global_bank_countries = global.global_bank_countries^gi }
				add_to_array = { global_bank_interest_rate = global.global_bank_interest_rate^gi }
				set_temp_variable = { index_temp = global_bank_interest_rate^num }
				subtract_from_temp_variable = { index_temp = 1 }
				add_to_variable = { global_bank_interest_rate^index_temp = credit_rating_interest }
				set_variable = { int_t = global_bank_interest_rate^index_temp }				
			}
		}
		if = {
			limit = {
				NOT = { is_in_array = { global_bank_countries = THIS } }
			}
			#Goes through the list to add it to the correct place
			set_temp_variable = { interest_temp = national_bank_interest_from_scarcity }
			add_to_temp_variable = { interest_temp = credit_rating_interest }
			for_each_loop = {
				array = global_bank_countries
				index = ii
				value = country_temp
				break = bb

				if = {
					limit = {
						check_variable = { global_bank_interest_rate^ii > interest_temp }
					}
					add_to_array = { 
						array = global_bank_countries 
						value = THIS
						index = ii
					}
					add_to_array = { 
						array = global_bank_interest_rate 
						value = interest_temp
						index = ii
					}
					set_temp_variable = { bb = 1 }
				}
			}
			if = {
				limit = {
					check_variable = { bb = 0 }
				}
				add_to_array = { 
					array = global_bank_countries 
					value = THIS
				}
				add_to_array = { 
					array = global_bank_interest_rate 
					value = interest_temp
				}
			}
		}
	}

	battalion_count_update = {
		# Land:
		#	Infantry
		#	Militia
		#	Artillery
		#	Cavalry
		#	Mobile
		#	Armor
		#	Robotic
		#	Support
		#	Total
		#	Excess (For when people add unit types without adding to this list)
		
		# Naval:
		#	Screen
		#	Capital
		#	Submarine
		#	Total
		#	Excess (For when people add ship types without adding to this list)

		# There is also a weighted_ count, for costing purposes

		#For air, use num_deployed_planes

		set_variable = { infantry_battalions = num_battalions_with_type@infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@cold_war_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@pa_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@bicycle_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@feudal_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@line_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@redcoat_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@guard_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@great_war_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@light_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@tribal_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@state_levy_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@native_mountaineers }
		add_to_variable = { infantry_battalions = num_battalions_with_type@mounted_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@early_marine }
		add_to_variable = { infantry_battalions = num_battalions_with_type@marine }
		add_to_variable = { infantry_battalions = num_battalions_with_type@kustjagare_battalion }
		add_to_variable = { infantry_battalions = num_battalions_with_type@mountaineers }
		add_to_variable = { infantry_battalions = num_battalions_with_type@shock_troops }

		set_variable = { militia_battalions = num_battalions_with_type@spanish_militia_infantry }
		add_to_variable = { militia_battalions = num_battalions_with_type@state_militia_infantry }
		add_to_variable = { militia_battalions = num_battalions_with_type@colonial_militia_infantry }
		add_to_variable = { militia_battalions = num_battalions_with_type@dutch_colonial_militia_infantry }
		add_to_variable = { militia_battalions = num_battalions_with_type@irregular_infantry }
		add_to_variable = { militia_battalions = num_battalions_with_type@armed_peasants }

		set_variable = { artillery_battalions = num_battalions_with_type@anti_tank_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@mot_anti_tank_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@anti_air_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@mot_anti_air_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@cannon_artillery }
		add_to_variable = { artillery_battalions = num_battalions_with_type@cannon_artillery_towed }
		add_to_variable = { artillery_battalions = num_battalions_with_type@howitzer_artillery }
		add_to_variable = { artillery_battalions = num_battalions_with_type@howitzer_artillery_towed }
		add_to_variable = { artillery_battalions = num_battalions_with_type@siege_artillery }
		add_to_variable = { artillery_battalions = num_battalions_with_type@siege_artillery_towed }
		add_to_variable = { artillery_battalions = num_battalions_with_type@artillery_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@mot_artillery_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@rocket_artillery_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@mot_rocket_artillery_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@motorized_rocket_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@railway_gun }
		
		set_variable = { cavalry_battalions = num_battalions_with_type@tribal_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@tribal_camel_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@tribal_pistoleer_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@state_levy_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@feudal_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@light_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@heavy_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@uhlans }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@camel_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@dragoon }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@great_war_cavalry }

		set_variable = { mobile_battalions = num_battalions_with_type@motorized }
		add_to_variable = { mobile_battalions = num_battalions_with_type@mechanized }
		add_to_variable = { mobile_battalions = num_battalions_with_type@airborne }
		add_to_variable = { mobile_battalions = num_battalions_with_type@amphibious_mechanized }
		add_to_variable = { mobile_battalions = num_battalions_with_type@armored_car }
		add_to_variable = { mobile_battalions = num_battalions_with_type@technicals }

		set_variable = { armor_battalions = num_battalions_with_type@amphibious_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@light_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@medium_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@heavy_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@modern_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@light_sp_anti_air_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@medium_sp_anti_air_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@light_sp_artillery_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@medium_sp_artillery_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@light_tank_destroyer_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@medium_tank_destroyer_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@modern_tank_destroyer_brigade }

		set_variable = { robotic_battalions = num_battalions_with_type@light_robots }
		add_to_variable = { robotic_battalions = num_battalions_with_type@medium_robots }
		add_to_variable = { robotic_battalions = num_battalions_with_type@heavy_robots }
		add_to_variable = { robotic_battalions = num_battalions_with_type@armor_walker }

		set_variable = { support_battalions = num_battalions_with_type@anti_tank }
		add_to_variable = { support_battalions = num_battalions_with_type@cannon_artillery_support }
		add_to_variable = { support_battalions = num_battalions_with_type@cannon_artillery_towed_support }
		add_to_variable = { support_battalions = num_battalions_with_type@howitzer_artillery_support }
		add_to_variable = { support_battalions = num_battalions_with_type@howitzer_artillery_towed_support }
		add_to_variable = { support_battalions = num_battalions_with_type@siege_artillery_support }
		add_to_variable = { support_battalions = num_battalions_with_type@machine_gun_company }
		add_to_variable = { support_battalions = num_battalions_with_type@artillery }
		add_to_variable = { support_battalions = num_battalions_with_type@rocket_artillery }
		add_to_variable = { support_battalions = num_battalions_with_type@engineer }
		add_to_variable = { support_battalions = num_battalions_with_type@field_hospital }
		add_to_variable = { support_battalions = num_battalions_with_type@logistics_company }
		add_to_variable = { support_battalions = num_battalions_with_type@maintenance_company }
		add_to_variable = { support_battalions = num_battalions_with_type@military_police }
		add_to_variable = { support_battalions = num_battalions_with_type@recon }
		add_to_variable = { support_battalions = num_battalions_with_type@wired_signal_company }
		add_to_variable = { support_battalions = num_battalions_with_type@signal_company }
		add_to_variable = { support_battalions = num_battalions_with_type@bicycle_signal_company }
		add_to_variable = { support_battalions = num_battalions_with_type@motorcycle_signal_company }
		add_to_variable = { support_battalions = num_battalions_with_type@steam_car_support_company }
		add_to_variable = { support_battalions = num_battalions_with_type@flamethrower_support_company }
		add_to_variable = { support_battalions = num_battalions_with_type@sniper_team_support }
		add_to_variable = { support_battalions = num_battalions_with_type@armor_train_company }

		set_variable = { total_battalions = infantry_battalions }
		add_to_variable = { total_battalions = artillery_battalions }
		add_to_variable = { total_battalions = cavalry_battalions }
		add_to_variable = { total_battalions = mobile_battalions }
		add_to_variable = { total_battalions = armor_battalions }
		add_to_variable = { total_battalions = robotic_battalions }
		add_to_variable = { total_battalions = support_battalions }

		set_variable = { excess_battalions = total_battalions }
		subtract_from_variable = { excess_battalions = num_battalions }


		set_variable = { screen_ships = num_ships_with_type@corvette }
		add_to_variable = { screen_ships = num_ships_with_type@destroyer }
		add_to_variable = { screen_ships = num_ships_with_type@light_cruiser }
		add_to_variable = { screen_ships = num_ships_with_type@monitor }
		add_to_variable = { screen_ships = num_ships_with_type@primitive_rowboat }
		add_to_variable = { screen_ships = num_ships_with_type@torpedo_boat }
		
		set_variable = { capital_ships = num_ships_with_type@battle_cruiser }
		add_to_variable = { capital_ships = num_ships_with_type@battleship }
		add_to_variable = { capital_ships = num_ships_with_type@carrier }
		add_to_variable = { capital_ships = num_ships_with_type@dreadnought }
		add_to_variable = { capital_ships = num_ships_with_type@cruiser }
		add_to_variable = { capital_ships = num_ships_with_type@frigate }
		add_to_variable = { capital_ships = num_ships_with_type@gunboat }
		add_to_variable = { capital_ships = num_ships_with_type@heavy_cruiser }
		add_to_variable = { capital_ships = num_ships_with_type@ironclad }
		add_to_variable = { capital_ships = num_ships_with_type@lineship }
		add_to_variable = { capital_ships = num_ships_with_type@primitive_sailing_boat }
		
		set_variable = { submarine_ships = num_ships_with_type@coastal_submarine }
		add_to_variable = { submarine_ships = num_ships_with_type@submarine }

		set_variable = { total_ships = screen_ships }
		add_to_variable = { total_ships = capital_ships }
		add_to_variable = { total_ships = submarine_ships }

		set_variable = { excess_ships = num_ships }
		subtract_from_variable = { excess_ships = total_ships }

		#WEIGHTED
		set_variable = { infantry_battalions_weighted = num_battalions_with_type@infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@cold_war_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@cold_war_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@pa_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@bicycle_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@bicycle_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@feudal_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@line_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@redcoat_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@redcoat_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@guard_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@guard_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@great_war_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@great_war_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@light_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@tribal_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@state_levy_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@native_mountaineers }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@mounted_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@mounted_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@early_marine }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@early_marine }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@marine }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@marine }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@marine }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@kustjagare_battalion }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@kustjagare_battalion }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@mountaineers }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@mountaineers }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@mountaineers }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@shock_troops }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@shock_troops }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@shock_troops }

		set_variable = { militia_battalions_weighted = num_battalions_with_type@spanish_militia_infantry }
		add_to_variable = { militia_battalions_weighted = num_battalions_with_type@state_militia_infantry }
		add_to_variable = { militia_battalions_weighted = num_battalions_with_type@colonial_militia_infantry }
		add_to_variable = { militia_battalions_weighted = num_battalions_with_type@dutch_colonial_militia_infantry }
		add_to_variable = { militia_battalions_weighted = num_battalions_with_type@irregular_infantry }
		add_to_variable = { militia_battalions_weighted = num_battalions_with_type@armed_peasants }

		set_variable = { artillery_battalions_weighted = num_battalions_with_type@anti_tank_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@mot_anti_tank_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@anti_air_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@mot_anti_air_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@cannon_artillery }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@cannon_artillery_towed }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@howitzer_artillery }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@howitzer_artillery_towed }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@siege_artillery }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@siege_artillery }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@siege_artillery_towed }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@siege_artillery_towed }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@artillery_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@mot_artillery_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@rocket_artillery_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@mot_rocket_artillery_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@motorized_rocket_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@railway_gun }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@railway_gun }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@railway_gun }
		
		set_variable = { cavalry_battalions_weighted = num_battalions_with_type@tribal_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@tribal_camel_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@tribal_pistoleer_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@state_levy_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@feudal_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@light_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@light_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@heavy_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@heavy_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@heavy_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@uhlans }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@camel_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@dragoon }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@dragoon }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@great_war_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@great_war_cavalry }

		set_variable = { mobile_battalions_weighted = num_battalions_with_type@motorized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@motorized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@airborne }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@airborne }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@airborne }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@airborne }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@amphibious_mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@amphibious_mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@amphibious_mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@amphibious_mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@armored_car }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@technicals }

		set_variable = { armor_battalions_weighted = num_battalions_with_type@amphibious_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@amphibious_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_tank_destroyer_brigade }

		set_variable = { robotic_battalions_weighted = num_battalions_with_type@light_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@medium_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@medium_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@heavy_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@heavy_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@heavy_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@heavy_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@armor_walker }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@armor_walker }

		set_variable = { support_battalions_weighted = num_battalions_with_type@anti_tank }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@cannon_artillery_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@cannon_artillery_towed_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@howitzer_artillery_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@howitzer_artillery_towed_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@siege_artillery_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@siege_artillery_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@machine_gun_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@artillery }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@rocket_artillery }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@engineer }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@field_hospital }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@field_hospital }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@logistics_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@maintenance_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@military_police }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@recon }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@wired_signal_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@signal_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@bicycle_signal_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@motorcycle_signal_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@steam_car_support_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@flamethrower_support_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@sniper_team_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@armor_train_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@armor_train_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@armor_train_company }


		set_variable = { screen_ships_weighted = num_ships_with_type@corvette }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@destroyer }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@destroyer }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@light_cruiser }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@light_cruiser }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@light_cruiser }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@monitor }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@monitor }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@primitive_rowboat }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@torpedo_boat }
		
		set_variable = { capital_ships_weighted = num_ships_with_type@battle_cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@battle_cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@battleship }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@battleship }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@battleship }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@carrier }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@carrier }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@carrier }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@dreadnought }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@dreadnought }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@dreadnought }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@dreadnought }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@frigate }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@gunboat }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@heavy_cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@heavy_cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@ironclad }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@ironclad }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@lineship }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@lineship }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@primitive_sailing_boat }
		
		set_variable = { submarine_ships_weighted = num_ships_with_type@coastal_submarine }
		add_to_variable = { submarine_ships_weighted = num_ships_with_type@submarine }
		add_to_variable = { submarine_ships_weighted = num_ships_with_type@submarine }


	}

	taxes_update = {
		#Country Scope

		#Income Taxes
		set_variable = { income_tax_upper_strata_revenue = 0 }
		set_variable = { income_tax_middle_strata_revenue = 0 }
		set_variable = { income_tax_lower_strata_revenue = 0 }

		every_controlled_state = {
			#Upper Strata
			set_temp_variable = { tax_temp = aristocrats_earnings }
			add_to_temp_variable = { tax_temp = capitalists_earnings }
			multiply_temp_variable = { tax_temp = PREV.income_tax_upper_strata_percentage }
			add_to_variable = { PREV.income_tax_upper_strata_revenue = tax_temp }

			#Middle Strata
			set_temp_variable = { tax_temp = artisans_earnings }
			add_to_temp_variable = { tax_temp = professionals_earnings }
			add_to_temp_variable = { tax_temp = specialists_earnings }
			multiply_temp_variable = { tax_temp = PREV.income_tax_middle_strata_percentage }
			add_to_variable = { PREV.income_tax_middle_strata_revenue = tax_temp }

			#Lower Strata
			set_temp_variable = { tax_temp = rgos_earnings }
			add_to_temp_variable = { tax_temp = craftsmen_earnings }
			add_to_temp_variable = { tax_temp = clerks_earnings }
			multiply_temp_variable = { tax_temp = PREV.income_tax_lower_strata_percentage }
			add_to_variable = { PREV.income_tax_lower_strata_revenue = tax_temp }
		}
		divide_variable = { income_tax_upper_strata_revenue = 100 }
		divide_variable = { income_tax_middle_strata_revenue = 100 }
		divide_variable = { income_tax_lower_strata_revenue = 100 }

		set_variable = { income_tax_revenue = income_tax_upper_strata_revenue }
		add_to_variable = { income_tax_revenue = income_tax_middle_strata_revenue }
		add_to_variable = { income_tax_revenue = income_tax_lower_strata_revenue }

		#Sales Tax
			set_variable = { sales_tax_revenue = life_goods_bought_value }
			add_to_variable = { sales_tax_revenue = everyday_goods_bought_value }
			add_to_variable = { sales_tax_revenue = luxury_goods_bought_value }
			add_to_variable = { sales_tax_revenue = services_bought_value }
			add_to_variable = { sales_tax_revenue = raw_goods_bought_value }
			add_to_variable = { sales_tax_revenue = industrial_goods_bought_value }
			multiply_variable = { sales_tax_revenue = sales_tax_percentage }
			divide_variable = { sales_tax_revenue = 100 }
		#

		#Corporate
		#

		#Tariffs
			set_variable = { export_tariff_revenue = 0 }
			set_variable = { import_tariff_revenue = 0 }
			#life_goods
				if = {
					limit = {
						check_variable = { life_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = life_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { life_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = life_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			#everyday_goods
				if = {
					limit = {
						check_variable = { everyday_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = everyday_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { everyday_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = everyday_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			#luxury_goods
				if = {
					limit = {
						check_variable = { luxury_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = luxury_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { luxury_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = luxury_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			#services
				if = {
					limit = {
						check_variable = { services_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = services_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { services_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = services_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			#raw_goods
				if = {
					limit = {
						check_variable = { raw_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = raw_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { raw_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = raw_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			#industrial_goods
				if = {
					limit = {
						check_variable = { industrial_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { tax_temp = industrial_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = -1 }
					multiply_temp_variable = { tax_temp = import_tariff_percentage }
					add_to_variable = { import_tariff_revenue = tax_temp }
				}
				else_if = {
					limit = {
						check_variable = { industrial_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { tax_temp = industrial_goods_global_trade_actual_value }
					multiply_temp_variable = { tax_temp = export_tariff_percentage }
					add_to_variable = { export_tariff_revenue = tax_temp }
				}
			#
			divide_variable = { import_tariff_revenue = 100 }
			divide_variable = { export_tariff_revenue = 100 }

			set_variable = { tariff_revenue = import_tariff_revenue }
			add_to_variable = { tariff_revenue = export_tariff_revenue }
		#

		set_variable = { revenue = income_tax_revenue }
		add_to_variable = { revenue = sales_tax_revenue }
		add_to_variable = { revenue = import_tariff_revenue }
		add_to_variable = { revenue = export_tariff_revenue }

		net_budget_update = yes
	}
	spending_update = {
		proj_update = yes
		
		set_variable = { construction_spending_expense = 0 }
		set_variable = { project_spending_expense = 0 }
		set_variable = { industrial_subsidy_expense = 0 }
		set_variable = { infrastructure_subsidy_expense = 0 }

		set_variable = { administration_spending_expense = 0 }
		set_variable = { military_payroll_spending_expense = 0 }
		every_controlled_state = {
			#Administration
			set_temp_variable = { admin_temp = pops_earnings }
			multiply_temp_variable = { admin_temp = global.administration_base_expense }
			divide_temp_variable = { admin_temp = 100 }
			if = {
				limit = {
					check_variable = { pops_amount < global.administration_population_expense }
				}
				set_temp_variable = { modifier_temp = global.administration_population_expense }
				subtract_from_temp_variable = { modifier_temp = pops_amount }
				divide_temp_variable = { modifier_temp = global.administration_population_expense }
				multiply_temp_variable = { modifier_temp = global.administration_population_expense_modifier }
				add_to_temp_variable = { modifier_temp = 1 }
				multiply_temp_variable = { admin_temp = modifier_temp }
			}
			add_to_variable = { PREV.administration_spending_expense = admin_temp }

			#Industrial
			set_temp_variable = { raw_goods_temp = factory_raw_goods_need }
			multiply_temp_variable = { raw_goods_temp = raw_goods_price }
			set_temp_variable = { industrial_goods_temp = factory_industrial_goods_need }
			multiply_temp_variable = { industrial_goods_temp = industrial_goods_price }

			set_temp_variable = { industrial_spending_temp = raw_goods_temp }
			add_to_temp_variable = { industrial_spending_temp = industrial_goods_temp }
			multiply_temp_variable = { industrial_spending_temp = PREV.industrial_subsidy_percentage }
			divide_temp_variable = { industrial_spending_temp = 100 }
			add_to_variable = { PREV.industrial_subsidy_expense = industrial_spending_temp }

			set_temp_variable = { infrastructure_money_temp = infrastructure_industrial_goods_demand }
			multiply_temp_variable = { infrastructure_money_temp = industrial_goods_price }
			multiply_temp_variable = { infrastructure_money_temp = PREV.infrastructure_subsidy_percentage }
			divide_temp_variable = { infrastructure_money_temp = 100 }
			add_to_variable = { PREV.infrastructure_subsidy_expense = infrastructure_money_temp }

			#Military Payroll
			set_temp_variable = { conscripts = PREV.max_available_manpower_k }
			multiply_temp_variable = { conscripts = 10 }
			divide_temp_variable = { conscripts = PREV.max_manpower_k }
			multiply_temp_variable = { conscripts = pops_amount }
			divide_temp_variable = { conscripts = 10 }

			set_temp_variable = { need_temp = global.conscripted_base_life_goods_need }
			multiply_temp_variable = { need_temp = conscripts }
			divide_temp_variable = { need_temp = 100 }
			multiply_temp_variable = { need_temp = life_goods_price }
			add_to_variable = { PREV.military_payroll_spending_expense = need_temp }

			set_temp_variable = { need_temp = global.conscripted_base_everyday_goods_need }
			multiply_temp_variable = { need_temp = conscripts }
			divide_temp_variable = { need_temp = 100 }
			multiply_temp_variable = { need_temp = everyday_goods_price }
			add_to_variable = { PREV.military_payroll_spending_expense = need_temp }
			
			set_temp_variable = { need_temp = global.conscripted_base_luxury_goods_need }
			multiply_temp_variable = { need_temp = conscripts }
			divide_temp_variable = { need_temp = 100 }
			multiply_temp_variable = { need_temp = luxury_goods_price }
			add_to_variable = { PREV.military_payroll_spending_expense = need_temp }


			#Infra & Construction
				if = {
					limit = {
						has_state_flag = infrastructure_construction_government_subsidized
					}
					set_temp_variable = { infra_construction_funds_temp = global.infrastructure_construction_base_speed }
					multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
					multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
					divide_temp_variable = { infra_construction_funds_temp = 100 }
					subtract_from_temp_variable = { infra_construction_funds_temp = infrastructure_construction_investment_money }
					if = {
						limit = {
							check_variable = { infra_construction_funds_temp > 0 }
						}
						add_to_variable = { PREV.construction_spending_expense = infra_construction_funds_temp }
					}
				}
				if = {
					limit = {
						has_state_flag = factory_everyday_goods_construction_government_subsidized
					}
					set_temp_variable = { infra_construction_funds_temp = global.factory_everyday_goods_construction_base_speed }
					multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
					multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
					divide_temp_variable = { infra_construction_funds_temp = 100 }
					subtract_from_temp_variable = { infra_construction_funds_temp = factory_everyday_goods_construction_investment_money }
					if = {
						limit = {
							check_variable = { infra_construction_funds_temp > 0 }
						}
						add_to_variable = { PREV.construction_spending_expense = infra_construction_funds_temp }
					}
				}
				if = {
					limit = {
						has_state_flag = factory_luxury_goods_construction_government_subsidized
					}
					set_temp_variable = { infra_construction_funds_temp = global.factory_luxury_goods_construction_base_speed }
					multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
					multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
					divide_temp_variable = { infra_construction_funds_temp = 100 }
					subtract_from_temp_variable = { infra_construction_funds_temp = factory_luxury_goods_construction_investment_money }
					if = {
						limit = {
							check_variable = { infra_construction_funds_temp > 0 }
						}
						add_to_variable = { PREV.construction_spending_expense = infra_construction_funds_temp }
					}
				}
				if = {
					limit = {
						has_state_flag = factory_industrial_goods_construction_government_subsidized
					}
					set_temp_variable = { infra_construction_funds_temp = global.factory_industrial_goods_construction_base_speed }
					multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
					multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
					divide_temp_variable = { infra_construction_funds_temp = 100 }
					subtract_from_temp_variable = { infra_construction_funds_temp = factory_industrial_goods_construction_investment_money }
					if = {
						limit = {
							check_variable = { infra_construction_funds_temp > 0 }
						}
						add_to_variable = { PREV.construction_spending_expense = infra_construction_funds_temp }
					}
				}
			#
		}

		#Military Payroll
		multiply_variable = { military_payroll_spending_expense = global.conscripted_payroll_multiplier }

		set_temp_variable = { need_temp = conscripted_life_goods_demand }
		multiply_temp_variable = { need_temp = life_goods_price }
		add_to_variable = { military_payroll_spending_expense = need_temp }

		set_temp_variable = { need_temp = conscripted_everyday_goods_demand }
		multiply_temp_variable = { need_temp = everyday_goods_price }
		add_to_variable = { military_payroll_spending_expense = need_temp }

		set_temp_variable = { need_temp = conscripted_luxury_goods_demand }
		multiply_temp_variable = { need_temp = luxury_goods_price }
		add_to_variable = { military_payroll_spending_expense = need_temp }

		#Military
			#Army
			set_variable = { military_life_expense = 0 }
			set_variable = { military_everday_expense = 0 }
			set_variable = { military_luxury_expense = 0 }
			set_variable = { military_industrial_expense = 0 }

			set_variable = { military_army_spending_expense = 0 }
			set_temp_variable = { cost_temp = military_army_life_goods_demand }
			multiply_temp_variable = { cost_temp = life_goods_price }
			add_to_variable = { military_army_spending_expense = cost_temp }
			add_to_variable = { military_life_expense = cost_temp }
			
			set_temp_variable = { cost_temp = military_army_everyday_goods_demand }
			multiply_temp_variable = { cost_temp = everyday_goods_price }
			add_to_variable = { military_army_spending_expense = cost_temp }
			add_to_variable = { military_everday_expense = cost_temp }
			
			set_temp_variable = { cost_temp = military_army_luxury_goods_demand }
			multiply_temp_variable = { cost_temp = luxury_goods_price }
			add_to_variable = { military_army_spending_expense = cost_temp }
			add_to_variable = { military_luxury_expense = cost_temp }
			
			set_temp_variable = { cost_temp = military_army_industrial_goods_demand }
			multiply_temp_variable = { cost_temp = industrial_goods_price }
			add_to_variable = { military_army_spending_expense = cost_temp }
			add_to_variable = { military_industrial_expense = cost_temp }
			
			#Navy
			set_variable = { military_navy_spending_expense = 0 }
			set_temp_variable = { cost_temp = military_navy_life_goods_demand }
			multiply_temp_variable = { cost_temp = life_goods_price }
			add_to_variable = { military_navy_spending_expense = cost_temp }
			add_to_variable = { military_life_expense = cost_temp }
			
			set_temp_variable = { cost_temp = military_navy_everyday_goods_demand }
			multiply_temp_variable = { cost_temp = everyday_goods_price }
			add_to_variable = { military_navy_spending_expense = cost_temp }
			add_to_variable = { military_everday_expense = cost_temp }
			
			set_temp_variable = { cost_temp = military_navy_luxury_goods_demand }
			multiply_temp_variable = { cost_temp = luxury_goods_price }
			add_to_variable = { military_navy_spending_expense = cost_temp }
			add_to_variable = { military_luxury_expense = cost_temp }
			
			set_temp_variable = { cost_temp = military_navy_industrial_goods_demand }
			multiply_temp_variable = { cost_temp = industrial_goods_price }
			add_to_variable = { military_navy_spending_expense = cost_temp }
			add_to_variable = { military_industrial_expense = cost_temp }
			
			#Airforce
			set_variable = { military_airforce_spending_expense = 0 }
			set_temp_variable = { cost_temp = military_airforce_life_goods_demand }
			multiply_temp_variable = { cost_temp = life_goods_price }
			add_to_variable = { military_airforce_spending_expense = cost_temp }
			add_to_variable = { military_life_expense = cost_temp }
			
			set_temp_variable = { cost_temp = military_airforce_everyday_goods_demand }
			multiply_temp_variable = { cost_temp = everyday_goods_price }
			add_to_variable = { military_airforce_spending_expense = cost_temp }
			add_to_variable = { military_everday_expense = cost_temp }
			
			set_temp_variable = { cost_temp = military_airforce_luxury_goods_demand }
			multiply_temp_variable = { cost_temp = luxury_goods_price }
			add_to_variable = { military_airforce_spending_expense = cost_temp }
			add_to_variable = { military_luxury_expense = cost_temp }
			
			set_temp_variable = { cost_temp = military_airforce_industrial_goods_demand }
			multiply_temp_variable = { cost_temp = industrial_goods_price }
			add_to_variable = { military_airforce_spending_expense = cost_temp }
			add_to_variable = { military_industrial_expense = cost_temp }

			set_variable = { military_spending_expense = military_army_spending_expense }
			add_to_variable = { military_spending_expense = military_navy_spending_expense }
			add_to_variable = { military_spending_expense = military_airforce_spending_expense }
		#
	
		#Projects
			
			for_each_loop = {
				array = proj_id
				index = pi
				value = pv
				break = pb

				add_to_variable = { project_spending_expense = proj_estimated_monthly_cost^pi }
			}
			add_to_variable = { construction_spending_expense = project_spending_expense }
		#

		#Trade Subsidies
			set_variable = { export_subsidy_expense = 0 }
			set_variable = { import_subsidy_expense = 0 }
			#life_goods
				if = {
					limit = {
						check_variable = { life_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { subsidy_temp = life_goods_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = -1 }
					multiply_temp_variable = { subsidy_temp = import_subsidy_percentage }
					add_to_variable = { import_subsidy_expense = subsidy_temp }
				}
				else_if = {
					limit = {
						check_variable = { life_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { subsidy_temp = life_goods_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = export_subsidy_percentage }
					add_to_variable = { export_subsidy_expense = subsidy_temp }
				}
			#
			#everyday_goods
				if = {
					limit = {
						check_variable = { everyday_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { subsidy_temp = everyday_goods_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = -1 }
					multiply_temp_variable = { subsidy_temp = import_subsidy_percentage }
					add_to_variable = { import_subsidy_expense = subsidy_temp }
				}
				else_if = {
					limit = {
						check_variable = { everyday_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { subsidy_temp = everyday_goods_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = export_subsidy_percentage }
					add_to_variable = { export_subsidy_expense = subsidy_temp }
				}
			#
			#luxury_goods
				if = {
					limit = {
						check_variable = { luxury_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { subsidy_temp = luxury_goods_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = -1 }
					multiply_temp_variable = { subsidy_temp = import_subsidy_percentage }
					add_to_variable = { import_subsidy_expense = subsidy_temp }
				}
				else_if = {
					limit = {
						check_variable = { luxury_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { subsidy_temp = luxury_goods_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = export_subsidy_percentage }
					add_to_variable = { export_subsidy_expense = subsidy_temp }
				}
			#
			#services
				if = {
					limit = {
						check_variable = { services_global_trade_actual_value < 0 }
					}
					set_temp_variable = { subsidy_temp = services_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = -1 }
					multiply_temp_variable = { subsidy_temp = import_subsidy_percentage }
					add_to_variable = { import_subsidy_expense = subsidy_temp }
				}
				else_if = {
					limit = {
						check_variable = { services_global_trade_actual_value > 0 }
					}
					set_temp_variable = { subsidy_temp = services_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = export_subsidy_percentage }
					add_to_variable = { export_subsidy_expense = subsidy_temp }
				}
			#
			#raw_goods
				if = {
					limit = {
						check_variable = { raw_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { subsidy_temp = raw_goods_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = -1 }
					multiply_temp_variable = { subsidy_temp = import_subsidy_percentage }
					add_to_variable = { import_subsidy_expense = subsidy_temp }
				}
				else_if = {
					limit = {
						check_variable = { raw_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { subsidy_temp = raw_goods_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = export_subsidy_percentage }
					add_to_variable = { export_subsidy_expense = subsidy_temp }
				}
			#
			#industrial_goods
				if = {
					limit = {
						check_variable = { industrial_goods_global_trade_actual_value < 0 }
					}
					set_temp_variable = { subsidy_temp = industrial_goods_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = -1 }
					multiply_temp_variable = { subsidy_temp = import_subsidy_percentage }
					add_to_variable = { import_subsidy_expense = subsidy_temp }
				}
				else_if = {
					limit = {
						check_variable = { industrial_goods_global_trade_actual_value > 0 }
					}
					set_temp_variable = { subsidy_temp = industrial_goods_global_trade_actual_value }
					multiply_temp_variable = { subsidy_temp = export_subsidy_percentage }
					add_to_variable = { export_subsidy_expense = subsidy_temp }
				}
			#
			divide_variable = { import_subsidy_expense = 100 }
			divide_variable = { export_subsidy_expense = 100 }

			set_variable = { subsidy_expense = import_subsidy_expense }
			add_to_variable = { subsidy_expense = export_subsidy_expense }
		#

		set_variable = { subsidy_expense = infrastructure_subsidy_expense }
		add_to_variable = { subsidy_expense = industrial_subsidy_expense }
		add_to_variable = { subsidy_expense = export_subsidy_expense }
		add_to_variable = { subsidy_expense = import_subsidy_expense }

		set_variable = { discretionary_spending = subsidy_expense }
		add_to_variable = { discretionary_spending = construction_spending_expense }
		add_to_variable = { discretionary_spending = military_spending_expense }

		set_variable = { mandatory_spending = national_debt_interest }
		add_to_variable = { mandatory_spending = administration_spending_expense }
		add_to_variable = { mandatory_spending = military_payroll_spending_expense }

		net_budget_update = yes
	}
	net_budget_update = {
		#Literally three lines

		set_variable = { predicted_net_budget = revenue }
		subtract_from_variable = { predicted_net_budget = discretionary_spending }
		subtract_from_variable = { predicted_net_budget = mandatory_spending }
	}

	close_repay_debt_window = {
		#Country Scope
		#Closes the repay debt window and resets the repayment values

		clr_country_flag = country_repay_debt_view_open
		set_variable = { debt_repayment_amount = 0 }
		set_variable = { debt_repayment_country = 0 }
	}
	close_borrow_money_window = {
		#Country Scope
		#Closes the borrow money window and resets the values

		clr_country_flag = country_borrow_money_view_open
		set_variable = { borrow_money_amount = 0 }
		set_variable = { borrow_money_country = 0 }
	}
#

# AI Scripts

	industrial_investment_calc = {
		#Calculates the vars for investment interest
		#State Scope

		# Note: 
		#   IE is short for Ingame Effect, not an example
		#
		# Investment:
		#   Things that affect the likelyhood to build a new factory:
		#       = Market Conditions
		#           IE - Investors take into account goods prices & supply/demand.
		#               - Local, National, and Global supply & price of Raw Goods & Production Good
		#                   - Latter 2's weight depend on transport cost & shipping cost respectively
		#       = Existing buildings VS new sites
		#           IE - Corporations will consider buying factories off other corps or locals in state
		#       = Financial Incentives/Disincentives
		#           IE - Private Investors will take into account the following:
		#               +  Industrial Subsidies (if applied to the state/industry)
		#               -  Taxation (Corporate/Income/Sales, Tariffs if countrywide production > demand)
		#       = Construction Cost 
		#           IE - Industrial Goods price in the state & countrywide. Industrial Goods supply/demand countrywide. 
		#       = Infrastructure
		#           IE - Transport Cost in state, Electricity Generation in state/neighbors
		#       = Labor Availability
		#           IE - Investors like Unemployment
		#       = National/Global Status
		#           IE - Different laws & values & modifiers affect investment confidence
		#               + Investment Confidence (Adds onto investment interest)
		#                   +- Govt. Policy (Property, Child Labor, Workhours, Growth Policies, 
		#                                   Border, Discrim (if non-accepted culture), Econ Mob, Conscription)
		#                   +  High Stability
		#                   -  Low Stability (REALLY BAD. Businesses want stability)
		#                   +  National GDP Growth
		#                   +  National Inflation (Inflation means money is better spent today)
		#                   -  National Deflation (Deflation means money is better saved)
		#                   +  National Population Growth
		#                   +- Events & Focuses


		# If the value is *Positive,* then it will be considered to be built.
		# That does not mean that construction will occur right away. It just means that ppl think that it's a good investment.

		industrial_everyday_goods_investment_calc = yes     #factory_everyday_goods_investment_interest
		industrial_luxury_goods_investment_calc = yes       #factory_luxury_goods_investment_interest
		industrial_industrial_goods_investment_calc = yes   #factory_industrial_goods_investment_interest

		set_temp_variable = { highest_interest = 0 } #None
		set_temp_variable = { highest_interest_amount = 0 }
		if = { #Everyday Goods Factory
			limit = {
				NOT = { has_state_flag = factory_everyday_goods_in_construction }
				check_variable = { factory_everyday_goods_investment_interest > highest_interest_amount }
			}
			set_temp_variable = { highest_interest = 1 }
			set_temp_variable = { highest_interest_amount = factory_everyday_goods_investment_interest }
		}
		if = { #Luxury Goods Factory
			limit = {
				NOT = { has_state_flag = factory_luxury_goods_in_construction }
				check_variable = { factory_luxury_goods_investment_interest > highest_interest_amount }
			}
			set_temp_variable = { highest_interest = 2 }
			set_temp_variable = { highest_interest_amount = factory_luxury_goods_investment_interest }
		}
		if = { #Industrial Goods Factory
			limit = {
				NOT = { has_state_flag = factory_industrial_goods_in_construction }
				check_variable = { factory_industrial_goods_investment_interest > highest_interest_amount }
			}
			set_temp_variable = { highest_interest = 3 }
			set_temp_variable = { highest_interest_amount = factory_industrial_goods_investment_interest }
		}

		if = { #Build an Everyday Goods Factory
			limit = {
				check_variable = { highest_interest = 1 }
				check_variable = { factory_everyday_goods_investment_interest > 10 }
				check_variable = { pops_savings > 100 }
				NOT = { has_state_flag = factory_everyday_goods_in_construction }
				check_variable = { global.years_passed > 0 }
			}
			set_temp_variable = { investment_money_temp = pops_savings }
			subtract_from_temp_variable = { investment_money_temp = 100 }
			
			set_temp_variable = { investment_money_max_temp = factory_everyday_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 1.5 }
			if = {
				limit = {
					check_variable = { investment_money_temp > investment_money_max_temp }
				}
				set_temp_variable = { investment_money_temp = investment_money_max_temp }
			}

			start_everyday_goods_factory_construction = yes
			subtract_from_variable = { pops_savings = investment_money_temp }
		}
		else_if = { #Build a Luxury Goods Factory
			limit = {
				check_variable = { highest_interest = 2 }
				check_variable = { factory_luxury_goods_investment_interest > 10 }
				check_variable = { pops_savings > 100 }
				NOT = { has_state_flag = factory_luxury_goods_in_construction }
				check_variable = { global.years_passed > 0 }
			}
			set_temp_variable = { investment_money_temp = pops_savings }
			subtract_from_temp_variable = { investment_money_temp = 100 }
			
			set_temp_variable = { investment_money_max_temp = factory_luxury_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 1.5 }
			if = {
				limit = {
					check_variable = { investment_money_temp > investment_money_max_temp }
				}
				set_temp_variable = { investment_money_temp = investment_money_max_temp }
			}

			start_luxury_goods_factory_construction = yes
			subtract_from_variable = { pops_savings = investment_money_temp }
		}
		else_if = { #Build an Industrial Goods Factory
			limit = {
				check_variable = { highest_interest = 3 }
				check_variable = { factory_industrial_goods_investment_interest > 10 }
				check_variable = { pops_savings > 100 }
				NOT = { has_state_flag = factory_industrial_goods_in_construction }
				check_variable = { global.years_passed > 0 }
			}
			set_temp_variable = { investment_money_temp = pops_savings }
			subtract_from_temp_variable = { investment_money_temp = 100 }
			
			set_temp_variable = { investment_money_max_temp = factory_industrial_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 1.5 }
			if = {
				limit = {
					check_variable = { investment_money_temp > investment_money_max_temp }
				}
				set_temp_variable = { investment_money_temp = investment_money_max_temp }
			}

			start_industrial_goods_factory_construction = yes
			subtract_from_variable = { pops_savings = investment_money_temp }
		}
	}
	industrial_everyday_goods_investment_calc = {
		#Calculates the vars for investment interest
		#State Scope

		# If the value is *Positive,* then it will be considered to be built.
		# That does not mean that construction will occur right away. It just means that ppl think that it's a good investment.

		set_variable = { factory_everyday_goods_investment_interest = -200 } #Base of -200

		#Get Factory Production
			#Get Employment Amount
			set_temp_variable = { factory_employment_amount_temp = private_factory_amount }
			add_to_temp_variable = { factory_employment_amount_temp = 1 }
			multiply_temp_variable = { factory_employment_amount_temp = factory_employment_amount_per_factory }

			set_temp_variable = { govt_employment_max_temp = industrial_complex_level }
			add_to_temp_variable = { govt_employment_max_temp = arms_factory_level }
			add_to_temp_variable = { govt_employment_max_temp = building_level@dockyard }
			multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
			add_to_temp_variable = { factory_employment_amount_temp = govt_employment_max_temp }

			set_temp_variable = { factory_employment_max_temp = specialists_workforce_amount }
			add_to_temp_variable = { factory_employment_max_temp = craftsmen_workforce_amount }
			if = {
				limit = {
					check_variable = { factory_employment_max_temp > factory_employment_amount_temp }
				}
				set_variable = { factory_employment_max_temp = factory_employment_amount_temp }
			}

			set_temp_variable = { factory_employment_percentage_temp = factory_employment_max_temp }
			multiply_temp_variable = { factory_employment_percentage_temp = 100 }
			divide_temp_variable = { factory_employment_percentage_temp = factory_employment_amount_temp }
			if = {
				limit = {
					check_variable = { factory_employment_percentage_temp < 25 }
				}
				set_temp_variable = { factory_employment_percentage_temp = 25 }
			}

			#Specialist Bonus
			set_temp_variable = { specialists_bonus_multiplier = 1 }
			set_temp_variable = { specialists_percentage_temp = specialists_workforce_amount }
			divide_temp_variable = { specialists_percentage_temp = factory_employment_amount_temp }
			multiply_temp_variable = { specialists_percentage_temp = global.pops_specialists_production_bonus }
			add_to_temp_variable = { specialists_bonus_multiplier = specialists_percentage_temp }

			#Throughput
			set_temp_variable = { factory_production_temp = factory_employment_amount_per_factory }
			multiply_temp_variable = { factory_production_temp = global.factory_everyday_goods_base_production }
			multiply_temp_variable = { factory_production_temp = specialists_bonus_multiplier }
			divide_temp_variable = { factory_production_temp = 100 }
			multiply_temp_variable = { factory_production_temp = factory_employment_percentage_temp }
			divide_temp_variable = { factory_production_temp = 100 }
			set_temp_variable = { modifier_temp = factory_everyday_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#Maintenace
			set_temp_variable = { factory_industrial_goods_need_temp = factory_production_temp }
			multiply_temp_variable = { factory_industrial_goods_need_temp = global.factory_industrial_goods_base_need }
			set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_industrial_goods_need_temp = modifier_temp }

			#Input
			set_temp_variable = { factory_raw_goods_need_temp = global.factory_everyday_goods_raw_goods_base_need }
			multiply_temp_variable = { factory_raw_goods_need_temp = factory_production_temp }
			set_temp_variable = { modifier_temp = factory_everyday_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_raw_goods_need_temp = modifier_temp }

			#Fulfilled
			set_temp_variable = { fulfilled_temp = factory_everyday_goods_raw_goods_fulfilled_percentage }
			add_to_temp_variable = { fulfilled_temp = factory_everyday_goods_industrial_goods_fulfilled_percentage }
			divide_temp_variable = { fulfilled_temp = 2 }

			if = {
				limit = {
					OR = {
						check_variable = { factory_employment_amount < 0.1 }
						check_variable = { factory_everyday_goods_amount = 0 }
					}
					check_variable = { fulfilled_temp < 0.25 }
				}
				if = {
					limit = {
						check_variable = { factory_everyday_goods_amount = 0 }
					}
					set_temp_variable = { fulfilled_temp = 1 }
				}
				else = {
					set_temp_variable = { fulfilled_temp = 0.25 }
				}
			}

			#Output
			multiply_temp_variable = { factory_production_temp = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_everyday_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#factory_production_temp
			#factory_industrial_goods_need_temp
			#factory_raw_goods_need_temp
		#
		
		#Market Conditions
			#Weights
			set_temp_variable = { local_weight_temp = 0.89 }
			set_temp_variable = { country_weight_temp = 0.1 }
			set_temp_variable = { global_weight_temp = 0.01 }

			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = transport_cost_effect }
			divide_temp_variable = { country_weight_temp = modifier_temp }
			
			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = PREV.modifier@shipping_cost_modifier }
			divide_temp_variable = { global_weight_temp = modifier_temp }
			divide_temp_variable = { global_weight_temp = modifier_temp }

			set_temp_variable = { weight_total_temp = local_weight_temp }
			add_to_temp_variable = { weight_total_temp = country_weight_temp }
			add_to_temp_variable = { weight_total_temp = global_weight_temp }
			

			#Local
			set_temp_variable = { local_raw_goods_weight_temp = raw_goods_price }
			
			#Country
			set_temp_variable = { country_raw_goods_weight_temp = PREV.raw_goods_price }

			#Global
			set_temp_variable = { global_raw_goods_weight_temp = global.raw_goods_price }

			multiply_temp_variable = { local_raw_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_raw_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_raw_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { raw_goods_price_temp = local_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = country_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = global_raw_goods_weight_temp }
			divide_temp_variable = { raw_goods_price_temp = weight_total_temp }

			set_temp_variable = { raw_goods_cost_temp = raw_goods_price_temp }
			multiply_temp_variable = { raw_goods_cost_temp = factory_raw_goods_need_temp }
			

			#Local
			set_temp_variable = { local_industrial_goods_weight_temp = industrial_goods_price }
			
			#Country
			set_temp_variable = { country_industrial_goods_weight_temp = PREV.industrial_goods_price }

			#Global
			set_temp_variable = { global_industrial_goods_weight_temp = global.industrial_goods_price }

			multiply_temp_variable = { local_industrial_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_industrial_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { industrial_goods_price_temp = local_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = country_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = global_industrial_goods_weight_temp }
			divide_temp_variable = { industrial_goods_price_temp = weight_total_temp }

			set_temp_variable = { industrial_goods_cost_temp = industrial_goods_price_temp }
			multiply_temp_variable = { industrial_goods_cost_temp = factory_industrial_goods_need_temp }

			
			#Local
			set_temp_variable = { local_everyday_goods_weight_temp = everyday_goods_price }
			
			#Country
			set_temp_variable = { country_everyday_goods_weight_temp = PREV.everyday_goods_price }

			#Global
			set_temp_variable = { global_everyday_goods_weight_temp = global.everyday_goods_price }

			multiply_temp_variable = { local_everyday_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_everyday_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { everyday_goods_revenue_temp = local_everyday_goods_weight_temp }
			add_to_temp_variable = { everyday_goods_revenue_temp = country_everyday_goods_weight_temp }
			add_to_temp_variable = { everyday_goods_revenue_temp = global_everyday_goods_weight_temp }
			multiply_temp_variable = { everyday_goods_revenue_temp = factory_production_temp }
			divide_temp_variable = { everyday_goods_revenue_temp = weight_total_temp }

			set_temp_variable = { revenue_cost_ratio = everyday_goods_revenue_temp }
			set_temp_variable = { goods_cost_temp = raw_goods_cost_temp }
			add_to_temp_variable = { goods_cost_temp = industrial_goods_cost_temp }
			if = {
				limit = {
					check_variable = { goods_cost_temp > 0 }
				}
				divide_temp_variable = { revenue_cost_ratio = goods_cost_temp }
			}
			else_if = {
				limit = {
					check_variable = { revenue_cost_ratio > 0 }
				}
				set_temp_variable = { revenue_cost_ratio = 11 }
			}
			else = {
				set_temp_variable = { revenue_cost_ratio = 0 }
			}
			subtract_from_temp_variable = { revenue_cost_ratio = 1 }

			set_temp_variable = { everyday_goods_condition_temp = 100 }
			multiply_temp_variable = { everyday_goods_condition_temp = revenue_cost_ratio }
			add_to_variable = { factory_everyday_goods_investment_interest = everyday_goods_condition_temp }

			#raw_goods_cost_temp
			#raw_goods_price_temp
			#industrial_goods_cost_temp
			#industrial_goods_price_temp
			#goods_cost_temp
			#everyday_goods_revenue_temp
			set_variable = { goods_revenue_s = everyday_goods_revenue_temp }
			set_variable = { goods_cost_s = goods_cost_temp }
		#

		#Financial Incentives
			#Industrial Subsidies
			set_temp_variable = { subsidies_condition_temp = PREV.industrial_subsidy_percentage }
			multiply_temp_variable = { subsidies_condition_temp = goods_cost_temp }
			divide_temp_variable = { subsidies_condition_temp = everyday_goods_revenue_temp }
			divide_temp_variable = { subsidies_condition_temp = 2 } #Adds half back
			add_to_variable = { factory_everyday_goods_investment_interest = subsidies_condition_temp }

			#Taxation
			#TODO
		#
		
		#Construction Cost        
			set_variable = { constr_cost_temp = global.factory_everyday_goods_construction_industrial_goods_base_need }
			multiply_variable = { constr_cost_temp = factory_employment_amount_per_factory }
			divide_variable = { constr_cost_temp = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { constr_cost_temp = modifier_temp }
			multiply_variable = { constr_cost_temp = industrial_goods_price_temp }
			multiply_variable = { constr_cost_temp = 2 }

			set_temp_variable = { revenue_excess_temp = everyday_goods_revenue_temp }
			subtract_from_temp_variable = { revenue_excess_temp = goods_cost_temp }
			if = {
				limit = {
					check_variable = { revenue_excess_temp < 0.01 }
				}
				set_temp_variable = { revenue_excess_temp = 0.01 }
			}

			set_temp_variable = { constr_cost_condition_temp = constr_cost_temp }
			divide_temp_variable = { constr_cost_condition_temp = revenue_excess_temp }
			multiply_temp_variable = { constr_cost_condition_temp = -10 } #Every multiple of excess revenue reduces interest by 20
			add_to_variable = { factory_everyday_goods_investment_interest = constr_cost_condition_temp }
		#

		#Infrastructure
			set_temp_variable = { transport_cost_condition_temp = transport_cost_effect }
			multiply_temp_variable = { transport_cost_condition_temp = -100 } #at -100% transport cost, +100 interest`
			add_to_variable = { factory_everyday_goods_investment_interest = transport_cost_condition_temp }
		#

		#Labor Availability
			if = {
				limit = {
					check_variable = { factory_employment_percentage < 100 }
				}

				set_temp_variable = { labor_condition_temp = factory_employment_amount_max }
				subtract_from_temp_variable = { labor_condition_temp = factory_employment_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 200 } #for each factory-sized chunk
				subtract_from_variable = { factory_everyday_goods_investment_interest = labor_condition_temp }
			}
			else = {
				set_temp_variable = { labor_condition_temp = craftsmen_unemployed_amount }
				add_to_temp_variable = { labor_condition_temp = specialists_unemployed_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 50 } #for each factory-sized chunk
				add_to_variable = { factory_everyday_goods_investment_interest = labor_condition_temp }
			}
			
		#

		#Investment Confidence
			add_to_variable = { factory_everyday_goods_investment_interest = PREV.investment_confidence }
		#

		#Other Constructions
			#If some other building is being constructed, it takes away from confidence in a new one.
			if = {
				limit = {
					has_state_flag = factory_everyday_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_luxury_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_industrial_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = infrastructure_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 25 } #Not as much as it's infra
			}
		#
	}
	industrial_luxury_goods_investment_calc = {
		#Calculates the vars for investment interest
		#State Scope

		# If the value is *Positive,* then it will be considered to be built.
		# That does not mean that construction will occur right away. It just means that ppl think that it's a good investment.

		set_variable = { factory_luxury_goods_investment_interest = -200 } #Base of -200

		#Get Factory Production
			#Get Employment Amount
			set_temp_variable = { factory_employment_amount_temp = private_factory_amount }
			add_to_temp_variable = { factory_employment_amount_temp = 1 }
			multiply_temp_variable = { factory_employment_amount_temp = factory_employment_amount_per_factory }

			set_temp_variable = { govt_employment_max_temp = industrial_complex_level }
			add_to_temp_variable = { govt_employment_max_temp = arms_factory_level }
			add_to_temp_variable = { govt_employment_max_temp = building_level@dockyard }
			multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
			add_to_temp_variable = { factory_employment_amount_temp = govt_employment_max_temp }

			set_temp_variable = { factory_employment_max_temp = specialists_workforce_amount }
			add_to_temp_variable = { factory_employment_max_temp = craftsmen_workforce_amount }
			if = {
				limit = {
					check_variable = { factory_employment_max_temp > factory_employment_amount_temp }
				}
				set_variable = { factory_employment_max_temp = factory_employment_amount_temp }
			}

			set_temp_variable = { factory_employment_percentage_temp = factory_employment_max_temp }
			multiply_temp_variable = { factory_employment_percentage_temp = 100 }
			divide_temp_variable = { factory_employment_percentage_temp = factory_employment_amount_temp }
			if = {
				limit = {
					check_variable = { factory_employment_percentage_temp < 25 }
				}
				set_temp_variable = { factory_employment_percentage_temp = 25 }
			}

			#Specialist Bonus
			set_temp_variable = { specialists_bonus_multiplier = 1 }
			set_temp_variable = { specialists_percentage_temp = specialists_workforce_amount }
			divide_temp_variable = { specialists_percentage_temp = factory_employment_amount_temp }
			multiply_temp_variable = { specialists_percentage_temp = global.pops_specialists_production_bonus }
			add_to_temp_variable = { specialists_bonus_multiplier = specialists_percentage_temp }

			#Throughput
			set_temp_variable = { factory_production_temp = factory_employment_amount_per_factory }
			multiply_temp_variable = { factory_production_temp = global.factory_luxury_goods_base_production }
			multiply_temp_variable = { factory_production_temp = specialists_bonus_multiplier }
			divide_temp_variable = { factory_production_temp = 100 }
			multiply_temp_variable = { factory_production_temp = factory_employment_percentage_temp }
			divide_temp_variable = { factory_production_temp = 100 }
			set_temp_variable = { modifier_temp = factory_luxury_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#Maintenace
			set_temp_variable = { factory_industrial_goods_need_temp = factory_production_temp }
			multiply_temp_variable = { factory_industrial_goods_need_temp = global.factory_industrial_goods_base_need }
			set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_industrial_goods_need_temp = modifier_temp }

			#Input
			set_temp_variable = { factory_raw_goods_need_temp = global.factory_luxury_goods_raw_goods_base_need }
			multiply_temp_variable = { factory_raw_goods_need_temp = factory_production_temp }
			set_temp_variable = { modifier_temp = factory_luxury_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_raw_goods_need_temp = modifier_temp }

			#Fulfilled
			set_temp_variable = { fulfilled_temp = factory_luxury_goods_raw_goods_fulfilled_percentage }
			add_to_temp_variable = { fulfilled_temp = factory_luxury_goods_industrial_goods_fulfilled_percentage }
			divide_temp_variable = { fulfilled_temp = 2 }

			if = {
				limit = {
					OR = {
						check_variable = { factory_employment_amount < 0.1 }
						check_variable = { factory_luxury_goods_amount = 0 }
					}
					check_variable = { fulfilled_temp < 0.25 }
				}
				if = {
					limit = {
						check_variable = { factory_luxury_goods_amount = 0 }
					}
					set_temp_variable = { fulfilled_temp = 1 }
				}
				else = {
					set_temp_variable = { fulfilled_temp = 0.25 }
				}
			}

			#Output
			multiply_temp_variable = { factory_production_temp = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_luxury_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#factory_production_temp
			#factory_industrial_goods_need_temp
			#factory_raw_goods_need_temp
		#
		
		#Market Conditions
			#Weights
			set_temp_variable = { local_weight_temp = 0.89 }
			set_temp_variable = { country_weight_temp = 0.1 }
			set_temp_variable = { global_weight_temp = 0.01 }

			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = transport_cost_effect }
			divide_temp_variable = { country_weight_temp = modifier_temp }
			
			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = PREV.modifier@shipping_cost_modifier }
			divide_temp_variable = { global_weight_temp = modifier_temp }
			divide_temp_variable = { global_weight_temp = modifier_temp }

			set_temp_variable = { weight_total_temp = local_weight_temp }
			add_to_temp_variable = { weight_total_temp = country_weight_temp }
			add_to_temp_variable = { weight_total_temp = global_weight_temp }
			

			#Local
			set_temp_variable = { local_raw_goods_weight_temp = raw_goods_price }
			
			#Country
			set_temp_variable = { country_raw_goods_weight_temp = PREV.raw_goods_price }

			#Global
			set_temp_variable = { global_raw_goods_weight_temp = global.raw_goods_price }

			multiply_temp_variable = { local_raw_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_raw_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_raw_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { raw_goods_price_temp = local_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = country_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = global_raw_goods_weight_temp }
			divide_temp_variable = { raw_goods_price_temp = weight_total_temp }

			set_temp_variable = { raw_goods_cost_temp = raw_goods_price_temp }
			multiply_temp_variable = { raw_goods_cost_temp = factory_raw_goods_need_temp }
			

			#Local
			set_temp_variable = { local_industrial_goods_weight_temp = industrial_goods_price }
			
			#Country
			set_temp_variable = { country_industrial_goods_weight_temp = PREV.industrial_goods_price }

			#Global
			set_temp_variable = { global_industrial_goods_weight_temp = global.industrial_goods_price }

			multiply_temp_variable = { local_industrial_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_industrial_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { industrial_goods_price_temp = local_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = country_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = global_industrial_goods_weight_temp }
			divide_temp_variable = { industrial_goods_price_temp = weight_total_temp }

			set_temp_variable = { industrial_goods_cost_temp = industrial_goods_price_temp }
			multiply_temp_variable = { industrial_goods_cost_temp = factory_industrial_goods_need_temp }

			
			#Local
			set_temp_variable = { local_luxury_goods_weight_temp = luxury_goods_price }
			
			#Country
			set_temp_variable = { country_luxury_goods_weight_temp = PREV.luxury_goods_price }

			#Global
			set_temp_variable = { global_luxury_goods_weight_temp = global.luxury_goods_price }

			multiply_temp_variable = { local_luxury_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_luxury_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { luxury_goods_revenue_temp = local_luxury_goods_weight_temp }
			add_to_temp_variable = { luxury_goods_revenue_temp = country_luxury_goods_weight_temp }
			add_to_temp_variable = { luxury_goods_revenue_temp = global_luxury_goods_weight_temp }
			multiply_temp_variable = { luxury_goods_revenue_temp = factory_production_temp }
			divide_temp_variable = { luxury_goods_revenue_temp = weight_total_temp }

			set_temp_variable = { revenue_cost_ratio = luxury_goods_revenue_temp }
			set_temp_variable = { goods_cost_temp = raw_goods_cost_temp }
			add_to_temp_variable = { goods_cost_temp = industrial_goods_cost_temp }
			if = {
				limit = {
					check_variable = { goods_cost_temp > 0 }
				}
				divide_temp_variable = { revenue_cost_ratio = goods_cost_temp }
			}
			else_if = {
				limit = {
					check_variable = { revenue_cost_ratio > 0 }
				}
				set_temp_variable = { revenue_cost_ratio = 11 }
			}
			else = {
				set_temp_variable = { revenue_cost_ratio = 0 }
			}
			subtract_from_temp_variable = { revenue_cost_ratio = 1 }

			set_temp_variable = { luxury_goods_condition_temp = 100 }
			multiply_temp_variable = { luxury_goods_condition_temp = revenue_cost_ratio }
			add_to_variable = { factory_luxury_goods_investment_interest = luxury_goods_condition_temp }

			#raw_goods_cost_temp
			#raw_goods_price_temp
			#industrial_goods_cost_temp
			#industrial_goods_price_temp
			#goods_cost_temp
			#luxury_goods_revenue_temp
		#

		#Financial Incentives
			#Industrial Subsidies
			set_temp_variable = { subsidies_condition_temp = PREV.industrial_subsidy_percentage }
			multiply_temp_variable = { subsidies_condition_temp = goods_cost_temp }
			divide_temp_variable = { subsidies_condition_temp = luxury_goods_revenue_temp }
			divide_temp_variable = { subsidies_condition_temp = 2 } #Adds half back
			add_to_variable = { factory_luxury_goods_investment_interest = subsidies_condition_temp }

			#Taxation
			#TODO
		#
		
		#Construction Cost        
			set_variable = { constr_cost_temp = global.factory_luxury_goods_construction_industrial_goods_base_need }
			multiply_variable = { constr_cost_temp = factory_employment_amount_per_factory }
			divide_variable = { constr_cost_temp = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { constr_cost_temp = modifier_temp }
			multiply_variable = { constr_cost_temp = industrial_goods_price_temp }
			multiply_variable = { constr_cost_temp = 2 }

			set_temp_variable = { revenue_excess_temp = luxury_goods_revenue_temp }
			subtract_from_temp_variable = { revenue_excess_temp = goods_cost_temp }
			if = {
				limit = {
					check_variable = { revenue_excess_temp < 0.01 }
				}
				set_temp_variable = { revenue_excess_temp = 0.01 }
			}

			set_temp_variable = { constr_cost_condition_temp = constr_cost_temp }
			divide_temp_variable = { constr_cost_condition_temp = revenue_excess_temp }
			multiply_temp_variable = { constr_cost_condition_temp = -10 } #Every multiple of excess revenue reduces interest by 20
			add_to_variable = { factory_luxury_goods_investment_interest = constr_cost_condition_temp }
		#

		#Infrastructure
			set_temp_variable = { transport_cost_condition_temp = transport_cost_effect }
			multiply_temp_variable = { transport_cost_condition_temp = -100 } #at -100% transport cost, +100 interest`
			add_to_variable = { factory_luxury_goods_investment_interest = transport_cost_condition_temp }
		#

		#Labor Availability
			if = {
				limit = {
					check_variable = { factory_employment_percentage < 100 }
				}

				set_temp_variable = { labor_condition_temp = factory_employment_amount_max }
				subtract_from_temp_variable = { labor_condition_temp = factory_employment_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 200 } #for each factory-sized chunk
				subtract_from_variable = { factory_luxury_goods_investment_interest = labor_condition_temp }
			}
			else = {
				set_temp_variable = { labor_condition_temp = craftsmen_unemployed_amount }
				add_to_temp_variable = { labor_condition_temp = specialists_unemployed_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 50 } #for each factory-sized chunk
				add_to_variable = { factory_luxury_goods_investment_interest = labor_condition_temp }
			}
			
		#

		#Investment Confidence
			add_to_variable = { factory_luxury_goods_investment_interest = PREV.investment_confidence }
		#

		#Other Constructions
			#If some other building is being constructed, it takes away from confidence in a new one.
			if = {
				limit = {
					has_state_flag = factory_everyday_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_luxury_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_industrial_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = infrastructure_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 25 } #Not as much as it's infra
			}
		#

	}
	industrial_industrial_goods_investment_calc = {
		#Calculates the vars for investment interest
		#State Scope

		# If the value is *Positive,* then it will be considered to be built.
		# That does not mean that construction will occur right away. It just means that ppl think that it's a good investment.

		set_variable = { factory_industrial_goods_investment_interest = -200 } #Base of -200

		#Get Factory Production
			#Get Employment Amount
			set_temp_variable = { factory_employment_amount_temp = private_factory_amount }
			add_to_temp_variable = { factory_employment_amount_temp = 1 }
			multiply_temp_variable = { factory_employment_amount_temp = factory_employment_amount_per_factory }

			set_temp_variable = { govt_employment_max_temp = industrial_complex_level }
			add_to_temp_variable = { govt_employment_max_temp = arms_factory_level }
			add_to_temp_variable = { govt_employment_max_temp = building_level@dockyard }
			multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
			add_to_temp_variable = { factory_employment_amount_temp = govt_employment_max_temp }

			set_temp_variable = { factory_employment_max_temp = specialists_workforce_amount }
			add_to_temp_variable = { factory_employment_max_temp = craftsmen_workforce_amount }
			if = {
				limit = {
					check_variable = { factory_employment_max_temp > factory_employment_amount_temp }
				}
				set_variable = { factory_employment_max_temp = factory_employment_amount_temp }
			}

			set_temp_variable = { factory_employment_percentage_temp = factory_employment_max_temp }
			multiply_temp_variable = { factory_employment_percentage_temp = 100 }
			divide_temp_variable = { factory_employment_percentage_temp = factory_employment_amount_temp }
			if = {
				limit = {
					check_variable = { factory_employment_percentage_temp < 25 }
				}
				set_temp_variable = { factory_employment_percentage_temp = 25 }
			}

			#Specialist Bonus
			set_temp_variable = { specialists_bonus_multiplier = 1 }
			set_temp_variable = { specialists_percentage_temp = specialists_workforce_amount }
			divide_temp_variable = { specialists_percentage_temp = factory_employment_amount_temp }
			multiply_temp_variable = { specialists_percentage_temp = global.pops_specialists_production_bonus }
			add_to_temp_variable = { specialists_bonus_multiplier = specialists_percentage_temp }

			#Throughput
			set_temp_variable = { factory_production_temp = factory_employment_amount_per_factory }
			multiply_temp_variable = { factory_production_temp = global.factory_industrial_goods_base_production }
			multiply_temp_variable = { factory_production_temp = specialists_bonus_multiplier }
			divide_temp_variable = { factory_production_temp = 100 }
			multiply_temp_variable = { factory_production_temp = factory_employment_percentage_temp }
			divide_temp_variable = { factory_production_temp = 100 }
			set_temp_variable = { modifier_temp = factory_industrial_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#Maintenace
			set_temp_variable = { factory_industrial_goods_need_temp = factory_production_temp }
			multiply_temp_variable = { factory_industrial_goods_need_temp = global.factory_industrial_goods_base_need }
			set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_industrial_goods_need_temp = modifier_temp }

			#Input
			set_temp_variable = { factory_raw_goods_need_temp = global.factory_industrial_goods_raw_goods_base_need }
			multiply_temp_variable = { factory_raw_goods_need_temp = factory_production_temp }
			set_temp_variable = { modifier_temp = factory_industrial_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_raw_goods_need_temp = modifier_temp }

			#Fulfilled
			set_temp_variable = { fulfilled_temp = factory_industrial_goods_raw_goods_fulfilled_percentage }
			add_to_temp_variable = { fulfilled_temp = factory_industrial_goods_industrial_goods_fulfilled_percentage }
			divide_temp_variable = { fulfilled_temp = 2 }

			if = {
				limit = {
					OR = {
						check_variable = { factory_employment_amount < 0.1 }
						check_variable = { factory_industrial_goods_amount = 0 }
					}
					check_variable = { fulfilled_temp < 0.25 }
				}
				if = {
					limit = {
						check_variable = { factory_industrial_goods_amount = 0 }
					}
					set_temp_variable = { fulfilled_temp = 1 }
				}
				else = {
					set_temp_variable = { fulfilled_temp = 0.25 }
				}
			}

			#Output
			multiply_temp_variable = { factory_production_temp = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_industrial_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#factory_production_temp
			#factory_industrial_goods_need_temp
			#factory_raw_goods_need_temp
		#
		
		#Market Conditions
			#Weights
			set_temp_variable = { local_weight_temp = 0.89 }
			set_temp_variable = { country_weight_temp = 0.1 }
			set_temp_variable = { global_weight_temp = 0.01 }

			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = transport_cost_effect }
			divide_temp_variable = { country_weight_temp = modifier_temp }
			
			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = PREV.modifier@shipping_cost_modifier }
			divide_temp_variable = { global_weight_temp = modifier_temp }
			divide_temp_variable = { global_weight_temp = modifier_temp }

			set_temp_variable = { weight_total_temp = local_weight_temp }
			add_to_temp_variable = { weight_total_temp = country_weight_temp }
			add_to_temp_variable = { weight_total_temp = global_weight_temp }
			

			#Local
			set_temp_variable = { local_raw_goods_weight_temp = raw_goods_price }
			
			#Country
			set_temp_variable = { country_raw_goods_weight_temp = PREV.raw_goods_price }

			#Global
			set_temp_variable = { global_raw_goods_weight_temp = global.raw_goods_price }

			multiply_temp_variable = { local_raw_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_raw_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_raw_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { raw_goods_price_temp = local_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = country_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = global_raw_goods_weight_temp }
			divide_temp_variable = { raw_goods_price_temp = weight_total_temp }

			set_temp_variable = { raw_goods_cost_temp = raw_goods_price_temp }
			multiply_temp_variable = { raw_goods_cost_temp = factory_raw_goods_need_temp }
			

			#Local
			set_temp_variable = { local_industrial_goods_weight_temp = industrial_goods_price }
			
			#Country
			set_temp_variable = { country_industrial_goods_weight_temp = PREV.industrial_goods_price }

			#Global
			set_temp_variable = { global_industrial_goods_weight_temp = global.industrial_goods_price }

			multiply_temp_variable = { local_industrial_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_industrial_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { industrial_goods_price_temp = local_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = country_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = global_industrial_goods_weight_temp }
			divide_temp_variable = { industrial_goods_price_temp = weight_total_temp }

			set_temp_variable = { industrial_goods_cost_temp = industrial_goods_price_temp }
			multiply_temp_variable = { industrial_goods_cost_temp = factory_industrial_goods_need_temp }

			
			#Local
			set_temp_variable = { local_industrial_goods_weight_temp = industrial_goods_price }
			
			#Country
			set_temp_variable = { country_industrial_goods_weight_temp = PREV.industrial_goods_price }

			#Global
			set_temp_variable = { global_industrial_goods_weight_temp = global.industrial_goods_price }

			multiply_temp_variable = { local_industrial_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_industrial_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { industrial_goods_revenue_temp = local_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_revenue_temp = country_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_revenue_temp = global_industrial_goods_weight_temp }
			multiply_temp_variable = { industrial_goods_revenue_temp = factory_production_temp }
			divide_temp_variable = { industrial_goods_revenue_temp = weight_total_temp }

			set_temp_variable = { revenue_cost_ratio = industrial_goods_revenue_temp }
			set_temp_variable = { goods_cost_temp = raw_goods_cost_temp }
			add_to_temp_variable = { goods_cost_temp = industrial_goods_cost_temp }
			if = {
				limit = {
					check_variable = { goods_cost_temp > 0 }
				}
				divide_temp_variable = { revenue_cost_ratio = goods_cost_temp }
			}
			else_if = {
				limit = {
					check_variable = { revenue_cost_ratio > 0 }
				}
				set_temp_variable = { revenue_cost_ratio = 11 }
			}
			else = {
				set_temp_variable = { revenue_cost_ratio = 0 }
			}
			subtract_from_temp_variable = { revenue_cost_ratio = 1 }

			set_temp_variable = { industrial_goods_condition_temp = 100 }
			multiply_temp_variable = { industrial_goods_condition_temp = revenue_cost_ratio }
			add_to_variable = { factory_industrial_goods_investment_interest = industrial_goods_condition_temp }

			#raw_goods_cost_temp
			#raw_goods_price_temp
			#industrial_goods_cost_temp
			#industrial_goods_price_temp
			#goods_cost_temp
			#industrial_goods_revenue_temp
		#

		#Financial Incentives
			#Industrial Subsidies
			set_temp_variable = { subsidies_condition_temp = PREV.industrial_subsidy_percentage }
			multiply_temp_variable = { subsidies_condition_temp = goods_cost_temp }
			divide_temp_variable = { subsidies_condition_temp = industrial_goods_revenue_temp }
			divide_temp_variable = { subsidies_condition_temp = 2 } #Adds half back
			add_to_variable = { factory_industrial_goods_investment_interest = subsidies_condition_temp }

			#Taxation
			#TODO
		#
		
		#Construction Cost        
			set_variable = { constr_cost_temp = global.factory_industrial_goods_construction_industrial_goods_base_need }
			multiply_variable = { constr_cost_temp = factory_employment_amount_per_factory }
			divide_variable = { constr_cost_temp = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { constr_cost_temp = modifier_temp }
			multiply_variable = { constr_cost_temp = industrial_goods_price_temp }
			multiply_variable = { constr_cost_temp = 2 }

			set_temp_variable = { revenue_excess_temp = industrial_goods_revenue_temp }
			subtract_from_temp_variable = { revenue_excess_temp = goods_cost_temp }
			if = {
				limit = {
					check_variable = { revenue_excess_temp < 0.01 }
				}
				set_temp_variable = { revenue_excess_temp = 0.01 }
			}

			set_temp_variable = { constr_cost_condition_temp = constr_cost_temp }
			divide_temp_variable = { constr_cost_condition_temp = revenue_excess_temp }
			multiply_temp_variable = { constr_cost_condition_temp = -10 } #Every multiple of excess revenue reduces interest by 20
			add_to_variable = { factory_industrial_goods_investment_interest = constr_cost_condition_temp }
		#

		#Infrastructure
			set_temp_variable = { transport_cost_condition_temp = transport_cost_effect }
			multiply_temp_variable = { transport_cost_condition_temp = -100 } #at -100% transport cost, +100 interest`
			add_to_variable = { factory_industrial_goods_investment_interest = transport_cost_condition_temp }
		#

		#Labor Availability
			if = {
				limit = {
					check_variable = { factory_employment_percentage < 100 }
				}

				set_temp_variable = { labor_condition_temp = factory_employment_amount_max }
				subtract_from_temp_variable = { labor_condition_temp = factory_employment_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 200 } #for each factory-sized chunk
				subtract_from_variable = { factory_industrial_goods_investment_interest = labor_condition_temp }
			}
			else = {
				set_temp_variable = { labor_condition_temp = craftsmen_unemployed_amount }
				add_to_temp_variable = { labor_condition_temp = specialists_unemployed_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 50 } #for each factory-sized chunk
				add_to_variable = { factory_industrial_goods_investment_interest = labor_condition_temp }
			}
			
		#

		#Investment Confidence
			add_to_variable = { factory_industrial_goods_investment_interest = PREV.investment_confidence }
		#
		
		#Other Constructions
			#If some other building is being constructed, it takes away from confidence in a new one.
			if = {
				limit = {
					has_state_flag = factory_everyday_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_luxury_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_industrial_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = infrastructure_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 25 } #Not as much as it's infra
			}
		#
	}

#

#Functions (With Inputs & Outputs)
	#Functions for modders

	#

	#Functions for the system

	start_everyday_goods_factory_construction = {
		#Scope: State
		#Starts the construction of an everyday goods factory. If one is already in construction, this does nothing.
		#INPUT:
			#investment_money_temp - Money put into the initial construction
			#factory_everyday_goods_construction_government_subsidized - state flag
				# - If the flag exists, then the government will pay all additional costs after the initial investment 
		#OUTPUT:
			#investment_money_temp - Money left over after investment

		if = {
			limit = {
				NOT = { has_state_flag = factory_everyday_goods_in_construction }
			}
			set_state_flag = factory_everyday_goods_in_construction

			set_variable = { factory_everyday_goods_construction_investment_money = investment_money_temp }
			
			set_variable = { factory_everyday_goods_construction_industrial_goods_need = global.factory_everyday_goods_construction_industrial_goods_base_need }
			multiply_variable = { factory_everyday_goods_construction_industrial_goods_need = factory_employment_amount_per_factory }
			divide_variable = { factory_everyday_goods_construction_industrial_goods_need = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_everyday_goods_construction_industrial_goods_need = modifier_temp }
			
			set_temp_variable = { investment_money_max_temp = factory_everyday_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 2 }
			if = {
				limit = {
					check_variable = { investment_money_max_temp < factory_everyday_goods_construction_investment_money }
				}
				set_variable = { factory_everyday_goods_construction_investment_money = investment_money_max_temp }
				subtract_from_temp_variable = { investment_money_temp = factory_everyday_goods_construction_investment_money }
			}
			else = {
				set_temp_variable = { investment_money_temp = 0 }
			}
			factories_update = yes
			add_to_variable = { update_state_econ_window = 1 }
		}
	}
	end_everyday_goods_factory_construction = {
		#Scope: State
		if = {
			limit = {
				has_state_flag = factory_everyday_goods_in_construction
				check_variable = { factory_everyday_goods_construction_industrial_goods_need < 0.01 }
			}
			clr_state_flag = factory_everyday_goods_in_construction
			clr_state_flag = factory_everyday_goods_construction_government_subsidized

			add_to_variable = { factory_everyday_goods_amount = 1 }
			add_to_variable = { factory_everyday_goods_money = factory_everyday_goods_construction_investment_money }
			set_variable = { factory_everyday_goods_construction_investment_money = 0 }
			set_variable = { factory_everyday_goods_construction_industrial_goods_need = 0 }

			factories_update = yes
		}
	}
	start_luxury_goods_factory_construction = {
		#Scope: State
		#Starts the construction of an luxury goods factory. If one is already in construction, this does nothing.
		#INPUT:
			#investment_money_temp - Money put into the initial construction
			#factory_luxury_goods_construction_government_subsidized - state flag
				# - If the flag exists, then the government will pay all additional costs after the initial investment 
		#OUTPUT:
			#investment_money_temp - Money left over after investment

		if = {
			limit = {
				NOT = { has_state_flag = factory_luxury_goods_in_construction }
			}
			set_state_flag = factory_luxury_goods_in_construction

			set_variable = { factory_luxury_goods_construction_investment_money = investment_money_temp }
			
			set_variable = { factory_luxury_goods_construction_industrial_goods_need = global.factory_luxury_goods_construction_industrial_goods_base_need }
			multiply_variable = { factory_luxury_goods_construction_industrial_goods_need = factory_employment_amount_per_factory }
			divide_variable = { factory_luxury_goods_construction_industrial_goods_need = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_luxury_goods_construction_industrial_goods_need = modifier_temp }
			
			set_temp_variable = { investment_money_max_temp = factory_luxury_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 2 }
			if = {
				limit = {
					check_variable = { investment_money_max_temp < factory_luxury_goods_construction_investment_money }
				}
				set_variable = { factory_luxury_goods_construction_investment_money = investment_money_max_temp }
				subtract_from_temp_variable = { investment_money_temp = factory_luxury_goods_construction_investment_money }
			}
			else = {
				set_temp_variable = { investment_money_temp = 0 }
			}
			factories_update = yes
			add_to_variable = { update_state_econ_window = 1 }
		}
	}
	end_luxury_goods_factory_construction = {
		#Scope: State
		if = {
			limit = {
				has_state_flag = factory_luxury_goods_in_construction
				check_variable = { factory_luxury_goods_construction_industrial_goods_need < 0.01 }
			}
			clr_state_flag = factory_luxury_goods_in_construction
			clr_state_flag = factory_luxury_goods_construction_government_subsidized

			add_to_variable = { factory_luxury_goods_amount = 1 }
			add_to_variable = { factory_luxury_goods_money = factory_luxury_goods_investment_money }
			set_variable = { factory_luxury_goods_investment_money = 0 }
			set_variable = { factory_luxury_goods_construction_industrial_goods_need = 0 }

			factories_update = yes
		}
	}
	start_industrial_goods_factory_construction = {
		#Scope: State
		#Starts the construction of an industrial goods factory. If one is already in construction, this does nothing.
		#INPUT:
			#investment_money_temp - Money put into the initial construction
			#factory_industrial_goods_construction_government_subsidized - state flag
				# - If the flag exists, then the government will pay all additional costs after the initial investment 
		#OUTPUT:
			#investment_money_temp - Money left over after investment

		if = {
			limit = {
				NOT = { has_state_flag = factory_industrial_goods_in_construction }
			}
			set_state_flag = factory_industrial_goods_in_construction

			set_variable = { factory_industrial_goods_construction_investment_money = investment_money_temp }
			
			set_variable = { factory_industrial_goods_construction_industrial_goods_need = global.factory_industrial_goods_construction_industrial_goods_base_need }
			multiply_variable = { factory_industrial_goods_construction_industrial_goods_need = factory_employment_amount_per_factory }
			divide_variable = { factory_industrial_goods_construction_industrial_goods_need = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { factory_industrial_goods_construction_industrial_goods_need = modifier_temp }
			
			set_temp_variable = { investment_money_max_temp = factory_industrial_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 2 }
			if = {
				limit = {
					check_variable = { investment_money_max_temp < factory_industrial_goods_construction_investment_money }
				}
				set_variable = { factory_industrial_goods_construction_investment_money = investment_money_max_temp }
				subtract_from_temp_variable = { investment_money_temp = factory_industrial_goods_construction_investment_money }
			}
			else = {
				set_temp_variable = { investment_money_temp = 0 }
			}
			factories_update = yes
			add_to_variable = { update_state_econ_window = 1 }
		}
	}
	end_industrial_goods_factory_construction = {
		#Scope: State
		if = {
			limit = {
				has_state_flag = factory_industrial_goods_in_construction
				check_variable = { factory_industrial_goods_construction_industrial_goods_need < 0.01 }
			}
			clr_state_flag = factory_industrial_goods_in_construction
			clr_state_flag = factory_industrial_goods_construction_government_subsidized

			add_to_variable = { factory_industrial_goods_amount = 1 }
			add_to_variable = { factory_industrial_goods_money = factory_industrial_goods_investment_money }
			set_variable = { factory_industrial_goods_investment_money = 0 }
			set_variable = { factory_industrial_goods_construction_industrial_goods_need = 0 }

			factories_update = yes
		}
	}

	start_infrastructure_construction = {
		#Scope: State
		#Starts the construction of an industrial goods factory. If one is already in construction, this does nothing.
		#INPUT:
			#investment_money_temp - Money put into the initial construction
			#infrastructure_construction_government_subsidized - state flag
				# - If the flag exists, then the government will pay all additional costs after the initial investment 
		#OUTPUT:
			#investment_money_temp - Money left over after investment

		if = {
			limit = {
				NOT = { has_state_flag = infrastructure_in_construction }
			}
			set_state_flag = infrastructure_in_construction

			set_variable = { infrastructure_construction_investment_money = investment_money_temp }
			
			set_variable = { infrastructure_construction_industrial_goods_need = global.infrastructure_construction_industrial_goods_base_need }
			set_temp_variable = { construction_need_temp = infrastructure_level }
			multiply_temp_variable = { construction_need_temp = global.infrastructure_construction_industrial_goods_base_need_increase_per_level }
			add_to_variable = { infrastructure_construction_industrial_goods_need = construction_need_temp }
			set_temp_variable = { modifier_temp = infrastructure_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { infrastructure_construction_industrial_goods_need = modifier_temp }
			
			set_temp_variable = { investment_money_max_temp = infrastructure_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 2 }
			if = {
				limit = {
					check_variable = { investment_money_max_temp < infrastructure_construction_investment_money }
				}
				set_variable = { infrastructure_construction_investment_money = investment_money_max_temp }
				subtract_from_temp_variable = { investment_money_temp = infrastructure_construction_investment_money }
			}
			else = {
				set_temp_variable = { investment_money_temp = 0 }
			}
			add_to_variable = { update_state_econ_window = 1 }
		}
	}
	end_infrastructure_construction = {
		#Scope: State
		if = {
			limit = {
				has_state_flag = infrastructure_in_construction
				check_variable = { infrastructure_construction_industrial_goods_need < 0.001 }
			}
			clr_state_flag = infrastructure_in_construction
			clr_state_flag = infrastructure_construction_government_subsidized

			add_building_construction = {
				type = infrastructure
				level = 1
				instant_build = yes
			}
			add_to_variable = { pops_money = infrastructure_investment_money }
			set_variable = { infrastructure_investment_money = 0 }
			set_variable = { infrastructure_construction_industrial_goods_need = 0 }
		}
	}

	change_upper_strata_income_tax = {
		#Scope: Country
		#Increases/Decreases the Upper Strata Income Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { income_tax_upper_strata_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - Upper class get angerry

			if = {
				limit = {
					check_variable = { income_tax_upper_strata_percentage > 100 }
				}
				set_variable = { income_tax_upper_strata_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - Upper Class become happy

			if = {
				limit = {
					check_variable = { income_tax_upper_strata_percentage < 0 }
				}
				set_variable = { income_tax_upper_strata_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	change_middle_strata_income_tax = {
		#Scope: Country
		#Increases/Decreases the Middle Strata Income Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { income_tax_middle_strata_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - Middle class get angerry

			if = {
				limit = {
					check_variable = { income_tax_middle_strata_percentage > 100 }
				}
				set_variable = { income_tax_middle_strata_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - Middle Class become happy

			if = {
				limit = {
					check_variable = { income_tax_middle_strata_percentage < 0 }
				}
				set_variable = { income_tax_middle_strata_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	change_lower_strata_income_tax = {
		#Scope: Country
		#Increases/Decreases the Lower Strata Income Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { income_tax_lower_strata_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - Lower class get angerry

			if = {
				limit = {
					check_variable = { income_tax_lower_strata_percentage > 100 }
				}
				set_variable = { income_tax_lower_strata_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - Lower Class become happy

			if = {
				limit = {
					check_variable = { income_tax_lower_strata_percentage < 0 }
				}
				set_variable = { income_tax_lower_strata_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	
	change_sales_tax = {
		#Scope: Country
		#Increases/Decreases the Sales Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { sales_tax_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { sales_tax_percentage > 100 }
				}
				set_variable = { sales_tax_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { sales_tax_percentage < 0 }
				}
				set_variable = { sales_tax_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	change_corporate_tax = {
		#Scope: Country
		#Increases/Decreases the Corporate Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { corporate_tax_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - Corporations get angerry

			if = {
				limit = {
					check_variable = { corporate_tax_percentage > 100 }
				}
				set_variable = { corporate_tax_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - Corporations become happy

			if = {
				limit = {
					check_variable = { corporate_tax_percentage < 0 }
				}
				set_variable = { corporate_tax_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	change_import_tariff = {
		#Scope: Country
		#Increases/Decreases the Import Tariff level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { import_tariff_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { import_tariff_percentage > 100 }
				}
				set_variable = { import_tariff_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { import_tariff_percentage < 0 }
				}
				set_variable = { import_tariff_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	change_export_tariff = {
		#Scope: Country
		#Increases/Decreases the Export Tariff level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { export_tariff_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { export_tariff_percentage > 100 }
				}
				set_variable = { export_tariff_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { export_tariff_percentage < 0 }
				}
				set_variable = { export_tariff_percentage = 0 }
			}
		}
		taxes_update = yes
	}
	
	change_military_spending = {
		#Scope: Country
		#Increases/Decreases the Military Spending level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { military_spending_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { military_spending_percentage > 100 }
				}
				set_variable = { military_spending_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { military_spending_percentage < 0 }
				}
				set_variable = { military_spending_percentage = 0 }
			}
		}
		calculate_military_demand = yes
		spending_update = yes
	}
	change_intelligence_spending = {
		#Scope: Country
		#Increases/Decreases the Intelligence Spending level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { intelligence_spending_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { intelligence_spending_percentage > 100 }
				}
				set_variable = { intelligence_spending_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { intelligence_spending_percentage < 0 }
				}
				set_variable = { intelligence_spending_percentage = 0 }
			}
		}
		spending_update = yes
	}
	change_construction_spending = {
		#Scope: Country
		#Increases/Decreases the Construction Spending level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { construction_spending_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { construction_spending_percentage > 100 }
				}
				set_variable = { construction_spending_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { construction_spending_percentage < 0 }
				}
				set_variable = { construction_spending_percentage = 0 }
			}
		}
		spending_update = yes
	}
	change_import_subsidy = {
		#Scope: Country
		#Increases/Decreases the Import Subsidy level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { import_subsidy_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { import_subsidy_percentage > 100 }
				}
				set_variable = { import_subsidy_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { import_subsidy_percentage < 0 }
				}
				set_variable = { import_subsidy_percentage = 0 }
			}
		}
		spending_update = yes
	} 
	change_export_subsidy = {
		#Scope: Country
		#Increases/Decreases the Export Subsidy level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { export_subsidy_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { export_subsidy_percentage > 100 }
				}
				set_variable = { export_subsidy_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { export_subsidy_percentage < 0 }
				}
				set_variable = { export_subsidy_percentage = 0 }
			}
		}
		spending_update = yes
	} 
	change_infrastructure_subsidy = {
		#Scope: Country
		#Increases/Decreases the Infrastructure Subsidy level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { infrastructure_subsidy_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { infrastructure_subsidy_percentage > 100 }
				}
				set_variable = { infrastructure_subsidy_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { infrastructure_subsidy_percentage < 0 }
				}
				set_variable = { infrastructure_subsidy_percentage = 0 }
			}
		}
		spending_update = yes
	} 
	change_industrial_subsidy = {
		#Scope: Country
		#Increases/Decreases the Industrial Subsidy level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%
		
		add_to_variable = { industrial_subsidy_percentage = percent_change_temp }
		if = {
			limit = {
				check_variable = { percent_change_temp > 0 }
			}
			#TODO - People get angerry

			if = {
				limit = {
					check_variable = { industrial_subsidy_percentage > 100 }
				}
				set_variable = { industrial_subsidy_percentage = 100 }
			}
		}
		else_if = {
			limit = {
				check_variable = { percent_change_temp < 0 }
			}
			#TODO - People become happy

			if = {
				limit = {
					check_variable = { industrial_subsidy_percentage < 0 }
				}
				set_variable = { industrial_subsidy_percentage = 0 }
			}
		}
		spending_update = yes
	}

	borrow_money = {
		#Scope: Country
		#Borrows money. Automatically caps at the maximum amount you can borrow.
		#INPUT:
			#borrow_money_temp - Amount of money to borrow. Non-integer amounts are accepted but integers are preferable
			#country_temp - Which country to specifically borrow from, set to 0 to borrow money from any country
		
		if = {
			limit = {
				check_variable = { borrow_money_temp > 0 }
			}

			set_temp_variable = { borrow_temp = borrow_money_temp }
			subtract_from_temp_variable = { borrow_temp = 0.5 }
			round_temp_variable = borrow_temp
			
			if = {
				limit = {
					tag = country_temp
				}
				#Borrow from Locals
				set_temp_variable = { borrow_temp_k = borrow_temp }
				divide_temp_variable = { borrow_temp_k = 1000 }
				if = {
					limit = {
						check_variable = { borrow_temp_k > national_bank_amount_left_k }
					}
					set_temp_variable = { borrow_temp_k = national_bank_amount_left_k }
				}
				if = {
					limit = {
						check_variable = { borrow_temp_k < 0 }
					}
					set_temp_variable = { borrow_temp_k = 0 }
				}
				else = {
					set_temp_variable = { borrow_temp = borrow_temp_k }
					multiply_temp_variable = { borrow_temp = 1000 }
					add_to_variable = { treasury = borrow_temp }
					if = {
						limit = {
							is_in_array = { array = debt_to_bank_country value = THIS }
						}
						for_each_loop = {
							array = debt_to_bank_country
							value = cc
							index = iii
							break = bank_break

							if = {
								limit = {
									tag = cc
								}
								add_to_variable = { debt_to_bank_amount^iii = borrow_temp }
								set_temp_variable = { bank_break = 1 }
							}
						}
						for_each_loop = {
							array = money_lent_country
							value = cc
							index = iii
							break = lent_break

							if = {
								limit = {
									tag = cc
								}
								add_to_variable = { money_lent_amount^iii = borrow_temp }
								set_temp_variable = { lent_break = 1 }
							}
						}
					}
					else = {
						add_to_array = { debt_to_bank_country = THIS }
						add_to_array = { debt_to_bank_amount = borrow_temp }
						add_to_array = { money_lent_country = THIS }
						add_to_array = { money_lent_amount = borrow_temp }
					}

				}

			}
			else_if = {
				limit = {
					check_variable = { country_temp = 0  }
				}
				set_variable = { borrow_money_amount_left = borrow_temp }
				#Borrow from Cheapest Banks
				for_each_loop = {
					array = global_bank_countries
					index = ii
					value = country_bank_temp
					break = bb

					set_temp_variable = { borrow_temp_k = borrow_money_amount_left }
					divide_temp_variable = { borrow_temp_k = 1000 }
					if = {
						limit = {
							tag = country_bank_temp
						}
						if = {
							limit = {
								check_variable = { borrow_temp_k > national_bank_amount_left_k }
							}
							set_temp_variable = { borrow_temp_k = national_bank_amount_left_k }
						}
					}
					else = {
						set_temp_variable = { national_bank_amount_left_k_temp = national_bank_amount_left_k }
						subtract_from_temp_variable = { national_bank_amount_left_k_temp = 1 }
						if = {
							limit = {
								check_variable = { borrow_temp_k > national_bank_amount_left_k_temp }
							}
							set_temp_variable = { borrow_temp_k = national_bank_amount_left_k_temp }
						}
					}

					#Next Cheapest
					set_temp_variable = { ii_temp = ii }
					add_to_temp_variable = { ii_temp = 1 }
					if = {
						limit = {
							check_variable = { ii_temp < global_bank_countries^num }
						}
						set_temp_variable = { interest_rate_temp = global_bank_interest_rate^ii_temp }
						subtract_from_temp_variable = { interest_rate_temp = global_bank_interest_rate^ii }
						add_to_temp_variable = { interest_rate_temp = global.loan_scarcity_increase_willingness }

						set_temp_variable = { borrow_limit_temp_k = country_bank_temp:national_bank_amount_k }
						divide_temp_variable = { borrow_limit_temp_k = global.loan_scarcity_rate }
						multiply_temp_variable = { borrow_limit_temp_k = interest_rate_temp }

						if = {
							limit = {
								check_variable = { borrow_temp_k > borrow_limit_temp_k }
							}
							set_temp_variable = { borrow_temp_k = borrow_limit_temp_k }
						}
					}
					
					if = {
						limit = {
							check_variable = { borrow_temp_k < 0 }
						}
						set_temp_variable = { borrow_temp_k = 0 }
					}
					else = {
						set_temp_variable = { borrow_temp = borrow_temp_k }
						multiply_temp_variable = { borrow_temp = 1000 }
						if = {
							limit = {
								is_in_array = { array = debt_to_bank_country value = country_bank_temp }
							}
							for_each_loop = {
								array = debt_to_bank_country
								value = cc
								index = iii
								break = bank_break

								if = {
									limit = {
										check_variable = { cc = country_bank_temp }
									}
									add_to_variable = { debt_to_bank_amount^iii = borrow_temp }
									set_temp_variable = { bank_break = 1 }
								}
							}
							for_each_loop = {
								array = country_bank_temp:money_lent_country
								value = cc
								index = iii
								break = lent_break

								if = {
									limit = {
										check_variable = { cc = country_bank_temp }
									}
									add_to_variable = { cc:money_lent_amount^iii = borrow_temp }
									set_temp_variable = { lent_break = 1 }
								}
							}
						}
						else = {
							add_to_array = { debt_to_bank_country = country_bank_temp }
							add_to_array = { debt_to_bank_amount = borrow_temp }
							add_to_array = { country_bank_temp:money_lent_country = THIS }
							add_to_array = { country_bank_temp:money_lent_amount = borrow_temp }
						}
						add_to_variable = { treasury = borrow_temp }
						subtract_from_variable = { borrow_money_amount_left = borrow_temp }

						national_bank_update = yes
						if = {
							limit = {
								check_variable = { borrow_money_amount_left < 0.001 }
							}
							set_temp_variable = { bb = 1 }
						}
					}
				}
			}
			else_if = {
				limit = {
					check_variable = { country_temp > 1000000 }
				}
				#Borrow from foreign country
				var:country_temp = {
					set_temp_variable = { borrow_temp_k = borrow_temp }
					divide_temp_variable = { borrow_temp_k = 1000 }
					set_temp_variable = { national_bank_amount_left_k_temp = national_bank_amount_left_k }
					subtract_from_temp_variable = { national_bank_amount_left_k_temp = 1 }
					if = {
						limit = {
							check_variable = { borrow_temp_k > national_bank_amount_left_k_temp }
						}
						set_temp_variable = { borrow_temp_k = national_bank_amount_left_k_temp }
					}
					if = {
						limit = {
							check_variable = { borrow_temp_k < 0 }
						}
						set_temp_variable = { borrow_temp_k = 0 }
					}
					else = {

						set_temp_variable = { borrow_temp = borrow_temp_k }
						multiply_temp_variable = { borrow_temp = 1000 }
						if = {
							limit = {
								is_in_array = { array = PREV.debt_to_bank_country value = THIS }
							}
							for_each_loop = {
								array = PREV.debt_to_bank_country
								value = cc
								index = iii
								break = bank_break

								if = {
									limit = {
										tag = cc
									}
									add_to_variable = { PREV.debt_to_bank_amount^iii = borrow_temp }
									set_temp_variable = { bank_break = 1 }
								}
							}
							for_each_loop = {
								array = money_lent_country
								value = cc
								index = iii
								break = lent_break

								if = {
									limit = {
										check_variable = { cc = PREV }
									}
									add_to_variable = { money_lent_amount^iii = borrow_temp }
									set_temp_variable = { lent_break = 1 }
								}
							}
						}
						else = {
							add_to_array = { PREV.debt_to_bank_country = THIS }
							add_to_array = { PREV.debt_to_bank_amount = borrow_temp }
							add_to_array = { money_lent_country = PREV }
							add_to_array = { money_lent_amount = borrow_temp }
						}
						add_to_variable = { PREV.treasury = borrow_temp }

						national_bank_update = yes
					}
				}
			}

			national_debt_update = yes
			national_bank_update = yes
		}
	}
	repay_debt = {
		#Scope: Country
		#Repays oustanding debt. Automatically caps at treasury amount.
		#INPUT:
			#debt_repayment_temp - Amount of debt to repay. Non-integer amounts are accepted but integers are preferable
			#country_temp - Which country to specifically repay to, set to 0 to repay debts owed to any country
			#			  - If the repay amount is higher than the owed amount, only the owed amount is payed. The excess is not payed out further
		
		if = {
			limit = {
				check_variable = { treasury > 1 }
				check_variable = { debt_repayment_temp > 0 }
			}
			if = {
				limit = {
					check_variable = { debt_repayment_temp > treasury }
				}
				set_temp_variable = { debt_repayment_temp = treasury }
			}
			subtract_from_temp_variable = { debt_repayment_temp = 0.5 }
			round_temp_variable = debt_repayment_temp

			if = {
				limit = {
					tag = country_temp
				}
				
				#Paying back to locals
				if = {
					limit = {
						check_variable = { debt_repayment_temp > debt_to_national_bank }
					}
					set_temp_variable = { debt_repayment_temp = debt_to_national_bank }
				}
				set_temp_variable = { debt_repayment_temp_k = debt_repayment_temp }
				divide_temp_variable = { debt_repayment_temp_k = 1000 }
				add_to_variable = { national_bank_amount_left_k = debt_repayment_temp_k }
				if = {
					limit = {
						check_variable = { debt_repayment_temp_k < 0 }
					}
					set_temp_variable = { debt_repayment_temp_k = 0 }
				}
				else = {
					if = {
						limit = {
							is_in_array = { array = debt_to_bank_country value = THIS }
						}
						set_temp_variable = { debt_repayment_temp = debt_repayment_temp_k }
						multiply_temp_variable = { debt_repayment_temp = 1000 }
						subtract_from_variable = { treasury = debt_repayment_temp }

						for_each_loop = {
							array = debt_to_bank_country
							value = cc
							index = iii
							break = bank_break

							if = {
								limit = {
									tag = cc
								}
								subtract_from_variable = { debt_to_bank_amount^iii = debt_repayment_temp }
								if = {
									limit = {
										check_variable = { debt_to_bank_amount^iii < 0.001 }
									}
									remove_from_array = { array = debt_to_bank_amount index = iii }
									remove_from_array = { array = debt_to_bank_country index = iii }
								}
								set_temp_variable = { bank_break = 1 }
							}
						}
						for_each_loop = {
							array = money_lent_country
							value = cc
							index = iii
							break = lent_break

							if = {
								limit = {
									tag = cc
								}
								subtract_from_variable = { money_lent_amount^iii = debt_repayment_temp }
								if = {
									limit = {
										check_variable = { money_lent_amount^iii < 0.001 }
									}
									remove_from_array = { array = money_lent_amount index = iii }
									remove_from_array = { array = money_lent_country index = iii }
								}
								set_temp_variable = { lent_break = 1 }
							}
						}
						national_debt_update = yes
						national_bank_update = yes
					}
				}
			}
			else_if = {
				limit = {
					check_variable = { country_temp = 0  }
				}
				set_variable = { debt_repayment_amount_left = debt_repayment_temp }
				set_temp_variable = { length_temp = debt_to_bank_country^ii }
				set_temp_variable = { ii = 0 }
				#Repay to Banks with highest interest rates
				while_loop_effect = {
					limit = {
						check_variable = { ii < length_temp }
					}
					break = bb
					set_temp_variable = { length_temp = debt_to_bank_country^num }
					set_temp_variable = { country_bank_temp = debt_to_bank_country^ii }
					
					set_temp_variable = { debt_repayment_temp = debt_repayment_amount_left }
					if = {
						limit = {
							check_variable = { debt_repayment_temp > debt_to_bank_amount^ii }
						}
						set_temp_variable = { debt_repayment_temp = debt_to_bank_amount^ii }
					}
					set_temp_variable = { debt_repayment_temp_k = debt_repayment_temp }
					divide_temp_variable = { debt_repayment_temp_k = 1000 }

					if = {
						limit = {
							check_variable = { debt_repayment_temp_k < 0 }
						}
						set_temp_variable = { debt_repayment_temp_k = 0 }
					}
					else = {
						set_temp_variable = { debt_repayment_temp = debt_repayment_temp_k }
						multiply_temp_variable = { debt_repayment_temp = 1000 }
						
						subtract_from_variable = { debt_to_bank_amount^ii = debt_repayment_temp }
						set_variable = { var1 = debt_to_bank_amount^ii }
						for_each_loop = {
							array = country_bank_temp:money_lent_country
							value = cc
							index = iii
							break = lent_break

							if = {
								limit = {
									check_variable = { cc = THIS }
								}
								subtract_from_variable = { country_bank_temp:money_lent_amount^iii = debt_repayment_temp }
								if = {
									limit = {
										check_variable = { country_bank_temp:money_lent_amount^iii < 0.001 }
									}
									remove_from_array = { array = country_bank_temp:money_lent_amount index = iii }
									remove_from_array = { array = country_bank_temp:money_lent_country index = iii }
								}
								set_temp_variable = { lent_break = 1 }
							}
						}
						subtract_from_variable = { treasury = debt_repayment_temp }
						subtract_from_variable = { debt_repayment_amount_left = debt_repayment_temp }
						var:country_bank_temp = {
							national_bank_update = yes
						}
						if = {
							limit = {
								check_variable = { debt_to_bank_amount^ii < 0.001 }
							}
							remove_from_array = { array = debt_to_bank_amount index = ii }
							remove_from_array = { array = debt_to_bank_country index = ii }
						}
						subtract_from_temp_variable = { ii = 1 }

						if = {
							limit = {
								check_variable = { debt_repayment_amount_left < 0.001 }
							}
							set_temp_variable = { bb = 1 }
						}
					}
					add_to_temp_variable = { ii = 1 }
				}
				national_debt_update = yes
				national_bank_update = yes
			}
			else_if = {
				limit = {
					check_variable = { country_temp > 1000000 }
				}
				#Repay to a foreign country's bank				
				if = {
					limit = {
						check_variable = { debt_repayment_temp > debt_to_bank_amount^ii }
					}
					set_temp_variable = { debt_repayment_temp = debt_to_bank_amount^ii }
				}
				set_temp_variable = { debt_repayment_temp_k = debt_repayment_temp }
				divide_temp_variable = { debt_repayment_temp_k = 1000 }

				if = {
					limit = {
						check_variable = { debt_repayment_temp_k < 0 }
					}
					set_temp_variable = { debt_repayment_temp_k = 0 }
				}
				else = {
					set_temp_variable = { debt_repayment_temp = debt_repayment_temp_k }
					multiply_temp_variable = { debt_repayment_temp = 1000 }
					
					subtract_from_variable = { debt_to_bank_amount^ii = debt_repayment_temp }
					for_each_loop = {
						array = country_temp:money_lent_country
						value = cc
						index = iii
						break = lent_break

						if = {
							limit = {
								check_variable = { cc = THIS }
							}
							subtract_from_variable = { country_temp:money_lent_amount^iii = debt_repayment_temp }
							if = {
								limit = {
									check_variable = { country_temp:money_lent_amount^iii < 0.001 }
								}
								remove_from_array = { array = country_temp:money_lent_amount index = iii }
								remove_from_array = { array = country_temp:money_lent_country index = iii }
							}
							set_temp_variable = { lent_break = 1 }
						}
					}
					subtract_from_variable = { treasury = debt_repayment_temp }
					var:country_temp = {
						national_bank_update = yes
					}
					if = {
						limit = {
							check_variable = { debt_to_bank_amount^ii < 0.001 }
						}
						remove_from_array = { array = debt_to_bank_amount index = ii }
						remove_from_array = { array = debt_to_bank_country index = ii }
					}

					national_debt_update = yes
					national_bank_update = yes
				}
			}
		}
	}
#

#Supply, Demand, Price
	adjust_national_price = {
		set_temp_variable = { brk_v = 0 }
		while_loop_effect = {
			limit = {
				OR = {
					NOT = { check_variable = { life_goods_supply = life_goods_demand } }
					NOT = { check_variable = { everyday_goods_supply = everyday_goods_demand } }
					NOT = { check_variable = { luxury_goods_supply = luxury_goods_demand } }
					NOT = { check_variable = { services_supply = services_demand } }
					NOT = { check_variable = { raw_goods_supply = raw_goods_demand } }
					NOT = { check_variable = { industrial_goods_supply = industrial_goods_demand } }
				}
				check_variable = { brk_v < 5 }
			}
			#Changing Prices
				#Life Goods
					if = {
						limit = {
							set_temp_variable = { supply_low = life_goods_supply }
							divide_temp_variable = { supply_low = 1.03 }
							set_temp_variable = { supply_high = life_goods_supply }
							multiply_temp_variable = { supply_high = 1.03 }

							OR = {
								check_variable = { supply_low > life_goods_demand }
								check_variable = { supply_high < life_goods_demand }
							}
						}

						if = {
							limit = {
								NOT = { check_variable = { life_goods_demand = 0 } }
								NOT = { check_variable = { life_goods_supply = 0 } }
							}
							set_temp_variable = { multiplier_temp = life_goods_demand }
							divide_temp_variable = { multiplier_temp = life_goods_supply }
							subtract_from_temp_variable = { multiplier_temp = 1 }
							divide_temp_variable = { multiplier_temp = 2 }
							add_to_temp_variable = { multiplier_temp = 1 }
							multiply_variable = { life_goods_price = multiplier_temp }
						}
						else_if = {
							limit = {
								check_variable = { life_goods_demand < 0.01 }
								check_variable = { life_goods_need > 0.01 }
							}
							multiply_variable = { life_goods_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { life_goods_demand = 0 }
								check_variable = { life_goods_need > 0 }
							}
							multiply_variable = { life_goods_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { life_goods_supply = 0 }
								check_variable = { life_goods_demand > 0.01 }
							}
							multiply_variable = { life_goods_price = 1.2 }
							add_to_temp_variable = { brk_v = 10 }
						}

						if = {
							limit = {
								check_variable = { life_goods_price < 0.01 }
							}
							set_variable = { life_goods_price = 0.01 }
						}
					}
				#
				#Everyday Goods
					if = {
						limit = {
							set_temp_variable = { supply_low = everyday_goods_supply }
							divide_temp_variable = { supply_low = 1.03 }
							set_temp_variable = { supply_high = everyday_goods_supply }
							multiply_temp_variable = { supply_high = 1.03 }

							OR = {
								check_variable = { supply_low > everyday_goods_demand }
								check_variable = { supply_high < everyday_goods_demand }
							}
						}

						if = {
							limit = {
								NOT = { check_variable = { everyday_goods_demand = 0 } }
								NOT = { check_variable = { everyday_goods_supply = 0 } }
							}
							set_temp_variable = { multiplier_temp = everyday_goods_demand }
							divide_temp_variable = { multiplier_temp = everyday_goods_supply }
							subtract_from_temp_variable = { multiplier_temp = 1 }
							divide_temp_variable = { multiplier_temp = 2 }
							add_to_temp_variable = { multiplier_temp = 1 }
							multiply_variable = { everyday_goods_price = multiplier_temp }
						}
						else_if = {
							limit = {
								check_variable = { everyday_goods_demand < 0.01 }
								check_variable = { everyday_goods_need > 0.01 }
							}
							multiply_variable = { everyday_goods_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { everyday_goods_demand = 0 }
								check_variable = { everyday_goods_need > 0 }
							}
							multiply_variable = { everyday_goods_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { everyday_goods_supply = 0 }
								check_variable = { everyday_goods_demand > 0.01 }
							}
							multiply_variable = { everyday_goods_price = 1.2 }
							add_to_temp_variable = { brk_v = 10 }
						}

						if = {
							limit = {
								check_variable = { everyday_goods_price < 0.01 }
							}
							set_variable = { everyday_goods_price = 0.01 }
						}
					}
				#
				#Luxury Goods
					if = {
						limit = {
							set_temp_variable = { supply_low = luxury_goods_supply }
							divide_temp_variable = { supply_low = 1.03 }
							set_temp_variable = { supply_high = luxury_goods_supply }
							multiply_temp_variable = { supply_high = 1.03 }

							OR = {
								check_variable = { supply_low > luxury_goods_demand }
								check_variable = { supply_high < luxury_goods_demand }
							}
						}

						if = {
							limit = {
								NOT = { check_variable = { luxury_goods_demand = 0 } }
								NOT = { check_variable = { luxury_goods_supply = 0 } }
							}
							set_temp_variable = { multiplier_temp = luxury_goods_demand }
							divide_temp_variable = { multiplier_temp = luxury_goods_supply }
							subtract_from_temp_variable = { multiplier_temp = 1 }
							divide_temp_variable = { multiplier_temp = 2 }
							add_to_temp_variable = { multiplier_temp = 1 }
							multiply_variable = { luxury_goods_price = multiplier_temp }
						}
						else_if = {
							limit = {
								check_variable = { luxury_goods_demand < 0.01 }
								check_variable = { luxury_goods_need > 0.01 }
							}
							multiply_variable = { luxury_goods_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { luxury_goods_demand = 0 }
								check_variable = { luxury_goods_need > 0 }
							}
							multiply_variable = { luxury_goods_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { luxury_goods_supply = 0 }
								check_variable = { luxury_goods_demand > 0.01 }
							}
							multiply_variable = { luxury_goods_price = 1.2 }
							add_to_temp_variable = { brk_v = 10 }
						}

						if = {
							limit = {
								check_variable = { luxury_goods_price < 0.01 }
							}
							set_variable = { luxury_goods_price = 0.01 }
						}
					}
				#
				#Services
					if = {
						limit = {
							set_temp_variable = { supply_low = services_supply }
							divide_temp_variable = { supply_low = 1.03 }
							set_temp_variable = { supply_high = services_supply }
							multiply_temp_variable = { supply_high = 1.03 }

							OR = {
								check_variable = { supply_low > services_demand }
								check_variable = { supply_high < services_demand }
							}
						}

						if = {
							limit = {
								NOT = { check_variable = { services_demand = 0 } }
								NOT = { check_variable = { services_supply = 0 } }
							}
							set_temp_variable = { multiplier_temp = services_demand }
							divide_temp_variable = { multiplier_temp = services_supply }
							subtract_from_temp_variable = { multiplier_temp = 1 }
							divide_temp_variable = { multiplier_temp = 2 }
							add_to_temp_variable = { multiplier_temp = 1 }
							multiply_variable = { services_price = multiplier_temp }
						}
						else_if = {
							limit = {
								check_variable = { services_demand < 0.01 }
								check_variable = { services_need > 0.01 }
							}
							multiply_variable = { services_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { services_demand = 0 }
								check_variable = { services_need > 0 }
							}
							multiply_variable = { services_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { services_supply = 0 }
								check_variable = { services_demand > 0.01 }
							}
							multiply_variable = { services_price = 1.2 }
							add_to_temp_variable = { brk_v = 10 }
						}

						if = {
							limit = {
								check_variable = { services_price < 0.01 }
							}
							set_variable = { services_price = 0.01 }
						}
					}
				#
				#Raw Goods
					if = {
						limit = {
							set_temp_variable = { supply_low = raw_goods_supply }
							divide_temp_variable = { supply_low = 1.03 }
							set_temp_variable = { supply_high = raw_goods_supply }
							multiply_temp_variable = { supply_high = 1.03 }

							OR = {
								check_variable = { supply_low > raw_goods_demand }
								check_variable = { supply_high < raw_goods_demand }
							}
						}

						if = {
							limit = {
								NOT = { check_variable = { raw_goods_demand = 0 } }
								NOT = { check_variable = { raw_goods_supply = 0 } }
							}
							set_temp_variable = { multiplier_temp = raw_goods_demand }
							divide_temp_variable = { multiplier_temp = raw_goods_supply }
							subtract_from_temp_variable = { multiplier_temp = 1 }
							divide_temp_variable = { multiplier_temp = 2 }
							add_to_temp_variable = { multiplier_temp = 1 }
							multiply_variable = { raw_goods_price = multiplier_temp }
						}
						else_if = {
							limit = {
								check_variable = { raw_goods_demand < 0.01 }
								check_variable = { raw_goods_need > 0.01 }
							}
							multiply_variable = { raw_goods_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { raw_goods_demand = 0 }
								check_variable = { raw_goods_need > 0 }
							}
							multiply_variable = { raw_goods_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { raw_goods_supply = 0 }
								check_variable = { raw_goods_demand > 0.01 }
							}
							multiply_variable = { raw_goods_price = 1.2 }
							add_to_temp_variable = { brk_v = 10 }
						}

						if = {
							limit = {
								check_variable = { raw_goods_price < 0.01 }
							}
							set_variable = { raw_goods_price = 0.01 }
						}
					}
				#
				#Industrial Goods
					if = {
						limit = {
							set_temp_variable = { supply_low = industrial_goods_supply }
							divide_temp_variable = { supply_low = 1.03 }
							set_temp_variable = { supply_high = industrial_goods_supply }
							multiply_temp_variable = { supply_high = 1.03 }

							OR = {
								check_variable = { supply_low > industrial_goods_demand }
								check_variable = { supply_high < industrial_goods_demand }
							}
						}

						if = {
							limit = {
								NOT = { check_variable = { industrial_goods_demand = 0 } }
								NOT = { check_variable = { industrial_goods_supply = 0 } }
							}
							set_temp_variable = { multiplier_temp = industrial_goods_demand }
							divide_temp_variable = { multiplier_temp = industrial_goods_supply }
							subtract_from_temp_variable = { multiplier_temp = 1 }
							divide_temp_variable = { multiplier_temp = 2 }
							add_to_temp_variable = { multiplier_temp = 1 }
							multiply_variable = { industrial_goods_price = multiplier_temp }
						}
						else_if = {
							limit = {
								check_variable = { industrial_goods_demand < 0.01 }
								check_variable = { industrial_goods_need > 0.01 }
							}
							multiply_variable = { industrial_goods_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { industrial_goods_demand = 0 }
								check_variable = { industrial_goods_need > 0 }
							}
							multiply_variable = { industrial_goods_price = 0.9 }
						}
						else_if = {
							limit = {
								check_variable = { industrial_goods_supply = 0 }
								check_variable = { industrial_goods_demand > 0.01 }
							}
							multiply_variable = { industrial_goods_price = 1.2 }
							add_to_temp_variable = { brk_v = 10 }
						}

						if = {
							limit = {
								check_variable = { industrial_goods_price < 0.01 }
							}
							set_variable = { industrial_goods_price = 0.01 }
						}
					}
				#
			#

			every_controlled_state = {
				calculate_demand = yes
			}
			calculate_national_supply_demand = yes
			
			add_to_temp_variable = { brk_v = 1 }
		}
	}
	calculate_national_supply_demand = {
		#Doesn't calculate on the state side. Only gets the supply/demand on the national side

		reset_supply = yes
		reset_demand = yes
		#Reset Offers & Requests
			set_variable = { life_goods_offers = 0 }
			set_variable = { life_goods_requests = 0 }

			set_variable = { everyday_goods_offers = 0 }
			set_variable = { everyday_goods_requests = 0 }

			set_variable = { luxury_goods_offers = 0 }
			set_variable = { luxury_goods_requests = 0 }

			set_variable = { raw_goods_offers = 0 }
			set_variable = { raw_goods_requests = 0 }

			set_variable = { industrial_goods_offers = 0 }
			set_variable = { industrial_goods_requests = 0 }
		#


		every_controlled_state = {
			#How many goods can be exchanged total
			set_temp_variable = { infra_cap = 10000 } #TODO: Infrastructure

			#Total amount of goods that should be exchanged
			set_temp_variable = { infra_stress = 0 }

			#Preliminary - Finding how much needs to be traded
				#Life Goods
					set_temp_variable = { life_goods_trade_temp = life_goods_supply }
					subtract_from_temp_variable = { life_goods_trade_temp = life_goods_demand }

					if = {
						limit = { 
							check_variable = { life_goods_trade_temp > 0 } #More Supply
						}
						add_to_temp_variable = { infra_stress = life_goods_trade_temp }
					}
					if = {
						limit = { 
							check_variable = { life_goods_trade_temp < 0 } #More Demand
						}
						subtract_from_temp_variable = { infra_stress = life_goods_trade_temp }
					}
				#
				#Everyday Goods
					set_temp_variable = { everyday_goods_trade_temp = everyday_goods_supply }
					subtract_from_temp_variable = { everyday_goods_trade_temp = everyday_goods_demand }

					if = {
						limit = { 
							check_variable = { everyday_goods_trade_temp > 0 } #More Supply
						}
						add_to_temp_variable = { infra_stress = everyday_goods_trade_temp }
					}
					if = {
						limit = { 
							check_variable = { everyday_goods_trade_temp < 0 } #More Demand
						}
						subtract_from_temp_variable = { infra_stress = everyday_goods_trade_temp }
					}
				#
				#Luxury Goods
					set_temp_variable = { luxury_goods_trade_temp = luxury_goods_supply }
					subtract_from_temp_variable = { luxury_goods_trade_temp = luxury_goods_demand }

					if = {
						limit = { 
							check_variable = { luxury_goods_trade_temp > 0 } #More Supply
						}
						add_to_temp_variable = { infra_stress = luxury_goods_trade_temp }
					}
					if = {
						limit = { 
							check_variable = { luxury_goods_trade_temp < 0 } #More Demand
						}
						subtract_from_temp_variable = { infra_stress = luxury_goods_trade_temp }
					}
				#
				#Services
					set_temp_variable = { services_trade_temp = services_supply }
					subtract_from_temp_variable = { services_trade_temp = services_demand }

					if = {
						limit = { 
							check_variable = { services_trade_temp > 0 } #More Supply
						}
						add_to_temp_variable = { infra_stress = services_trade_temp }
					}
					if = {
						limit = { 
							check_variable = { services_trade_temp < 0 } #More Demand
						}
						subtract_from_temp_variable = { infra_stress = services_trade_temp }
					}
				#
				#Raw Goods
					set_temp_variable = { raw_goods_trade_temp = raw_goods_supply }
					subtract_from_temp_variable = { raw_goods_trade_temp = raw_goods_demand }

					if = {
						limit = { 
							check_variable = { raw_goods_trade_temp > 0 } #More Supply
						}
						add_to_temp_variable = { infra_stress = raw_goods_trade_temp }
					}
					if = {
						limit = { 
							check_variable = { raw_goods_trade_temp < 0 } #More Demand
						}
						subtract_from_temp_variable = { infra_stress = raw_goods_trade_temp }
					}
				#
				#Industrial Goods
					set_temp_variable = { industrial_goods_trade_temp = industrial_goods_supply }
					subtract_from_temp_variable = { industrial_goods_trade_temp = industrial_goods_demand }

					if = {
						limit = { 
							check_variable = { industrial_goods_trade_temp > 0 } #More Supply
						}
						add_to_temp_variable = { infra_stress = industrial_goods_trade_temp }
					}
					if = {
						limit = { 
							check_variable = { industrial_goods_trade_temp < 0 } #More Demand
						}
						subtract_from_temp_variable = { infra_stress = industrial_goods_trade_temp }
					}
				#
			#

			#Capping Trade at infrastructure amount
				if = {
					limit = {
						check_variable = { infra_stress > infra_cap }
					}
					set_temp_variable = { trade_factor_temp = infra_cap }
					multiply_temp_variable = { trade_factor_temp = 100 }
					divide_temp_variable = { trade_factor_temp = infra_stress }

					#Multiply Each Amount & Divide by 100 to get true trade value
					multiply_temp_variable = { life_goods_trade_temp = trade_factor_temp }
					divide_temp_variable = { life_goods_trade_temp = 100 }
					
					multiply_temp_variable = { everyday_goods_trade_temp = trade_factor_temp }
					divide_temp_variable = { everyday_goods_trade_temp = 100 }
					
					multiply_temp_variable = { luxury_goods_trade_temp = trade_factor_temp }
					divide_temp_variable = { luxury_goods_trade_temp = 100 }
					
					multiply_temp_variable = { services_trade_temp = trade_factor_temp }
					divide_temp_variable = { services_trade_temp = 100 }
					
					multiply_temp_variable = { raw_goods_trade_temp = trade_factor_temp }
					divide_temp_variable = { raw_goods_trade_temp = 100 }
					
					multiply_temp_variable = { industrial_goods_trade_temp = trade_factor_temp }
					divide_temp_variable = { industrial_goods_trade_temp = 100 }
				}

				set_variable = { infrastructure_stress = infra_stress } #Storing amount for visualization
				set_variable = { infrastructure_stress_percentage = infra_stress }
				divide_variable = { infrastructure_stress_percentage = infra_cap }
			#

			#Final - Getting actual numbers
				#Life Goods
					if = {
						limit = { 
							check_variable = { life_goods_trade_temp > 0 } #More Supply
						}
						set_variable = { life_goods_trade_amount = life_goods_trade_temp }
						add_to_variable = { PREV.life_goods_offers = life_goods_trade_temp }
						add_to_temp_variable = { life_goods_trade_temp = life_goods_demand }
						
						add_to_variable = { PREV.life_goods_supply = life_goods_trade_temp }
						add_to_variable = { PREV.life_goods_demand = life_goods_demand }
					}
					if = {
						limit = { 
							check_variable = { life_goods_trade_temp < 0 } #More Demand
						}
						multiply_temp_variable = { life_goods_trade_temp = -1 }
						set_variable = { life_goods_trade_amount = life_goods_trade_temp }
						add_to_variable = { PREV.life_goods_requests = life_goods_trade_temp }
						add_to_temp_variable = { life_goods_trade_temp = life_goods_supply }

						add_to_variable = { PREV.life_goods_supply = life_goods_supply }
						add_to_variable = { PREV.life_goods_demand = life_goods_trade_temp }
					}
				#
				#Everyday Goods
					if = {
						limit = { 
							check_variable = { everyday_goods_trade_temp > 0 } #More Supply
						}
						set_variable = { everyday_goods_trade_amount = everyday_goods_trade_temp }
						add_to_variable = { PREV.everyday_goods_offers = everyday_goods_trade_temp }
						add_to_temp_variable = { everyday_goods_trade_temp = everyday_goods_demand }
						
						add_to_variable = { PREV.everyday_goods_supply = everyday_goods_trade_temp }
						add_to_variable = { PREV.everyday_goods_demand = everyday_goods_demand }
					}
					if = {
						limit = { 
							check_variable = { everyday_goods_trade_temp < 0 } #More Demand
						}
						multiply_temp_variable = { everyday_goods_trade_temp = -1 }
						set_variable = { everyday_goods_trade_amount = everyday_goods_trade_temp }
						add_to_variable = { PREV.everyday_goods_requests = everyday_goods_trade_temp }
						add_to_temp_variable = { everyday_goods_trade_temp = everyday_goods_supply }

						add_to_variable = { PREV.everyday_goods_supply = everyday_goods_supply }
						add_to_variable = { PREV.everyday_goods_demand = everyday_goods_trade_temp }
					}
				#
				#Luxury Goods
					if = {
						limit = { 
							check_variable = { luxury_goods_trade_temp > 0 } #More Supply
						}
						set_variable = { luxury_goods_trade_amount = luxury_goods_trade_temp }
						add_to_variable = { PREV.luxury_goods_offers = luxury_goods_trade_temp }
						add_to_temp_variable = { luxury_goods_trade_temp = luxury_goods_demand }
						
						add_to_variable = { PREV.luxury_goods_supply = luxury_goods_trade_temp }
						add_to_variable = { PREV.luxury_goods_demand = luxury_goods_demand }
					}
					if = {
						limit = { 
							check_variable = { luxury_goods_trade_temp < 0 } #More Demand
						}
						multiply_temp_variable = { luxury_goods_trade_temp = -1 }
						set_variable = { luxury_goods_trade_amount = luxury_goods_trade_temp }
						add_to_variable = { PREV.luxury_goods_requests = luxury_goods_trade_temp }
						add_to_temp_variable = { luxury_goods_trade_temp = luxury_goods_supply }

						add_to_variable = { PREV.luxury_goods_supply = luxury_goods_supply }
						add_to_variable = { PREV.luxury_goods_demand = luxury_goods_trade_temp }
					}
				#
				#Services
					if = {
						limit = { 
							check_variable = { services_trade_temp > 0 } #More Supply
						}
						set_variable = { services_trade_amount = services_trade_temp }
						add_to_variable = { PREV.services_offers = services_trade_temp }
						add_to_temp_variable = { services_trade_temp = services_demand }
						
						add_to_variable = { PREV.services_supply = services_trade_temp }
						add_to_variable = { PREV.services_demand = services_demand }
					}
					if = {
						limit = { 
							check_variable = { services_trade_temp < 0 } #More Demand
						}
						multiply_temp_variable = { services_trade_temp = -1 }
						set_variable = { services_trade_amount = services_trade_temp }
						add_to_variable = { PREV.services_requests = services_trade_temp }
						add_to_temp_variable = { services_trade_temp = services_supply }

						add_to_variable = { PREV.services_supply = services_supply }
						add_to_variable = { PREV.services_demand = services_trade_temp }
					}
				#
				#Raw Goods
					if = {
						limit = { 
							check_variable = { raw_goods_trade_temp > 0 } #More Supply
						}
						set_variable = { raw_goods_trade_amount = raw_goods_trade_temp }
						add_to_variable = { PREV.raw_goods_offers = raw_goods_trade_temp }
						add_to_temp_variable = { raw_goods_trade_temp = raw_goods_demand }
						
						add_to_variable = { PREV.raw_goods_supply = raw_goods_trade_temp }
						add_to_variable = { PREV.raw_goods_demand = raw_goods_demand }
					}
					if = {
						limit = { 
							check_variable = { raw_goods_trade_temp < 0 } #More Demand
						}
						multiply_temp_variable = { raw_goods_trade_temp = -1 }
						set_variable = { raw_goods_trade_amount = raw_goods_trade_temp }
						add_to_variable = { PREV.raw_goods_requests = raw_goods_trade_temp }
						add_to_temp_variable = { raw_goods_trade_temp = raw_goods_supply }

						add_to_variable = { PREV.raw_goods_supply = raw_goods_supply }
						add_to_variable = { PREV.raw_goods_demand = raw_goods_trade_temp }
					}
				#
				#Industrial Goods
					if = {
						limit = { 
							check_variable = { industrial_goods_trade_temp > 0 } #More Supply
						}
						set_variable = { industrial_goods_trade_amount = industrial_goods_trade_temp }
						add_to_variable = { PREV.industrial_goods_offers = industrial_goods_trade_temp }
						add_to_temp_variable = { industrial_goods_trade_temp = industrial_goods_demand }
						
						add_to_variable = { PREV.industrial_goods_supply = industrial_goods_trade_temp }
						add_to_variable = { PREV.industrial_goods_demand = industrial_goods_demand }
					}
					if = {
						limit = { 
							check_variable = { industrial_goods_trade_temp < 0 } #More Demand
						}
						multiply_temp_variable = { industrial_goods_trade_temp = -1 }
						set_variable = { industrial_goods_trade_amount = industrial_goods_trade_temp }
						add_to_variable = { PREV.industrial_goods_requests = industrial_goods_trade_temp }
						add_to_temp_variable = { industrial_goods_trade_temp = industrial_goods_supply }

						add_to_variable = { PREV.industrial_goods_supply = industrial_goods_supply }
						add_to_variable = { PREV.industrial_goods_demand = industrial_goods_trade_temp }
					}
				#
			#
		}
	}
	calculate_trade_coefficient = {
		# NOTE:	Make sure to clear coefficient variables after usage. 
		#		Don't want unnecessary vars hanging around

		#Life Goods
			if = {
				limit = {
					check_variable = { life_goods_offers > life_goods_requests }
				}
				set_variable = { life_goods_offers_coeff = life_goods_requests }
				multiply_variable = { life_goods_offers_coeff = 10 }
				divide_variable = { life_goods_offers_coeff = life_goods_offers }
				set_variable = { life_goods_requests_coeff = 10 }
			}
			else_if = {
				limit = {
					check_variable = { life_goods_offers < life_goods_requests }
				}
				set_variable = { life_goods_requests_coeff = life_goods_offers }
				multiply_variable = { life_goods_requests_coeff = 10 }
				divide_variable = { life_goods_requests_coeff = life_goods_requests }
				set_variable = { life_goods_offers_coeff = 10 }
			}
		#
		#Everyday Goods
			if = {
				limit = {
					check_variable = { everyday_goods_offers > everyday_goods_requests }
				}
				set_variable = { everyday_goods_offers_coeff = everyday_goods_requests }
				multiply_variable = { everyday_goods_offers_coeff = 10 }
				divide_variable = { everyday_goods_offers_coeff = everyday_goods_offers }
				set_variable = { everyday_goods_requests_coeff = 10 }
			}
			else_if = {
				limit = {
					check_variable = { everyday_goods_offers < everyday_goods_requests }
				}
				set_variable = { everyday_goods_requests_coeff = everyday_goods_offers }
				multiply_variable = { everyday_goods_requests_coeff = 10 }
				divide_variable = { everyday_goods_requests_coeff = everyday_goods_requests }
				set_variable = { everyday_goods_offers_coeff = 10 }
			}
		#
		#Luxury Goods
			if = {
				limit = {
					check_variable = { luxury_goods_offers > luxury_goods_requests }
				}
				set_variable = { luxury_goods_offers_coeff = luxury_goods_requests }
				multiply_variable = { luxury_goods_offers_coeff = 10 }
				divide_variable = { luxury_goods_offers_coeff = luxury_goods_offers }
				set_variable = { luxury_goods_requests_coeff = 10 }
			}
			else_if = {
				limit = {
					check_variable = { luxury_goods_offers < luxury_goods_requests }
				}
				set_variable = { luxury_goods_requests_coeff = luxury_goods_offers }
				multiply_variable = { luxury_goods_requests_coeff = 10 }
				divide_variable = { luxury_goods_requests_coeff = luxury_goods_requests }
				set_variable = { luxury_goods_offers_coeff = 10 }
			}
		#
		#Raw Goods
			if = {
				limit = {
					check_variable = { raw_goods_offers > raw_goods_requests }
				}
				set_variable = { raw_goods_offers_coeff = raw_goods_requests }
				multiply_variable = { raw_goods_offers_coeff = 10 }
				divide_variable = { raw_goods_offers_coeff = raw_goods_offers }
				set_variable = { raw_goods_requests_coeff = 10 }
			}
			else_if = {
				limit = {
					check_variable = { raw_goods_offers < raw_goods_requests }
				}
				set_variable = { raw_goods_requests_coeff = raw_goods_offers }
				multiply_variable = { raw_goods_requests_coeff = 10 }
				divide_variable = { raw_goods_requests_coeff = raw_goods_requests }
				set_variable = { raw_goods_offers_coeff = 10 }
			}
		#
		#Industrial Goods
			if = {
				limit = {
					check_variable = { industrial_goods_offers > industrial_goods_requests }
				}
				set_variable = { industrial_goods_offers_coeff = industrial_goods_requests }
				multiply_variable = { industrial_goods_offers_coeff = 10 }
				divide_variable = { industrial_goods_offers_coeff = industrial_goods_offers }
				set_variable = { industrial_goods_requests_coeff = 10 }
			}
			else_if = {
				limit = {
					check_variable = { industrial_goods_offers < industrial_goods_requests }
				}
				set_variable = { industrial_goods_requests_coeff = industrial_goods_offers }
				multiply_variable = { industrial_goods_requests_coeff = 10 }
				divide_variable = { industrial_goods_requests_coeff = industrial_goods_requests }
				set_variable = { industrial_goods_offers_coeff = 10 }
			}
		#
		#Services
			if = {
				limit = {
					check_variable = { services_offers > services_requests }
				}
				set_variable = { services_offers_coeff = services_requests }
				multiply_variable = { services_offers_coeff = 10 }
				divide_variable = { services_offers_coeff = services_offers }
				set_variable = { services_requests_coeff = 10 }
			}
			else_if = {
				limit = {
					check_variable = { services_offers < services_requests }
				}
				set_variable = { services_requests_coeff = services_offers }
				multiply_variable = { services_requests_coeff = 10 }
				divide_variable = { services_requests_coeff = services_requests }
				set_variable = { services_offers_coeff = 10 }
			}
		#
	}
	calculate_interstate_trade = {
		#Country Scope
		
		set_variable = { life_goods_trade_amount = 0 }
		set_variable = { everyday_goods_trade_amount = 0 }
		set_variable = { luxury_goods_trade_amount = 0 }
		set_variable = { services_trade_amount = 0 }
		set_variable = { raw_goods_trade_amount = 0 }
		set_variable = { industrial_goods_trade_amount = 0 }
		every_controlled_state = {
			#Life Goods
				if = { #Export
					limit = {
						check_variable = { life_goods_supply > life_goods_demand }
					}
					multiply_variable = { life_goods_trade_amount = PREV.life_goods_offers_coeff }
					divide_variable = { life_goods_trade_amount = 10 }

					subtract_from_variable = { life_goods_supply = life_goods_trade_amount }
					multiply_variable = { life_goods_trade_amount = -1 }
				}
				if = { #Import
					limit = {
						check_variable = { life_goods_supply < life_goods_demand }
					}
					multiply_variable = { life_goods_trade_amount = PREV.life_goods_requests_coeff }
					divide_variable = { life_goods_trade_amount = 10 }

					add_to_variable = { life_goods_supply = life_goods_trade_amount }
					add_to_variable = { PREV.life_goods_trade_amount = life_goods_trade_amount }
				}
			#
			#Everyday Goods
				if = { #Export
					limit = {
						check_variable = { everyday_goods_supply > everyday_goods_demand }
					}
					multiply_variable = { everyday_goods_trade_amount = PREV.everyday_goods_offers_coeff }
					divide_variable = { everyday_goods_trade_amount = 10 }

					subtract_from_variable = { everyday_goods_supply = everyday_goods_trade_amount }
					multiply_variable = { everyday_goods_trade_amount = -1 }
				}
				if = { #Import
					limit = {
						check_variable = { everyday_goods_supply < everyday_goods_demand }
					}
					multiply_variable = { everyday_goods_trade_amount = PREV.everyday_goods_requests_coeff }
					divide_variable = { everyday_goods_trade_amount = 10 }

					add_to_variable = { everyday_goods_supply = everyday_goods_trade_amount }
					add_to_variable = { PREV.everyday_goods_trade_amount = everyday_goods_trade_amount }
				}
			#
			#Luxury Goods
				if = { #Export
					limit = {
						check_variable = { luxury_goods_supply > luxury_goods_demand }
					}
					multiply_variable = { luxury_goods_trade_amount = PREV.luxury_goods_offers_coeff }
					divide_variable = { luxury_goods_trade_amount = 10 }

					subtract_from_variable = { luxury_goods_supply = luxury_goods_trade_amount }
					multiply_variable = { luxury_goods_trade_amount = -1 }
				}
				if = { #Import
					limit = {
						check_variable = { luxury_goods_supply < luxury_goods_demand }
					}
					multiply_variable = { luxury_goods_trade_amount = PREV.luxury_goods_requests_coeff }
					divide_variable = { luxury_goods_trade_amount = 10 }

					add_to_variable = { luxury_goods_supply = luxury_goods_trade_amount }
					add_to_variable = { PREV.luxury_goods_trade_amount = luxury_goods_trade_amount }
				}
			#
			#Services
				if = { #Export
					limit = {
						check_variable = { services_supply > services_demand }
					}
					multiply_variable = { services_trade_amount = PREV.services_offers_coeff }
					divide_variable = { services_trade_amount = 10 }

					subtract_from_variable = { services_supply = services_trade_amount }
					multiply_variable = { services_trade_amount = -1 }
				}
				if = { #Import
					limit = {
						check_variable = { services_supply < services_demand }
					}
					multiply_variable = { services_trade_amount = PREV.services_requests_coeff }
					divide_variable = { services_trade_amount = 10 }

					add_to_variable = { services_supply = services_trade_amount }
					add_to_variable = { PREV.services_trade_amount = services_trade_amount }
				}
			#
			#Raw Goods
				if = { #Export
					limit = {
						check_variable = { raw_goods_supply > raw_goods_demand }
					}
					multiply_variable = { raw_goods_trade_amount = PREV.raw_goods_offers_coeff }
					divide_variable = { raw_goods_trade_amount = 10 }

					subtract_from_variable = { raw_goods_supply = raw_goods_trade_amount }
					multiply_variable = { raw_goods_trade_amount = -1 }
				}
				if = { #Import
					limit = {
						check_variable = { raw_goods_supply < raw_goods_demand }
					}
					multiply_variable = { raw_goods_trade_amount = PREV.raw_goods_requests_coeff }
					divide_variable = { raw_goods_trade_amount = 10 }

					add_to_variable = { raw_goods_supply = raw_goods_trade_amount }
					add_to_variable = { PREV.raw_goods_trade_amount = raw_goods_trade_amount }
				}
			#
			#Industrial Goods
				if = { #Export
					limit = {
						check_variable = { industrial_goods_supply > industrial_goods_demand }
					}
					multiply_variable = { industrial_goods_trade_amount = PREV.industrial_goods_offers_coeff }
					divide_variable = { industrial_goods_trade_amount = 10 }

					subtract_from_variable = { industrial_goods_supply = industrial_goods_trade_amount }
					multiply_variable = { industrial_goods_trade_amount = -1 }
				}
				if = { #Import
					limit = {
						check_variable = { industrial_goods_supply < industrial_goods_demand }
					}
					multiply_variable = { industrial_goods_trade_amount = PREV.industrial_goods_requests_coeff }
					divide_variable = { industrial_goods_trade_amount = 10 }

					add_to_variable = { industrial_goods_supply = industrial_goods_trade_amount }
					add_to_variable = { PREV.industrial_goods_trade_amount = industrial_goods_trade_amount }
				}
			#
		}
	}
	state_price_adjustment = {
		#After Trade

		#Country Scope
		
		every_controlled_state = {

			set_variable = { life_goods_price = PREV.life_goods_price }
			set_variable = { everyday_goods_price = PREV.everyday_goods_price }
			set_variable = { luxury_goods_price = PREV.luxury_goods_price }
			set_variable = { services_price = PREV.services_price }
			set_variable = { raw_goods_price = PREV.raw_goods_price }
			set_variable = { industrial_goods_price = PREV.industrial_goods_price }

			set_temp_variable = { brk_v = 0 }
			while_loop_effect = {
				limit = {
					OR = {
						NOT = { check_variable = { life_goods_supply = life_goods_demand } }
						NOT = { check_variable = { everyday_goods_supply = everyday_goods_demand } }
						NOT = { check_variable = { luxury_goods_supply = luxury_goods_demand } }
						NOT = { check_variable = { services_supply = services_demand } }
						NOT = { check_variable = { raw_goods_supply = raw_goods_demand } }
						NOT = { check_variable = { industrial_goods_supply = industrial_goods_demand } }
					}
					check_variable = { brk_v < 3 }
				}

				#Changing Prices
					#Life Goods
						if = {
							limit = {
								set_temp_variable = { supply_low = life_goods_supply }
								divide_temp_variable = { supply_low = 1.03 }
								set_temp_variable = { supply_high = life_goods_supply }
								multiply_temp_variable = { supply_high = 1.03 }

								OR = {
									check_variable = { supply_low > life_goods_demand }
									check_variable = { supply_high < life_goods_demand }
								}
							}

							if = {
								limit = {
									NOT = { check_variable = { life_goods_demand = 0 } }
									NOT = { check_variable = { life_goods_supply = 0 } }
								}
								set_temp_variable = { multiplier_temp = life_goods_demand }
								divide_temp_variable = { multiplier_temp = life_goods_supply }
								subtract_from_temp_variable = { multiplier_temp = 1 }
								divide_temp_variable = { multiplier_temp = 2 }
								add_to_temp_variable = { multiplier_temp = 1 }
								multiply_variable = { life_goods_price = multiplier_temp }
							}
							else_if = {
								limit = {
									check_variable = { life_goods_demand < 0.01 }
									check_variable = { life_goods_need > 0.01 }
								}
								multiply_variable = { life_goods_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { life_goods_demand = 0 }
									check_variable = { life_goods_need > 0 }
								}
								multiply_variable = { life_goods_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { life_goods_supply = 0 }
									check_variable = { life_goods_demand > 0.01 }
								}
								multiply_variable = { life_goods_price = 1.2 }
								add_to_temp_variable = { brk_v = 10 }
							}

							if = {
								limit = {
									check_variable = { life_goods_price < 0.01 }
								}
								set_variable = { life_goods_price = 0.01 }
							}
						}
					#
					#Everyday Goods
						if = {
							limit = {
								set_temp_variable = { supply_low = everyday_goods_supply }
								divide_temp_variable = { supply_low = 1.03 }
								set_temp_variable = { supply_high = everyday_goods_supply }
								multiply_temp_variable = { supply_high = 1.03 }

								OR = {
									check_variable = { supply_low > everyday_goods_demand }
									check_variable = { supply_high < everyday_goods_demand }
								}
							}

							if = {
								limit = {
									NOT = { check_variable = { everyday_goods_demand = 0 } }
									NOT = { check_variable = { everyday_goods_supply = 0 } }
								}
								set_temp_variable = { multiplier_temp = everyday_goods_demand }
								divide_temp_variable = { multiplier_temp = everyday_goods_supply }
								subtract_from_temp_variable = { multiplier_temp = 1 }
								divide_temp_variable = { multiplier_temp = 2 }
								add_to_temp_variable = { multiplier_temp = 1 }
								multiply_variable = { everyday_goods_price = multiplier_temp }
							}
							else_if = {
								limit = {
									check_variable = { everyday_goods_demand < 0.01 }
									check_variable = { everyday_goods_need > 0.01 }
								}
								multiply_variable = { everyday_goods_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { everyday_goods_demand = 0 }
									check_variable = { everyday_goods_need > 0 }
								}
								multiply_variable = { everyday_goods_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { everyday_goods_supply = 0 }
									check_variable = { everyday_goods_demand > 0.01 }
								}
								multiply_variable = { everyday_goods_price = 1.2 }
								add_to_temp_variable = { brk_v = 10 }
							}

							if = {
								limit = {
									check_variable = { everyday_goods_price < 0.01 }
								}
								set_variable = { everyday_goods_price = 0.01 }
							}
						}
					#
					#Luxury Goods
						if = {
							limit = {
								set_temp_variable = { supply_low = luxury_goods_supply }
								divide_temp_variable = { supply_low = 1.03 }
								set_temp_variable = { supply_high = luxury_goods_supply }
								multiply_temp_variable = { supply_high = 1.03 }

								OR = {
									check_variable = { supply_low > luxury_goods_demand }
									check_variable = { supply_high < luxury_goods_demand }
								}
							}

							if = {
								limit = {
									NOT = { check_variable = { luxury_goods_demand = 0 } }
									NOT = { check_variable = { luxury_goods_supply = 0 } }
								}
								set_temp_variable = { multiplier_temp = luxury_goods_demand }
								divide_temp_variable = { multiplier_temp = luxury_goods_supply }
								subtract_from_temp_variable = { multiplier_temp = 1 }
								divide_temp_variable = { multiplier_temp = 2 }
								add_to_temp_variable = { multiplier_temp = 1 }
								multiply_variable = { luxury_goods_price = multiplier_temp }
							}
							else_if = {
								limit = {
									check_variable = { luxury_goods_demand < 0.01 }
									check_variable = { luxury_goods_need > 0.01 }
								}
								multiply_variable = { luxury_goods_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { luxury_goods_demand = 0 }
									check_variable = { luxury_goods_need > 0 }
								}
								multiply_variable = { luxury_goods_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { luxury_goods_supply = 0 }
									check_variable = { luxury_goods_demand > 0.01 }
								}
								multiply_variable = { luxury_goods_price = 1.2 }
								add_to_temp_variable = { brk_v = 10 }
							}

							if = {
								limit = {
									check_variable = { luxury_goods_price < 0.01 }
								}
								set_variable = { luxury_goods_price = 0.01 }
							}
						}
					#
					#Services
						if = {
							limit = {
								set_temp_variable = { supply_low = services_supply }
								divide_temp_variable = { supply_low = 1.03 }
								set_temp_variable = { supply_high = services_supply }
								multiply_temp_variable = { supply_high = 1.03 }

								OR = {
									check_variable = { supply_low > services_demand }
									check_variable = { supply_high < services_demand }
								}
							}

							if = {
								limit = {
									NOT = { check_variable = { services_demand = 0 } }
									NOT = { check_variable = { services_supply = 0 } }
								}
								set_temp_variable = { multiplier_temp = services_demand }
								divide_temp_variable = { multiplier_temp = services_supply }
								subtract_from_temp_variable = { multiplier_temp = 1 }
								divide_temp_variable = { multiplier_temp = 2 }
								add_to_temp_variable = { multiplier_temp = 1 }
								multiply_variable = { services_price = multiplier_temp }
							}
							else_if = {
								limit = {
									check_variable = { services_demand < 0.01 }
									check_variable = { services_need > 0.01 }
								}
								multiply_variable = { services_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { services_demand = 0 }
									check_variable = { services_need > 0 }
								}
								multiply_variable = { services_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { services_supply = 0 }
									check_variable = { services_demand > 0.01 }
								}
								multiply_variable = { services_price = 1.2 }
								add_to_temp_variable = { brk_v = 10 }
							}

							if = {
								limit = {
									check_variable = { services_price < 0.01 }
								}
								set_variable = { services_price = 0.01 }
							}
						}
					#
					#Raw Goods
						if = {
							limit = {
								set_temp_variable = { supply_low = raw_goods_supply }
								divide_temp_variable = { supply_low = 1.03 }
								set_temp_variable = { supply_high = raw_goods_supply }
								multiply_temp_variable = { supply_high = 1.03 }

								OR = {
									check_variable = { supply_low > raw_goods_demand }
									check_variable = { supply_high < raw_goods_demand }
								}
							}

							if = {
								limit = {
									NOT = { check_variable = { raw_goods_demand = 0 } }
									NOT = { check_variable = { raw_goods_supply = 0 } }
								}
								set_temp_variable = { multiplier_temp = raw_goods_demand }
								divide_temp_variable = { multiplier_temp = raw_goods_supply }
								subtract_from_temp_variable = { multiplier_temp = 1 }
								divide_temp_variable = { multiplier_temp = 2 }
								add_to_temp_variable = { multiplier_temp = 1 }
								multiply_variable = { raw_goods_price = multiplier_temp }
							}
							else_if = {
								limit = {
									check_variable = { raw_goods_demand < 0.01 }
									check_variable = { raw_goods_need > 0.01 }
								}
								multiply_variable = { raw_goods_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { raw_goods_demand = 0 }
									check_variable = { raw_goods_need > 0 }
								}
								multiply_variable = { raw_goods_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { raw_goods_supply = 0 }
									check_variable = { raw_goods_demand > 0.01 }
								}
								multiply_variable = { raw_goods_price = 1.2 }
								add_to_temp_variable = { brk_v = 10 }
							}

							if = {
								limit = {
									check_variable = { raw_goods_price < 0.01 }
								}
								set_variable = { raw_goods_price = 0.01 }
							}
						}
					#
					#Industrial Goods
						if = {
							limit = {
								set_temp_variable = { supply_low = industrial_goods_supply }
								divide_temp_variable = { supply_low = 1.03 }
								set_temp_variable = { supply_high = industrial_goods_supply }
								multiply_temp_variable = { supply_high = 1.03 }

								OR = {
									check_variable = { supply_low > industrial_goods_demand }
									check_variable = { supply_high < industrial_goods_demand }
								}
							}

							if = {
								limit = {
									NOT = { check_variable = { industrial_goods_demand = 0 } }
									NOT = { check_variable = { industrial_goods_supply = 0 } }
								}
								set_temp_variable = { multiplier_temp = industrial_goods_demand }
								divide_temp_variable = { multiplier_temp = industrial_goods_supply }
								subtract_from_temp_variable = { multiplier_temp = 1 }
								divide_temp_variable = { multiplier_temp = 2 }
								add_to_temp_variable = { multiplier_temp = 1 }
								multiply_variable = { industrial_goods_price = multiplier_temp }
							}
							else_if = {
								limit = {
									check_variable = { industrial_goods_demand < 0.01 }
									check_variable = { industrial_goods_need > 0.01 }
								}
								multiply_variable = { industrial_goods_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { industrial_goods_demand = 0 }
									check_variable = { industrial_goods_need > 0 }
								}
								multiply_variable = { industrial_goods_price = 0.9 }
							}
							else_if = {
								limit = {
									check_variable = { industrial_goods_supply = 0 }
									check_variable = { industrial_goods_demand > 0.01 }
								}
								multiply_variable = { industrial_goods_price = 1.2 }
								add_to_temp_variable = { brk_v = 10 }
							}

							if = {
								limit = {
									check_variable = { industrial_goods_price < 0.01 }
								}
								set_variable = { industrial_goods_price = 0.01 }
							}
						}
					#
				#

				calculate_demand_no_adjust = yes
				
				add_to_temp_variable = { brk_v = 1 }
			}
		}
	}

	reset_supply = {
		#Should be done at the start
		#Country Scope
		set_variable = { life_goods_supply = 0 }
		set_variable = { life_goods_produced_amount = 0 }

		set_variable = { everyday_goods_supply = 0 }
		set_variable = { everyday_goods_produced_amount = 0 }

		set_variable = { luxury_goods_supply = 0 }
		set_variable = { luxury_goods_produced_amount = 0 }

		set_variable = { services_supply = 0 }
		set_variable = { services_produced_amount = 0 }
		set_variable = { services_offers = 0 }
		set_variable = { services_requests = 0 }

		set_variable = { raw_goods_supply = 0 }
		set_variable = { raw_goods_produced_amount = 0 }

		set_variable = { industrial_goods_supply = 0 }
		set_variable = { industrial_goods_produced_amount = 0 }
	}
	calculate_supply = {
		#This should only be done once near the start of the script.
		#State Scope

		set_variable = { life_goods_produced_amount = pops_rgos_life_goods_production }
		set_variable = { everyday_goods_produced_amount = factory_everyday_goods_production }
		add_to_variable = { everyday_goods_produced_amount = pops_artisans_everyday_goods_production }
		set_variable = { luxury_goods_produced_amount = factory_luxury_goods_production }
		add_to_variable = { luxury_goods_produced_amount = pops_artisans_luxury_goods_production }
		set_variable = { services_produced_amount = pops_services_production }
		set_variable = { industrial_goods_produced_amount = factory_industrial_goods_production }
		add_to_variable = { industrial_goods_produced_amount = pops_artisans_industrial_goods_production }
		set_variable = { raw_goods_produced_amount = pops_rgos_raw_goods_production }

		set_variable = { life_goods_supply = life_goods_produced_amount }
		set_variable = { everyday_goods_supply = everyday_goods_produced_amount }
		set_variable = { luxury_goods_supply = luxury_goods_produced_amount }
		set_variable = { services_supply = services_produced_amount }
		set_variable = { raw_goods_supply = raw_goods_produced_amount }
		set_variable = { industrial_goods_supply = industrial_goods_produced_amount }

		set_variable = { life_goods_left = life_goods_supply }
		set_variable = { everyday_goods_left = everyday_goods_supply }
		set_variable = { luxury_goods_left = luxury_goods_supply }
		set_variable = { services_left = services_supply }
		set_variable = { raw_goods_left = raw_goods_supply }
		set_variable = { industrial_goods_left = industrial_goods_supply }

		controller = {
			add_to_variable = { life_goods_produced_amount = PREV.life_goods_produced_amount }
			add_to_variable = { life_goods_supply = PREV.life_goods_supply }

			add_to_variable = { everyday_goods_produced_amount = PREV.everyday_goods_produced_amount }
			add_to_variable = { everyday_goods_supply = PREV.everyday_goods_supply }

			add_to_variable = { luxury_goods_produced_amount = PREV.luxury_goods_produced_amount }
			add_to_variable = { luxury_goods_supply = PREV.luxury_goods_supply }
			
			add_to_variable = { services_produced_amount = PREV.services_produced_amount }
			add_to_variable = { services_supply = PREV.services_supply }
			
			add_to_variable = { raw_goods_produced_amount = PREV.raw_goods_produced_amount }
			add_to_variable = { raw_goods_supply = PREV.raw_goods_supply }
			
			add_to_variable = { industrial_goods_produced_amount = PREV.industrial_goods_produced_amount }
			add_to_variable = { industrial_goods_supply = PREV.industrial_goods_supply }
		}
	}

	reset_demand = {
		#Country Scope
		set_variable = { life_goods_need = 0 }
		set_variable = { everyday_goods_need = 0 }
		set_variable = { luxury_goods_need = 0 }
		set_variable = { services_need = 0 }
		set_variable = { raw_goods_need = 0 }
		set_variable = { industrial_goods_need = 0 }

		set_variable = { life_goods_demand = 0 }
		set_variable = { everyday_goods_demand = 0 }
		set_variable = { luxury_goods_demand = 0 }
		set_variable = { services_demand = 0 }
		set_variable = { raw_goods_demand = 0 }
		set_variable = { industrial_goods_demand = 0 }
	}
	calculate_demand = {
		#reset_demand on the national scope should be done before this
		#Do this before pops get paid or after they spend it
		#State Scope

		calculate_demand_no_adjust = yes

		controller = {
			add_to_variable = { life_goods_demand = PREV.life_goods_demand }
			add_to_variable = { everyday_goods_demand = PREV.everyday_goods_demand }
			add_to_variable = { luxury_goods_demand = PREV.luxury_goods_demand }
			add_to_variable = { services_demand = PREV.services_demand }
			add_to_variable = { raw_goods_demand = PREV.raw_goods_demand }
			add_to_variable = { industrial_goods_demand = PREV.industrial_goods_demand }

			add_to_variable = { life_goods_need = PREV.life_goods_need }
			add_to_variable = { everyday_goods_need = PREV.everyday_goods_need }
			add_to_variable = { luxury_goods_need = PREV.luxury_goods_need }
			add_to_variable = { services_need = PREV.services_need }
			add_to_variable = { raw_goods_need = PREV.raw_goods_need }
			add_to_variable = { industrial_goods_need = PREV.industrial_goods_need }
		}
	}
	calculate_demand_no_adjust = {
		#For the times when you just need demand to be recalculated on the state scope. Idk why, but it's here
		#Do this before pops get paid or after they spend it
		#State Scope

		set_variable = { life_goods_need = pops_life_goods_need }
		set_variable = { everyday_goods_need = pops_everyday_goods_need }
		set_variable = { luxury_goods_need = pops_luxury_goods_need }
		set_variable = { services_need = pops_services_demand }
		set_variable = { raw_goods_need = factory_raw_goods_need }
		add_to_variable = { raw_goods_need = pops_artisans_raw_goods_need }
		set_variable = { industrial_goods_need = factory_industrial_goods_need }
		add_to_variable = { industrial_goods_need = factory_everyday_goods_construction_industrial_goods_need }
		add_to_variable = { industrial_goods_need = factory_luxury_goods_construction_industrial_goods_need }
		add_to_variable = { industrial_goods_need = factory_industrial_goods_construction_industrial_goods_need }
		add_to_variable = { industrial_goods_need = infrastructure_industrial_goods_need }
		add_to_variable = { industrial_goods_need = infrastructure_construction_industrial_goods_need }
		add_to_variable = { industrial_goods_need = pops_rgos_mechanization_expansion_industrial_goods_need }

		set_variable = { life_goods_demand = 0 }
		set_variable = { everyday_goods_demand = 0 }
		set_variable = { luxury_goods_demand = 0 }
		set_variable = { services_demand = 0 }
		set_variable = { raw_goods_demand = 0 }
		set_variable = { industrial_goods_demand = 0 }
		#Pop Demand
			calculate_pop_demand = yes

			add_to_variable = { life_goods_demand = pops_life_goods_demand }
			add_to_variable = { everyday_goods_demand = pops_everyday_goods_demand }
			add_to_variable = { luxury_goods_demand = pops_luxury_goods_demand }
			add_to_variable = { services_demand = pops_services_demand }
			add_to_variable = { raw_goods_demand = pops_artisans_raw_goods_demand }
			
			add_to_variable = { industrial_goods_demand = infrastructure_industrial_goods_demand }
			add_to_variable = { industrial_goods_demand = infrastructure_construction_industrial_goods_demand }
			add_to_variable = { industrial_goods_demand = pops_rgos_mechanization_industrial_goods_demand }
			add_to_variable = { industrial_goods_demand = pops_rgos_mechanization_expansion_industrial_goods_demand }

		#Industry Demand
			calculate_factory_demand = yes
			add_to_variable = { raw_goods_demand = factory_raw_goods_demand }
			add_to_variable = { industrial_goods_demand = factory_industrial_goods_demand }
			add_to_variable = { industrial_goods_demand = factory_everyday_goods_construction_industrial_goods_demand }
			add_to_variable = { industrial_goods_demand = factory_luxury_goods_construction_industrial_goods_demand }
			add_to_variable = { industrial_goods_demand = factory_industrial_goods_construction_industrial_goods_demand }
	}
	calculate_govt_demand = {
		set_variable = { life_goods_government_demand = 0 }
		set_variable = { everyday_goods_government_demand = 0 }
		set_variable = { luxury_goods_government_demand = 0 }
		set_variable = { services_government_demand = 0 }
		set_variable = { raw_goods_government_demand = 0 }
		set_variable = { industrial_goods_government_demand = 0 }
		
		#Military
		add_to_variable = { life_goods_government_demand = military_life_goods_demand }
		add_to_variable = { life_goods_government_demand = conscripted_life_goods_demand }
		
		add_to_variable = { everyday_goods_government_demand = military_everyday_goods_demand }
		add_to_variable = { everyday_goods_government_demand = conscripted_everyday_goods_demand }
		
		add_to_variable = { luxury_goods_government_demand = military_luxury_goods_demand }
		add_to_variable = { luxury_goods_government_demand = conscripted_luxury_goods_demand }
		
		add_to_variable = { industrial_goods_government_demand = military_industrial_goods_demand }

		set_variable = { projects_life_goods_demand = 0 }
		set_variable = { projects_everyday_goods_demand = 0 }
		set_variable = { projects_luxury_goods_demand = 0 }
		set_variable = { projects_services_demand = 0 }
		set_variable = { projects_raw_goods_demand = 0 }
		set_variable = { projects_industrial_goods_demand = 0 }
		#Projects
		for_each_loop = {
			array = proj_id
			index = pi
			value = pv
			break = pb

			add_to_variable = { projects_life_goods_demand = proj_life_goods_demand^pi }
			add_to_variable = { projects_everyday_goods_demand = proj_everyday_goods_demand^pi }
			add_to_variable = { projects_luxury_goods_demand = proj_luxury_goods_demand^pi }
			add_to_variable = { projects_services_demand = proj_services_demand^pi }
			add_to_variable = { projects_raw_goods_demand = proj_raw_goods_demand^pi }
			add_to_variable = { projects_industrial_goods_demand = proj_industrial_goods_demand^pi }
		}
		add_to_variable = { life_goods_government_demand = projects_life_goods_demand }
		add_to_variable = { everyday_goods_government_demand = projects_everyday_goods_demand }
		add_to_variable = { luxury_goods_government_demand = projects_luxury_goods_demand }
		add_to_variable = { services_government_demand = projects_services_demand }
		add_to_variable = { raw_goods_government_demand = projects_raw_goods_demand }
		add_to_variable = { industrial_goods_government_demand = projects_industrial_goods_demand }
	}
	
	calculate_pop_demand = {
		#State Scope

		set_temp_variable = { money_left_temp = pops_money }
		add_to_temp_variable = { money_left_temp = pops_earnings }

		#Pop Demand is a factor of A: How much they want the resource and B: How much they are willing to spend

		#
		set_temp_variable = { sales_tax_temp = controller:sales_tax_percentage }
		add_to_temp_variable = { sales_tax_temp = 100 }
		#Life Goods
			if = {
				limit = {
					check_variable = { money_left_temp > 0 }
				}
				set_temp_variable = { money_life_goods_temp = money_left_temp }
				set_temp_variable = { spending_temp = global.pops_life_goods_spending }
				if = {
					limit = {
						check_variable = { pops_annual_life_goods_fulfilled_percentage < 0.5 }
					}
					set_temp_variable = { percent_temp = 0.5 }
					subtract_from_temp_variable = { percent_temp = pops_annual_life_goods_fulfilled_percentage }
					add_to_temp_variable = { spending_temp = percent_temp }
					if = {
						limit = {
							check_variable = { spending_temp > 1 }
						}
						set_temp_variable = { spending_temp = 1 }
					}
				}
				else = {
					if = {
						limit = {
							check_variable = { pops_annual_life_goods_fulfilled_percentage > 0.75 }
						}
						set_temp_variable = { percent_temp = pops_annual_life_goods_fulfilled_percentage }
						subtract_from_temp_variable = { percent_temp = 0.75 }
						subtract_from_temp_variable = { spending_temp = percent_temp }
						if = {
							limit = {
								check_variable = { spending_temp < 0.25 }
							}
							set_temp_variable = { spending_temp = 0.25 }
						}
					}
				}
				multiply_temp_variable = { money_life_goods_temp = spending_temp }

				set_temp_variable = { actual_price_temp = life_goods_price }
				multiply_temp_variable = { actual_price_temp = sales_tax_temp }
				divide_temp_variable = { actual_price_temp = 100 }

				set_temp_variable = { price_temp = actual_price_temp }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > life_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > life_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_life_goods_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < life_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < life_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_life_goods_temp = magnitude_temp }
				}

				set_variable = { pops_life_goods_demand = money_life_goods_temp }
				divide_variable = { pops_life_goods_demand = actual_price_temp }
				multiply_variable = { pops_life_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { pops_life_goods_demand > pops_life_goods_need }
					}
					set_variable = { pops_life_goods_demand = pops_life_goods_need }
				}
				if = {
					limit = {
						check_variable = { pops_life_goods_demand < 0 }
					}
					set_variable = { pops_life_goods_demand = 0 }
				}
				set_temp_variable = { cost_temp = pops_life_goods_demand }
				multiply_temp_variable = { cost_temp = actual_price_temp }

				subtract_from_temp_variable = { money_left_temp = cost_temp }
				subtract_from_temp_variable = { money_life_goods_temp = cost_temp }
			}
			else = {
				set_variable = { pops_life_goods_demand = 0 }
			}
		#

		#Infrastructure Industrial Goods
			set_variable = { infrastructure_industrial_goods_demand = 0 }
			if = {
				limit = {
					check_variable = { money_left_temp > 0 }
				}
				set_temp_variable = { money_industrial_goods_temp = money_left_temp }
				
				set_temp_variable = { money_industrial_goods_temp_govt = infrastructure_industrial_goods_need }
				multiply_temp_variable = { money_industrial_goods_temp_govt = industrial_goods_price }
				multiply_temp_variable = { money_industrial_goods_temp_govt = controller:infrastructure_subsidy_percentage }
				divide_temp_variable = { money_industrial_goods_temp_govt = 100 }
				subtract_from_temp_variable = { money_industrial_goods_temp = money_industrial_goods_temp_govt }
				if = {
					limit = {
						check_variable = { money_industrial_goods_temp < 0 }
					}
					set_temp_variable = { money_industrial_goods_temp = 0 }
				}
				add_to_temp_variable = { money_industrial_goods_temp = money_industrial_goods_temp_govt }
				
				set_variable = { infrastructure_industrial_goods_demand = money_industrial_goods_temp }
				divide_variable = { infrastructure_industrial_goods_demand = industrial_goods_price }
				multiply_variable = { infrastructure_industrial_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { infrastructure_industrial_goods_demand > infrastructure_industrial_goods_need }
					}
					set_variable = { infrastructure_industrial_goods_demand = infrastructure_industrial_goods_need }
				}
				if = {
					limit = {
						check_variable = { infrastructure_industrial_goods_demand < 0 }
					}
					set_variable = { infrastructure_industrial_goods_demand = 0 }
				}
				set_temp_variable = { cost_temp = infrastructure_industrial_goods_demand }
				multiply_temp_variable = { cost_temp = industrial_goods_price }
				subtract_from_temp_variable = { cost_temp = money_industrial_goods_temp_govt }
				if = {
					limit = {
						check_variable = { cost_temp < 0 }
					}
					set_temp_variable = { cost_temp = 0 }
				}

				subtract_from_temp_variable = { money_left_temp = cost_temp }
			}
			else = {
				
				set_temp_variable = { money_industrial_goods_temp = infrastructure_industrial_goods_need }
				multiply_temp_variable = { money_industrial_goods_temp = industrial_goods_price }
				multiply_temp_variable = { money_industrial_goods_temp = controller:infrastructure_subsidy_percentage }
				divide_temp_variable = { money_industrial_goods_temp = 100 }

				set_variable = { infrastructure_industrial_goods_demand = money_industrial_goods_temp }
				divide_variable = { infrastructure_industrial_goods_demand = industrial_goods_price }
				multiply_variable = { infrastructure_industrial_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { infrastructure_industrial_goods_demand > infrastructure_industrial_goods_need }
					}
					set_variable = { infrastructure_industrial_goods_demand = infrastructure_industrial_goods_need }
				}
				if = {
					limit = {
						check_variable = { infrastructure_industrial_goods_demand < 0 }
					}
					set_variable = { infrastructure_industrial_goods_demand = 0 }
				}
			}
		#

		#Mechanization Industrial Goods Upkeep
			if = {
				limit = {
					check_variable = { money_left_temp > 0 }
				}
				set_temp_variable = { money_industrial_goods_temp = money_left_temp }
				multiply_temp_variable = { money_industrial_goods_temp = 0.99 }
				if = {
					limit = {
						check_variable = { money_industrial_goods_temp > rgos_earnings }
					}
					set_temp_variable = { money_industrial_goods_temp = rgos_earnings }
				}
				
				set_variable = { pops_rgos_mechanization_industrial_goods_demand = money_industrial_goods_temp }
				divide_variable = { pops_rgos_mechanization_industrial_goods_demand = industrial_goods_price }

				if = {
					limit = {
						check_variable = { pops_rgos_mechanization_industrial_goods_demand > pops_rgos_mechanization_industrial_goods_need }
					}
					set_variable = { pops_rgos_mechanization_industrial_goods_demand = pops_rgos_mechanization_industrial_goods_need }
				}
				if = {
					limit = {
						check_variable = { pops_rgos_mechanization_industrial_goods_demand < 0 }
					}
					set_variable = { pops_rgos_mechanization_industrial_goods_demand = 0 }
				}

				set_temp_variable = { cost_temp = pops_rgos_mechanization_industrial_goods_demand }
				multiply_temp_variable = { cost_temp = industrial_goods_price }
				subtract_from_temp_variable = { money_left_temp = cost_temp }

			}
			else = {
				set_variable = { pops_rgos_mechanization_industrial_goods_demand = 0 }
			}
		#

		#Raw Goods
			if = {
				limit = {
					check_variable = { money_left_temp > 0 }
				}
				set_temp_variable = { money_raw_goods_temp = money_left_temp }
				multiply_temp_variable = { money_raw_goods_temp = global.pops_artisans_raw_goods_spending } #Pops/Artisans will spend up to 30% of their money on Raw Goods
				add_to_variable = { money_raw_goods_temp = money_life_goods_temp }
				if = {
					limit = {
						check_variable = { money_raw_goods_temp > money_left_temp }
					}
					set_temp_variable = { money_raw_goods_temp = money_left_temp }
				}

				set_temp_variable = { money_raw_goods_max_temp = money_left_temp }
				multiply_temp_variable = { money_raw_goods_max_temp = global.pops_artisans_raw_goods_spending_max }
				if = {
					limit = {
						check_variable = { money_raw_goods_max_temp < money_raw_goods_temp }
					}
					set_temp_variable = { money_raw_goods_temp = money_raw_goods_max_temp }
				}

				set_temp_variable = { price_temp = raw_goods_price }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > raw_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > raw_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_raw_goods_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < raw_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < raw_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_raw_goods_temp = magnitude_temp }
				}

				set_variable = { pops_artisans_raw_goods_demand = money_raw_goods_temp }
				divide_variable = { pops_artisans_raw_goods_demand = raw_goods_price }
				multiply_variable = { pops_artisans_raw_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { pops_artisans_raw_goods_demand > pops_artisans_raw_goods_need }
					}
					set_variable = { pops_artisans_raw_goods_demand = pops_artisans_raw_goods_need }
				}
				if = {
					limit = {
						check_variable = { pops_artisans_raw_goods_demand < 0 }
					}
					set_variable = { pops_artisans_raw_goods_demand = 0 }
				}

				set_temp_variable = { cost_temp = pops_artisans_raw_goods_demand }
				multiply_temp_variable = { cost_temp = raw_goods_price }

				subtract_from_temp_variable = { money_left_temp = cost_temp }
				subtract_from_temp_variable = { money_raw_goods_temp = cost_temp }
			}
			else = {
				set_variable = { pops_artisans_raw_goods_demand = 0 }
			}
		#

		#Everyday Goods
			if = {
				limit = {
					check_variable = { money_left_temp > 0 }
				}
				set_temp_variable = { money_everyday_goods_temp = money_left_temp }
				multiply_temp_variable = { money_everyday_goods_temp = global.pops_everyday_goods_spending } #Pops will spend a base of 50% of their money on Everyday Goods
				add_to_variable = { money_everyday_goods_temp = money_life_goods_temp }

				set_temp_variable = { money_everyday_goods_max_temp = money_left_temp }
				multiply_temp_variable = { money_everyday_goods_max_temp = global.pops_everyday_goods_spending_max }
				if = {
					limit = {
						check_variable = { money_everyday_goods_max_temp < money_everyday_goods_temp }
					}
					set_temp_variable = { money_everyday_goods_temp = money_everyday_goods_max_temp }
				}

				set_temp_variable = { actual_price_temp = everyday_goods_price }
				multiply_temp_variable = { actual_price_temp = sales_tax_temp }
				divide_temp_variable = { actual_price_temp = 100 }

				set_temp_variable = { price_temp = actual_price_temp }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > everyday_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > everyday_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_everyday_goods_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < everyday_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < everyday_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_everyday_goods_temp = magnitude_temp }
				}

				set_variable = { pops_everyday_goods_demand = money_everyday_goods_temp }
				divide_variable = { pops_everyday_goods_demand = actual_price_temp }
				multiply_variable = { pops_everyday_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { pops_everyday_goods_demand > pops_everyday_goods_need }
					}
					set_variable = { pops_everyday_goods_demand = pops_everyday_goods_need }
				}
				if = {
					limit = {
						check_variable = { pops_everyday_goods_demand < 0 }
					}
					set_variable = { pops_everyday_goods_demand = 0 }
				}
				set_temp_variable = { cost_temp = pops_everyday_goods_demand }
				multiply_temp_variable = { cost_temp = actual_price_temp }

				subtract_from_temp_variable = { money_left_temp = cost_temp }
				subtract_from_temp_variable = { money_everyday_goods_temp = cost_temp }
			}
			else = {
				set_variable = { pops_everyday_goods_demand = 0 }
			}
		#

		#Luxury Goods
			if = {
				limit = {
					check_variable = { money_left_temp > 0 }
				}
				set_temp_variable = { money_luxury_goods_temp = money_left_temp }
				multiply_temp_variable = { money_luxury_goods_temp = global.pops_luxury_goods_spending } #Pops will spend up to 75% of their money on Luxury Goods
				add_to_variable = { money_luxury_goods_temp = money_everyday_goods_temp }

				set_temp_variable = { money_luxury_goods_max_temp = money_left_temp }
				multiply_temp_variable = { money_luxury_goods_max_temp = global.pops_luxury_goods_spending_max }
				if = {
					limit = {
						check_variable = { money_luxury_goods_max_temp < money_luxury_goods_temp }
					}
					set_temp_variable = { money_luxury_goods_temp = money_luxury_goods_max_temp }
				}

				set_temp_variable = { actual_price_temp = luxury_goods_price }
				multiply_temp_variable = { actual_price_temp = sales_tax_temp }
				divide_temp_variable = { actual_price_temp = 100 }

				set_temp_variable = { price_temp = actual_price_temp }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > luxury_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > luxury_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_luxury_goods_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < luxury_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < luxury_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_luxury_goods_temp = magnitude_temp }
				}

				set_variable = { pops_luxury_goods_demand = money_luxury_goods_temp }
				divide_variable = { pops_luxury_goods_demand = actual_price_temp }
				multiply_variable = { pops_luxury_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { pops_luxury_goods_demand > pops_luxury_goods_need }
					}
					set_variable = { pops_luxury_goods_demand = pops_luxury_goods_need }
				}
				if = {
					limit = {
						check_variable = { pops_luxury_goods_demand < 0 }
					}
					set_variable = { pops_luxury_goods_demand = 0 }
				}
				set_temp_variable = { cost_temp = pops_luxury_goods_demand }
				multiply_temp_variable = { cost_temp = actual_price_temp }

				subtract_from_temp_variable = { money_left_temp = cost_temp }
				subtract_from_temp_variable = { money_luxury_goods_temp = cost_temp }
			}
			else = {
				set_variable = { pops_luxury_goods_demand = 0 }
			}
		#

		#Services
			if = {
				limit = {
					check_variable = { money_left_temp > 0 }
				}
				set_temp_variable = { money_services_temp = money_left_temp }
				multiply_temp_variable = { money_services_temp = global.pops_services_spending } #Pops will spend up to 75% of their money on Services
				add_to_variable = { money_services_temp = money_luxury_goods_temp }
				
				set_temp_variable = { money_services_max_temp = money_left_temp }
				multiply_temp_variable = { money_services_max_temp = global.pops_services_spending_max }
				if = {
					limit = {
						check_variable = { money_services_max_temp < money_services_temp }
					}
					set_temp_variable = { money_services_temp = money_services_max_temp }
				}

				set_temp_variable = { actual_price_temp = services_price }
				multiply_temp_variable = { actual_price_temp = sales_tax_temp }
				divide_temp_variable = { actual_price_temp = 100 }

				set_temp_variable = { price_temp = actual_price_temp }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > services_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > services_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_services_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < services_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < services_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_services_temp = magnitude_temp }
				}

				set_variable = { pops_services_demand = money_services_temp }
				divide_variable = { pops_services_demand = actual_price_temp }
				multiply_variable = { pops_services_demand = 0.99 }

				if = {
					limit = {
						check_variable = { pops_services_demand < 0 }
					}
					set_variable = { pops_services_demand = 0 }
				}
				set_temp_variable = { cost_temp = pops_services_demand }
				multiply_temp_variable = { cost_temp = actual_price_temp }

				subtract_from_temp_variable = { money_left_temp = cost_temp }
				subtract_from_temp_variable = { money_services_temp = cost_temp }
			}
			else = {
				set_variable = { pops_services_demand = 0 }
			}
		#


		#Construction
			set_temp_variable = { max_demand_temp = global.infrastructure_construction_base_speed }
			#Infrastructure
				set_variable = { infrastructure_construction_industrial_goods_demand = infrastructure_construction_investment_money }
				divide_variable = { infrastructure_construction_industrial_goods_demand = industrial_goods_price }
				divide_variable = { infrastructure_construction_industrial_goods_demand = 2 }
				if = {
					limit = {
						check_variable = { infrastructure_construction_industrial_goods_demand > max_demand_temp }
					}
					set_variable = { infrastructure_construction_industrial_goods_demand = max_demand_temp }
				}
				if = {
					limit = {
						check_variable = { infrastructure_construction_industrial_goods_demand > infrastructure_construction_industrial_goods_need }
					}
					set_variable = { infrastructure_construction_industrial_goods_demand = infrastructure_construction_industrial_goods_need }
				}

			set_temp_variable = { max_demand_temp = rgos_workforce_amount }
			divide_variable = { max_demand_temp = 100 }
			multiply_variable = { max_demand_temp = global.pops_rgos_mechanization_expansion_base_speed }
			#Mechanization
				if = {
					limit = {
						check_variable = { money_left_temp > 0 }
					}
					set_variable = { pops_rgos_mechanization_expansion_industrial_goods_demand = money_left_temp }
					divide_variable = { pops_rgos_mechanization_expansion_industrial_goods_demand = industrial_goods_price }
					divide_variable = { pops_rgos_mechanization_expansion_industrial_goods_demand = 2 }
					if = {
						limit = {
							check_variable = { pops_rgos_mechanization_expansion_industrial_goods_demand > max_demand_temp }
						}
						set_variable = { pops_rgos_mechanization_expansion_industrial_goods_demand = max_demand_temp }
					}
					if = {
						limit = {
							check_variable = { pops_rgos_mechanization_expansion_industrial_goods_demand > pops_rgos_mechanization_expansion_industrial_goods_need }
						}
						set_variable = { pops_rgos_mechanization_expansion_industrial_goods_demand = pops_rgos_mechanization_expansion_industrial_goods_need }
					}
				}
				else = {
					set_variable = { pops_rgos_mechanization_expansion_industrial_goods_demand = 0 }
				}
			#

	}
	calculate_factory_demand = {
		#State Scope


		#Factory Demand is a factor of A: How much they need the resource and B: How much they are willing to spend

		#Everyday Goods Factory
			set_temp_variable = { money_left_temp = factory_everyday_goods_money }
			add_to_temp_variable = { money_left_temp = factory_everyday_goods_earnings }

			#Raw Goods
				set_temp_variable = { money_raw_goods_temp = money_left_temp }
				multiply_temp_variable = { money_raw_goods_temp = global.factory_raw_goods_spending_max } #Factories will spend up to 30% of their money on Raw Goods
				
				set_temp_variable = { price_temp = raw_goods_price }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > raw_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > raw_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_raw_goods_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < raw_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < raw_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_raw_goods_temp = magnitude_temp }
				}

				set_variable = { factory_everyday_goods_raw_goods_demand = money_raw_goods_temp }
				divide_variable = { factory_everyday_goods_raw_goods_demand = raw_goods_price }
				multiply_variable = { factory_everyday_goods_raw_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { factory_everyday_goods_raw_goods_demand > factory_everyday_goods_raw_goods_need }
					}
					set_variable = { factory_everyday_goods_raw_goods_demand = factory_everyday_goods_raw_goods_need }
				}

			#Industrial Goods
				set_temp_variable = { money_industrial_goods_temp = money_left_temp }
				multiply_temp_variable = { money_industrial_goods_temp = global.factory_industrial_goods_spending_max } #Factories will spend up to 30% of their money on Industrial Goods
				
				set_temp_variable = { price_temp = industrial_goods_price }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > industrial_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > industrial_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_industrial_goods_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < industrial_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < industrial_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_industrial_goods_temp = magnitude_temp }
				}

				set_variable = { factory_everyday_goods_industrial_goods_demand = money_industrial_goods_temp }
				divide_variable = { factory_everyday_goods_industrial_goods_demand = industrial_goods_price }
				multiply_variable = { factory_everyday_goods_industrial_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { factory_everyday_goods_industrial_goods_demand > factory_everyday_goods_industrial_goods_need }
					}
					set_variable = { factory_everyday_goods_industrial_goods_demand = factory_everyday_goods_industrial_goods_need }
				}
		#
		#Luxury Goods Factory
			set_temp_variable = { money_left_temp = factory_luxury_goods_money }
			add_to_temp_variable = { money_left_temp = factory_luxury_goods_earnings }

			#Raw Goods
				set_temp_variable = { money_raw_goods_temp = money_left_temp }
				multiply_temp_variable = { money_raw_goods_temp = global.factory_raw_goods_spending_max } #Factories will spend up to 30% of their money on Raw Goods
				
				set_temp_variable = { price_temp = raw_goods_price }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > raw_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > raw_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_raw_goods_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < raw_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < raw_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_raw_goods_temp = magnitude_temp }
				}

				set_variable = { factory_luxury_goods_raw_goods_demand = money_raw_goods_temp }
				divide_variable = { factory_luxury_goods_raw_goods_demand = raw_goods_price }
				multiply_variable = { factory_luxury_goods_raw_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { factory_luxury_goods_raw_goods_demand > factory_luxury_goods_raw_goods_need }
					}
					set_variable = { factory_luxury_goods_raw_goods_demand = factory_luxury_goods_raw_goods_need }
				}

			#Industrial Goods
				set_temp_variable = { money_industrial_goods_temp = money_left_temp }
				multiply_temp_variable = { money_industrial_goods_temp = global.factory_industrial_goods_spending_max } #Factories will spend up to 30% of their money on Industrial Goods
				
				set_temp_variable = { price_temp = industrial_goods_price }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > industrial_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > industrial_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_industrial_goods_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < industrial_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < industrial_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_industrial_goods_temp = magnitude_temp }
				}

				set_variable = { factory_luxury_goods_industrial_goods_demand = money_industrial_goods_temp }
				divide_variable = { factory_luxury_goods_industrial_goods_demand = industrial_goods_price }
				multiply_variable = { factory_luxury_goods_industrial_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { factory_luxury_goods_industrial_goods_demand > factory_luxury_goods_industrial_goods_need }
					}
					set_variable = { factory_luxury_goods_industrial_goods_demand = factory_luxury_goods_industrial_goods_need }
				}
		#
		#Industrial Goods Factory
			set_temp_variable = { money_left_temp = factory_industrial_goods_money }
			add_to_temp_variable = { money_left_temp = factory_industrial_goods_earnings }

			#Raw Goods
				set_temp_variable = { money_raw_goods_temp = money_left_temp }
				multiply_temp_variable = { money_raw_goods_temp = global.factory_raw_goods_spending_max } #Factories will spend up to 30% of their money on Raw Goods
				
				set_temp_variable = { price_temp = raw_goods_price }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > raw_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > raw_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_raw_goods_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < raw_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < raw_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_raw_goods_temp = magnitude_temp }
				}

				set_variable = { factory_industrial_goods_raw_goods_demand = money_raw_goods_temp }
				divide_variable = { factory_industrial_goods_raw_goods_demand = raw_goods_price }
				multiply_variable = { factory_industrial_goods_raw_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { factory_industrial_goods_raw_goods_demand > factory_industrial_goods_raw_goods_need }
					}
					set_variable = { factory_industrial_goods_raw_goods_demand = factory_industrial_goods_raw_goods_need }
				}

			#Industrial Goods
				set_temp_variable = { money_industrial_goods_temp = money_left_temp }
				multiply_temp_variable = { money_industrial_goods_temp = global.factory_industrial_goods_spending_max } #Factories will spend up to 30% of their money on Industrial Goods
				
				set_temp_variable = { price_temp = industrial_goods_price }
				set_temp_variable = { magnitude_temp = 1 }
				if = {
					limit = {
						divide_temp_variable = { price_temp = 1.1 }
						check_variable = { price_temp > industrial_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp > industrial_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						divide_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					divide_temp_variable = { money_industrial_goods_temp = magnitude_temp }
				}
				else_if = {
					limit = {
						multiply_temp_variable = { price_temp = 1.21 }
						check_variable = { price_temp < industrial_goods_base_price }
					}
					while_loop_effect = {
						limit = {
							check_variable = { price_temp < industrial_goods_base_price }
							check_variable = { magnitude_temp < 5 }
						}
						multiply_temp_variable = { price_temp = 1.1 }
						add_to_temp_variable = { magnitude_temp = 0.1 }
					}
					multiply_temp_variable = { money_industrial_goods_temp = magnitude_temp }
				}

				set_variable = { factory_industrial_goods_industrial_goods_demand = money_industrial_goods_temp }
				divide_variable = { factory_industrial_goods_industrial_goods_demand = industrial_goods_price }
				multiply_variable = { factory_industrial_goods_industrial_goods_demand = 0.99 }

				if = {
					limit = {
						check_variable = { factory_industrial_goods_industrial_goods_demand > factory_industrial_goods_industrial_goods_need }
					}
					set_variable = { factory_industrial_goods_industrial_goods_demand = factory_industrial_goods_industrial_goods_need }
				}
		#
		set_variable = { factory_raw_goods_demand = factory_everyday_goods_raw_goods_demand }
		add_to_variable = { factory_raw_goods_demand = factory_luxury_goods_raw_goods_demand }
		add_to_variable = { factory_raw_goods_demand = factory_industrial_goods_raw_goods_demand }
		
		set_variable = { factory_industrial_goods_demand = factory_everyday_goods_industrial_goods_demand }
		add_to_variable = { factory_industrial_goods_demand = factory_luxury_goods_industrial_goods_demand }
		add_to_variable = { factory_industrial_goods_demand = factory_industrial_goods_industrial_goods_demand }

		#Construction
			set_temp_variable = { max_demand_temp = factory_employment_amount_per_factory }
			divide_temp_variable = { max_demand_temp = 20 }
			#Everyday Goods Factory
				set_variable = { factory_everyday_goods_construction_industrial_goods_demand = factory_everyday_goods_construction_investment_money }
				divide_variable = { factory_everyday_goods_construction_industrial_goods_demand = industrial_goods_price }
				divide_variable = { factory_everyday_goods_construction_industrial_goods_demand = 2 }
				if = {
					limit = {
						check_variable = { factory_everyday_goods_construction_industrial_goods_demand > max_demand_temp }
					}
					set_variable = { factory_everyday_goods_construction_industrial_goods_demand = max_demand_temp }
				}
				if = {
					limit = {
						check_variable = { factory_everyday_goods_construction_industrial_goods_demand > factory_everyday_goods_construction_industrial_goods_need }
					}
					set_variable = { factory_everyday_goods_construction_industrial_goods_demand = factory_everyday_goods_construction_industrial_goods_need }
				}
			#Luxury Goods Factory
				set_variable = { factory_luxury_goods_construction_industrial_goods_demand = factory_luxury_goods_construction_investment_money }
				divide_variable = { factory_luxury_goods_construction_industrial_goods_demand = industrial_goods_price }
				divide_variable = { factory_luxury_goods_construction_industrial_goods_demand = 2 }

				if = {
					limit = {
						check_variable = { factory_luxury_goods_construction_industrial_goods_demand > max_demand_temp }
					}
					set_variable = { factory_luxury_goods_construction_industrial_goods_demand = max_demand_temp }
				}
				if = {
					limit = {
						check_variable = { factory_luxury_goods_construction_industrial_goods_demand > factory_luxury_goods_construction_industrial_goods_need }
					}
					set_variable = { factory_luxury_goods_construction_industrial_goods_demand = factory_luxury_goods_construction_industrial_goods_need }
				}
			#Industrial Goods Factory
				set_variable = { factory_industrial_goods_construction_industrial_goods_demand = factory_industrial_goods_construction_investment_money }
				divide_variable = { factory_industrial_goods_construction_industrial_goods_demand = industrial_goods_price }
				divide_variable = { factory_industrial_goods_construction_industrial_goods_demand = 2 }

				if = {
					limit = {
						check_variable = { factory_industrial_goods_construction_industrial_goods_demand > max_demand_temp }
					}
					set_variable = { factory_industrial_goods_construction_industrial_goods_demand = max_demand_temp }
				}
				if = {
					limit = {
						check_variable = { factory_industrial_goods_construction_industrial_goods_demand > factory_industrial_goods_construction_industrial_goods_need }
					}
					set_variable = { factory_industrial_goods_construction_industrial_goods_demand = factory_industrial_goods_construction_industrial_goods_need }
				}

	}
	calculate_military_demand = {
		battalion_count_update = yes

		#Needs
			#Reset
				set_variable = { military_life_goods_need = 0 } #Food
				set_variable = { military_everyday_goods_need = 0 } #Basic Supplies
				set_variable = { military_luxury_goods_need = 0 } #Officer stuff
				set_variable = { military_industrial_goods_need = 0 } #Machinery, Heavy Gun Parts, Building Materials, etc.
			#

			#Army Needs
				#Infantry
				set_temp_variable = { need_temp = global.infantry_base_life_goods_need }
				multiply_temp_variable = { need_temp = infantry_battalions_weighted }
				add_to_variable = { military_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.infantry_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = infantry_battalions_weighted }
				add_to_variable = { military_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.infantry_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = infantry_battalions_weighted }
				add_to_variable = { military_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.infantry_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = infantry_battalions_weighted }
				add_to_variable = { military_industrial_goods_need = need_temp }

				#Militia
				set_temp_variable = { need_temp = global.militia_base_life_goods_need }
				multiply_temp_variable = { need_temp = militia_battalions_weighted }
				add_to_variable = { military_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.militia_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = militia_battalions_weighted }
				add_to_variable = { military_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.militia_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = militia_battalions_weighted }
				add_to_variable = { military_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.militia_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = militia_battalions_weighted }
				add_to_variable = { military_industrial_goods_need = need_temp }
				
				#Artillery
				set_temp_variable = { need_temp = global.artillery_base_life_goods_need }
				multiply_temp_variable = { need_temp = artillery_battalions_weighted }
				add_to_variable = { military_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.artillery_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = artillery_battalions_weighted }
				add_to_variable = { military_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.artillery_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = artillery_battalions_weighted }
				add_to_variable = { military_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.artillery_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = artillery_battalions_weighted }
				add_to_variable = { military_industrial_goods_need = need_temp }
				
				#Cavalry
				set_temp_variable = { need_temp = global.cavalry_base_life_goods_need }
				multiply_temp_variable = { need_temp = cavalry_battalions_weighted }
				add_to_variable = { military_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.cavalry_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = cavalry_battalions_weighted }
				add_to_variable = { military_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.cavalry_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = cavalry_battalions_weighted }
				add_to_variable = { military_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.cavalry_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = cavalry_battalions_weighted }
				add_to_variable = { military_industrial_goods_need = need_temp }
				
				#Mobile
				set_temp_variable = { need_temp = global.mobile_base_life_goods_need }
				multiply_temp_variable = { need_temp = mobile_battalions_weighted }
				add_to_variable = { military_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.mobile_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = mobile_battalions_weighted }
				add_to_variable = { military_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.mobile_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = mobile_battalions_weighted }
				add_to_variable = { military_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.mobile_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = mobile_battalions_weighted }
				add_to_variable = { military_industrial_goods_need = need_temp }
				
				#Armor
				set_temp_variable = { need_temp = global.armor_base_life_goods_need }
				multiply_temp_variable = { need_temp = armor_battalions_weighted }
				add_to_variable = { military_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.armor_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = armor_battalions_weighted }
				add_to_variable = { military_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.armor_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = armor_battalions_weighted }
				add_to_variable = { military_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.armor_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = armor_battalions_weighted }
				add_to_variable = { military_industrial_goods_need = need_temp }
				
				#Robotic
				set_temp_variable = { need_temp = global.robotic_base_life_goods_need }
				multiply_temp_variable = { need_temp = robotic_battalions_weighted }
				add_to_variable = { military_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.robotic_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = robotic_battalions_weighted }
				add_to_variable = { military_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.robotic_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = robotic_battalions_weighted }
				add_to_variable = { military_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.robotic_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = robotic_battalions_weighted }
				add_to_variable = { military_industrial_goods_need = need_temp }
				
				#Support
				set_temp_variable = { need_temp = global.support_base_life_goods_need }
				multiply_temp_variable = { need_temp = support_battalions_weighted }
				add_to_variable = { military_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.support_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = support_battalions_weighted }
				add_to_variable = { military_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.support_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = support_battalions_weighted }
				add_to_variable = { military_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.support_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = support_battalions_weighted }
				add_to_variable = { military_industrial_goods_need = need_temp }

				#Total
				set_variable = { military_army_life_goods_need = military_life_goods_need }
				set_variable = { military_army_everyday_goods_need = military_everyday_goods_need }
				set_variable = { military_army_luxury_goods_need = military_luxury_goods_need }
				set_variable = { military_army_industrial_goods_need = military_industrial_goods_need }
			#

			#Navy Needs
				set_variable = { military_navy_life_goods_need = 0 }
				set_variable = { military_navy_everyday_goods_need = 0 }
				set_variable = { military_navy_luxury_goods_need = 0 }
				set_variable = { military_navy_industrial_goods_need = 0 }

				#Screen
				set_temp_variable = { need_temp = global.screen_base_life_goods_need }
				multiply_temp_variable = { need_temp = screen_ships_weighted }
				add_to_variable = { military_navy_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.screen_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = screen_ships_weighted }
				add_to_variable = { military_navy_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.screen_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = screen_ships_weighted }
				add_to_variable = { military_navy_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.screen_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = screen_ships_weighted }
				add_to_variable = { military_navy_industrial_goods_need = need_temp }
				
				#Capital
				set_temp_variable = { need_temp = global.capital_base_life_goods_need }
				multiply_temp_variable = { need_temp = capital_ships_weighted }
				add_to_variable = { military_navy_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.capital_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = capital_ships_weighted }
				add_to_variable = { military_navy_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.capital_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = capital_ships_weighted }
				add_to_variable = { military_navy_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.capital_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = capital_ships_weighted }
				add_to_variable = { military_navy_industrial_goods_need = need_temp }
				
				#Submarine
				set_temp_variable = { need_temp = global.submarine_base_life_goods_need }
				multiply_temp_variable = { need_temp = submarine_ships_weighted }
				add_to_variable = { military_navy_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.submarine_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = submarine_ships_weighted }
				add_to_variable = { military_navy_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.submarine_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = submarine_ships_weighted }
				add_to_variable = { military_navy_luxury_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.submarine_base_industrial_goods_need }
				multiply_temp_variable = { need_temp = submarine_ships_weighted }
				add_to_variable = { military_navy_industrial_goods_need = need_temp }

				#Total
				add_to_variable = { military_life_goods_need = military_navy_life_goods_need }
				add_to_variable = { military_everyday_goods_need = military_navy_everyday_goods_need }
				add_to_variable = { military_luxury_goods_need = military_navy_luxury_goods_need }
				add_to_variable = { military_industrial_goods_need = military_navy_industrial_goods_need }
			#

			#Airforce Needs
				set_variable = { military_airforce_life_goods_need = num_deployed_planes }
				multiply_variable = { military_airforce_life_goods_need = global.deployed_planes_base_life_goods_need }
				
				set_variable = { military_airforce_everyday_goods_need = num_deployed_planes }
				multiply_variable = { military_airforce_everyday_goods_need = global.deployed_planes_base_everyday_goods_need }
				
				set_variable = { military_airforce_luxury_goods_need = num_deployed_planes }
				multiply_variable = { military_airforce_luxury_goods_need = global.deployed_planes_base_luxury_goods_need } #so much steak
				
				set_variable = { military_airforce_industrial_goods_need = num_deployed_planes }
				multiply_variable = { military_airforce_industrial_goods_need = global.deployed_planes_base_industrial_goods_need }
				
				add_to_variable = { military_life_goods_demand = military_airforce_life_goods_need }
				add_to_variable = { military_everyday_goods_demand = military_airforce_everyday_goods_need }
				add_to_variable = { military_luxury_goods_demand = military_airforce_luxury_goods_need }
				add_to_variable = { military_industrial_goods_demand = military_airforce_industrial_goods_need }
			#
			
			#Conscripted Needs
				set_temp_variable = { conscripted_amount = max_available_manpower_k } #Temporary

				set_temp_variable = { need_temp = global.conscripted_base_life_goods_need }
				multiply_temp_variable = { need_temp = conscripted_amount }
				divide_temp_variable = { need_temp = 100 }
				set_variable = { conscripted_life_goods_need = need_temp }

				set_temp_variable = { need_temp = global.conscripted_base_everyday_goods_need }
				multiply_temp_variable = { need_temp = conscripted_amount }
				divide_temp_variable = { need_temp = 100 }
				set_variable = { conscripted_everyday_goods_need = need_temp }
				
				set_temp_variable = { need_temp = global.conscripted_base_luxury_goods_need }
				multiply_temp_variable = { need_temp = conscripted_amount }
				divide_temp_variable = { need_temp = 100 }
				set_variable = { conscripted_luxury_goods_need = need_temp }

				# Pops do not have industrial goods needs, usually
				#set_variable = { conscripted_industrial_goods_need = 0 }
			#
		#
		#Demand
			#Army
			set_variable = { military_army_life_goods_demand = military_army_life_goods_need }
			multiply_variable = { military_army_life_goods_demand = military_spending_percentage }
			divide_variable = { military_army_life_goods_demand = 100 }

			set_variable = { military_army_everyday_goods_demand = military_army_everyday_goods_need }
			multiply_variable = { military_army_everyday_goods_demand = military_spending_percentage }
			divide_variable = { military_army_everyday_goods_demand = 100 }

			set_variable = { military_army_luxury_goods_demand = military_army_luxury_goods_need }
			multiply_variable = { military_army_luxury_goods_demand = military_spending_percentage }
			divide_variable = { military_army_luxury_goods_demand = 100 }

			set_variable = { military_army_industrial_goods_demand = military_army_industrial_goods_need }
			multiply_variable = { military_army_industrial_goods_demand = military_spending_percentage }
			divide_variable = { military_army_industrial_goods_demand = 100 }
			
			#Navy
			set_variable = { military_navy_life_goods_demand = military_navy_life_goods_need }
			multiply_variable = { military_navy_life_goods_demand = military_spending_percentage }
			divide_variable = { military_navy_life_goods_demand = 100 }

			set_variable = { military_navy_everyday_goods_demand = military_navy_everyday_goods_need }
			multiply_variable = { military_navy_everyday_goods_demand = military_spending_percentage }
			divide_variable = { military_navy_everyday_goods_demand = 100 }

			set_variable = { military_navy_luxury_goods_demand = military_navy_luxury_goods_need }
			multiply_variable = { military_navy_luxury_goods_demand = military_spending_percentage }
			divide_variable = { military_navy_luxury_goods_demand = 100 }

			set_variable = { military_navy_industrial_goods_demand = military_navy_industrial_goods_need }
			multiply_variable = { military_navy_industrial_goods_demand = military_spending_percentage }
			divide_variable = { military_navy_industrial_goods_demand = 100 }
			
			#Airforce
			set_variable = { military_airforce_life_goods_demand = military_airforce_life_goods_need }
			multiply_variable = { military_airforce_life_goods_demand = military_spending_percentage }
			divide_variable = { military_airforce_life_goods_demand = 100 }

			set_variable = { military_airforce_everyday_goods_demand = military_airforce_everyday_goods_need }
			multiply_variable = { military_airforce_everyday_goods_demand = military_spending_percentage }
			divide_variable = { military_airforce_everyday_goods_demand = 100 }

			set_variable = { military_airforce_luxury_goods_demand = military_airforce_luxury_goods_need }
			multiply_variable = { military_airforce_luxury_goods_demand = military_spending_percentage }
			divide_variable = { military_airforce_luxury_goods_demand = 100 }

			set_variable = { military_airforce_industrial_goods_demand = military_airforce_industrial_goods_need }
			multiply_variable = { military_airforce_industrial_goods_demand = military_spending_percentage }
			divide_variable = { military_airforce_industrial_goods_demand = 100 }

			#Total
			set_variable = { military_life_goods_demand = military_life_goods_need }
			multiply_variable = { military_life_goods_demand = military_spending_percentage }
			divide_variable = { military_life_goods_demand = 100 }

			set_variable = { military_everyday_goods_demand = military_everyday_goods_need }
			multiply_variable = { military_everyday_goods_demand = military_spending_percentage }
			divide_variable = { military_everyday_goods_demand = 100 }

			set_variable = { military_luxury_goods_demand = military_luxury_goods_need }
			multiply_variable = { military_luxury_goods_demand = military_spending_percentage }
			divide_variable = { military_luxury_goods_demand = 100 }

			set_variable = { military_industrial_goods_demand = military_industrial_goods_need }
			multiply_variable = { military_industrial_goods_demand = military_spending_percentage }
			divide_variable = { military_industrial_goods_demand = 100 }

			#Conscripted
			# This is part of mandatory spending, though the money is directly given to pops instead of buying goods for them
			set_variable = { conscripted_life_goods_demand = conscripted_life_goods_need }
			set_variable = { conscripted_everyday_goods_demand = conscripted_everyday_goods_need }
			set_variable = { conscripted_luxury_goods_demand = conscripted_luxury_goods_need }
		#
	}

	calculate_price = {
		#life_goods
			set_temp_variable = { demand_temp = life_goods_demand }
			set_temp_variable = { supply_temp = life_goods_supply }
			if = {
				limit = {
					check_variable = { life_goods_supply < 1 }
					check_variable = { life_goods_demand < 1 }
					check_variable = { life_goods_trade_amount < 0 }
				}
				set_temp_variable = { trade_amount_temp = life_goods_trade_amount }
				multiply_temp_variable = { trade_amount_temp = 0.9 }
				subtract_from_temp_variable = { supply_temp = trade_amount_temp }
				subtract_from_temp_variable = { demand_temp = life_goods_trade_amount }
			}

			set_temp_variable = { life_goods_prev_price_temp = life_goods_price }
			multiply_temp_variable = { life_goods_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { supply_temp > 0 }
				}
				if = {
					limit = {
						check_variable = { supply_temp < 1 }
					}
					divide_variable = { life_goods_price = supply_temp }
					multiply_variable = { life_goods_price = demand_temp }
				}
				else = {
					multiply_variable = { life_goods_price = demand_temp }
					divide_variable = { life_goods_price = supply_temp }
				}
				add_to_variable = { life_goods_price = life_goods_prev_price_temp }
				divide_variable = { life_goods_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { demand_temp > 0 }
				}
				multiply_variable = { life_goods_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { life_goods_price < 0.01 }
				}
				set_variable = { life_goods_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = life_goods_base_price }
					multiply_temp_variable = { price_temp = 20 }
					check_variable = { life_goods_price > price_temp }
				}
				set_variable = { life_goods_price = price_temp }
			}

		#everyday_goods
			set_temp_variable = { demand_temp = everyday_goods_demand }
			set_temp_variable = { supply_temp = everyday_goods_supply }
			if = {
				limit = {
					check_variable = { everyday_goods_supply < 1 }
					check_variable = { everyday_goods_demand < 1 }
					check_variable = { everyday_goods_trade_amount < 0 }
				}
				set_temp_variable = { trade_amount_temp = everyday_goods_trade_amount }
				multiply_temp_variable = { trade_amount_temp = 0.9 }
				subtract_from_temp_variable = { supply_temp = trade_amount_temp }
				subtract_from_temp_variable = { demand_temp = everyday_goods_trade_amount }
			}

			set_temp_variable = { everyday_goods_prev_price_temp = everyday_goods_price }
			multiply_temp_variable = { everyday_goods_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { supply_temp > 0 }
				}
				if = {
					limit = {
						check_variable = { supply_temp < 1 }
					}
					divide_variable = { everyday_goods_price = supply_temp }
					multiply_variable = { everyday_goods_price = demand_temp }
				}
				else = {
					multiply_variable = { everyday_goods_price = demand_temp }
					divide_variable = { everyday_goods_price = supply_temp }
				}
				add_to_variable = { everyday_goods_price = everyday_goods_prev_price_temp }
				divide_variable = { everyday_goods_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { demand_temp > 0 }
				}
				multiply_variable = { everyday_goods_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { everyday_goods_price < 0.01 }
				}
				set_variable = { everyday_goods_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = everyday_goods_base_price }
					multiply_temp_variable = { price_temp = 20 }
					check_variable = { everyday_goods_price > price_temp }
				}
				set_variable = { everyday_goods_price = price_temp }
			}

		#luxury_goods
			set_temp_variable = { demand_temp = luxury_goods_demand }
			set_temp_variable = { supply_temp = luxury_goods_supply }
			if = {
				limit = {
					check_variable = { luxury_goods_supply < 1 }
					check_variable = { luxury_goods_demand < 1 }
					check_variable = { luxury_goods_trade_amount < 0 }
				}
				set_temp_variable = { trade_amount_temp = luxury_goods_trade_amount }
				multiply_temp_variable = { trade_amount_temp = 0.9 }
				subtract_from_temp_variable = { supply_temp = trade_amount_temp }
				subtract_from_temp_variable = { demand_temp = luxury_goods_trade_amount }
			}

			set_temp_variable = { luxury_goods_prev_price_temp = luxury_goods_price }
			multiply_temp_variable = { luxury_goods_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { supply_temp > 0 }
				}
				if = {
					limit = {
						check_variable = { supply_temp < 1 }
					}
					divide_variable = { luxury_goods_price = supply_temp }
					multiply_variable = { luxury_goods_price = demand_temp }
				}
				else = {
					multiply_variable = { luxury_goods_price = demand_temp }
					divide_variable = { luxury_goods_price = supply_temp }
				}
				add_to_variable = { luxury_goods_price = luxury_goods_prev_price_temp }
				divide_variable = { luxury_goods_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { demand_temp > 0 }
				}
				multiply_variable = { luxury_goods_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { luxury_goods_price < 0.01 }
				}
				set_variable = { luxury_goods_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = luxury_goods_base_price }
					multiply_temp_variable = { price_temp = 20 }
					check_variable = { luxury_goods_price > price_temp }
				}
				set_variable = { luxury_goods_price = price_temp }
			}

		#services
			set_temp_variable = { demand_temp = services_demand }
			set_temp_variable = { supply_temp = services_supply }
			if = {
				limit = {
					check_variable = { services_supply < 1 }
					check_variable = { services_demand < 1 }
					check_variable = { services_trade_amount < 0 }
				}
				set_temp_variable = { trade_amount_temp = services_trade_amount }
				multiply_temp_variable = { trade_amount_temp = 0.9 }
				subtract_from_temp_variable = { supply_temp = trade_amount_temp }
				subtract_from_temp_variable = { demand_temp = services_trade_amount }
			}

			set_temp_variable = { services_prev_price_temp = services_price }
			multiply_temp_variable = { services_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { supply_temp > 0 }
				}
				if = {
					limit = {
						check_variable = { supply_temp < 1 }
					}
					divide_variable = { services_price = supply_temp }
					multiply_variable = { services_price = demand_temp }
				}
				else = {
					multiply_variable = { services_price = demand_temp }
					divide_variable = { services_price = supply_temp }
				}
				add_to_variable = { services_price = services_prev_price_temp }
				divide_variable = { services_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { demand_temp > 0 }
				}
				multiply_variable = { services_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { services_price < 0.01 }
				}
				set_variable = { services_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = services_base_price }
					multiply_temp_variable = { price_temp = 20 }
					check_variable = { services_price > price_temp }
				}
				set_variable = { services_price = price_temp }
			}

		#raw_goods
			set_temp_variable = { demand_temp = raw_goods_demand }
			set_temp_variable = { supply_temp = raw_goods_supply }
			if = {
				limit = {
					check_variable = { raw_goods_supply < 1 }
					check_variable = { raw_goods_demand < 1 }
					check_variable = { raw_goods_trade_amount < 0 }
				}
				set_temp_variable = { trade_amount_temp = raw_goods_trade_amount }
				multiply_temp_variable = { trade_amount_temp = 0.9 }
				subtract_from_temp_variable = { supply_temp = trade_amount_temp }
				subtract_from_temp_variable = { demand_temp = raw_goods_trade_amount }
			}

			set_temp_variable = { raw_goods_prev_price_temp = raw_goods_price }
			multiply_temp_variable = { raw_goods_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { supply_temp > 0 }
				}
				if = {
					limit = {
						check_variable = { supply_temp < 1 }
					}
					divide_variable = { raw_goods_price = supply_temp }
					multiply_variable = { raw_goods_price = demand_temp }
				}
				else = {
					multiply_variable = { raw_goods_price = demand_temp }
					divide_variable = { raw_goods_price = supply_temp }
				}
				add_to_variable = { raw_goods_price = raw_goods_prev_price_temp }
				divide_variable = { raw_goods_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { demand_temp > 0 }
				}
				multiply_variable = { raw_goods_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { raw_goods_price < 0.01 }
				}
				set_variable = { raw_goods_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = raw_goods_base_price }
					multiply_temp_variable = { price_temp = 20 }
					check_variable = { raw_goods_price > price_temp }
				}
				set_variable = { raw_goods_price = price_temp }
			}

		#industrial_goods
			set_temp_variable = { demand_temp = industrial_goods_demand }
			set_temp_variable = { supply_temp = industrial_goods_supply }
			if = {
				limit = {
					check_variable = { industrial_goods_supply < 1 }
					check_variable = { industrial_goods_demand < 1 }
					check_variable = { industrial_goods_trade_amount < 0 }
				}
				set_temp_variable = { trade_amount_temp = industrial_goods_trade_amount }
				multiply_temp_variable = { trade_amount_temp = 0.9 }
				subtract_from_temp_variable = { supply_temp = trade_amount_temp }
				subtract_from_temp_variable = { demand_temp = industrial_goods_trade_amount }
			}

			set_temp_variable = { industrial_goods_prev_price_temp = industrial_goods_price }
			multiply_temp_variable = { industrial_goods_prev_price_temp = 2 }
			if = {
				limit = {
					check_variable = { supply_temp > 0 }
				}
				if = {
					limit = {
						check_variable = { supply_temp < 1 }
					}
					divide_variable = { industrial_goods_price = supply_temp }
					multiply_variable = { industrial_goods_price = demand_temp }
				}
				else = {
					multiply_variable = { industrial_goods_price = demand_temp }
					divide_variable = { industrial_goods_price = supply_temp }
				}
				add_to_variable = { industrial_goods_price = industrial_goods_prev_price_temp }
				divide_variable = { industrial_goods_price = 3 }
			}
			else_if = {
				limit = {
					check_variable = { demand_temp > 0 }
				}
				multiply_variable = { industrial_goods_price = 1.2 }
			}
			if = {
				limit = {
					check_variable = { industrial_goods_price < 0.01 }
				}
				set_variable = { industrial_goods_price = 0.01 }
			}
			else_if = {
				limit = {
					set_temp_variable = { price_temp = industrial_goods_base_price }
					multiply_temp_variable = { price_temp = 20 }
					check_variable = { industrial_goods_price > price_temp }
				}
				set_variable = { industrial_goods_price = price_temp }
			}

	}
	calculate_base_priced = {
		if = {
			limit = {
				check_variable = { everyday_goods_supply > everyday_goods_demand }
			}
			#set_temp_variable = { everyday_goods_ff = 1 }
			#subtract_from_variable = { everyday_goods_base_price = 0.001 }
			#divide_variable = { everyday_goods_base_price = 1.01 }
			set_temp_variable = { demand_temp = everyday_goods_demand }
			if = {
				limit = {
					multiply_temp_variable = { demand_temp = 1.1 }
					check_variable = { everyday_goods_supply > demand_temp }
				}
				subtract_from_variable = { everyday_goods_base_price = 0.001 }
				divide_variable = { everyday_goods_base_price = 1.01 }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.5 }
						check_variable = { everyday_goods_supply > demand_temp }
					}
					subtract_from_variable = { everyday_goods_base_price = 0.001 }
					divide_variable = { everyday_goods_base_price = 1.01 }
					if = {
						limit = {
							multiply_temp_variable = { demand_temp = 1.5 }
							check_variable = { everyday_goods_supply > demand_temp }
						}
						subtract_from_variable = { everyday_goods_base_price = 0.001 }
						divide_variable = { everyday_goods_base_price = 1.01 }
						if = {
							limit = {
								multiply_temp_variable = { demand_temp = 1.5 }
								check_variable = { everyday_goods_supply > demand_temp }
							}
							subtract_from_variable = { everyday_goods_base_price = 0.001 }
							divide_variable = { everyday_goods_base_price = 1.01 }
						}
					}
				}
			}
			if = {
				limit = {
					#set_temp_variable = { base_price_catch = global_everyday_goods_base_price }
					#divide_temp_variable = { base_price_catch = 100 }
					check_variable = { everyday_goods_base_price < 0.01 }
				}
				set_variable = { everyday_goods_base_price = 0.01 }
			}
		}
		if = {
			limit = {
				check_variable = { everyday_goods_demand > everyday_goods_supply }
			}
			#add_to_variable = { everyday_goods_base_price = 0.001 }
			#multiply_variable = { everyday_goods_base_price = 1.01 }
			set_temp_variable = { supply_temp = everyday_goods_supply }
			if = {
				limit = {
					multiply_temp_variable = { supply_temp = 1.1 }
					check_variable = { everyday_goods_demand > supply_temp }
				}
				add_to_variable = { everyday_goods_base_price = 0.001 }
				multiply_variable = { everyday_goods_base_price = 1.01 }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.5 }
						check_variable = { everyday_goods_demand > supply_temp }
					}
					add_to_variable = { everyday_goods_base_price = 0.001 }
					multiply_variable = { everyday_goods_base_price = 1.01 }
					if = {
						limit = {
							multiply_temp_variable = { supply_temp = 1.5 }
							check_variable = { everyday_goods_demand > supply_temp }
						}
						add_to_variable = { everyday_goods_base_price = 0.001 }
						multiply_variable = { everyday_goods_base_price = 1.01 }
						if = {
							limit = {
								multiply_temp_variable = { supply_temp = 1.5 }
								check_variable = { everyday_goods_demand > supply_temp }
							}
							add_to_variable = { everyday_goods_base_price = 0.001 }
							multiply_variable = { everyday_goods_base_price = 1.01 }
						}
					}
				}
			}
			if = {
				#INFLATION CATCH
				#TODO - Change global scope to national scope
				limit = {
					set_temp_variable = { base_price_catch = global.everyday_goods_base_price }
					multiply_temp_variable = { base_price_catch = 100 }
					check_variable = { everyday_goods_base_price > base_price_catch }
				}
				set_variable = { everyday_goods_base_price = base_price_catch }
			}
		}
	}
	calculate_base_price = {

		#life_goods
			if = {
				limit = {
					check_variable = { life_goods_base_price > life_goods_price }
				}
				#set_temp_variable = { life_goods_ff = 1 }
				#subtract_from_variable = { life_goods_base_price = 0.001 }
				#divide_variable = { life_goods_base_price = 1.01 }
				set_temp_variable = { demand_temp = life_goods_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { life_goods_base_price > demand_temp }
					}
					subtract_from_variable = { life_goods_base_price = 0.001 }
					divide_variable = { life_goods_base_price = 1.01 }

				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_life_goods_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { life_goods_base_price < 0.01 }
					}
					set_variable = { life_goods_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { life_goods_price > life_goods_base_price }
				}
				#add_to_variable = { life_goods_base_price = 0.001 }
				#multiply_variable = { life_goods_base_price = 1.01 }
				set_temp_variable = { supply_temp = life_goods_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { life_goods_price > supply_temp }
					}
					add_to_variable = { life_goods_base_price = 0.001 }
					multiply_variable = { life_goods_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.life_goods_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { life_goods_base_price > base_price_catch }
					}
					set_variable = { life_goods_base_price = base_price_catch }
				}
			}


		#everyday_goods
			if = {
				limit = {
					check_variable = { everyday_goods_base_price > everyday_goods_price }
				}
				#set_temp_variable = { everyday_goods_ff = 1 }
				#subtract_from_variable = { everyday_goods_base_price = 0.001 }
				#divide_variable = { everyday_goods_base_price = 1.01 }
				set_temp_variable = { demand_temp = everyday_goods_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { everyday_goods_base_price > demand_temp }
					}
					subtract_from_variable = { everyday_goods_base_price = 0.001 }
					divide_variable = { everyday_goods_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_everyday_goods_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { everyday_goods_base_price < 0.01 }
					}
					set_variable = { everyday_goods_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { everyday_goods_price > everyday_goods_base_price }
				}
				#add_to_variable = { everyday_goods_base_price = 0.001 }
				#multiply_variable = { everyday_goods_base_price = 1.01 }
				set_temp_variable = { supply_temp = everyday_goods_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { everyday_goods_price > supply_temp }
					}
					add_to_variable = { everyday_goods_base_price = 0.001 }
					multiply_variable = { everyday_goods_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.everyday_goods_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { everyday_goods_base_price > base_price_catch }
					}
					set_variable = { everyday_goods_base_price = base_price_catch }
				}
			}
		#luxury_goods
			if = {
				limit = {
					check_variable = { luxury_goods_base_price > luxury_goods_price }
				}
				#set_temp_variable = { luxury_goods_ff = 1 }
				#subtract_from_variable = { luxury_goods_base_price = 0.001 }
				#divide_variable = { luxury_goods_base_price = 1.01 }
				set_temp_variable = { demand_temp = luxury_goods_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { luxury_goods_base_price > demand_temp }
					}
					subtract_from_variable = { luxury_goods_base_price = 0.001 }
					divide_variable = { luxury_goods_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_luxury_goods_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { luxury_goods_base_price < 0.01 }
					}
					set_variable = { luxury_goods_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { luxury_goods_price > luxury_goods_base_price }
				}
				#add_to_variable = { luxury_goods_base_price = 0.001 }
				#multiply_variable = { luxury_goods_base_price = 1.01 }
				set_temp_variable = { supply_temp = luxury_goods_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { luxury_goods_price > supply_temp }
					}
					add_to_variable = { luxury_goods_base_price = 0.001 }
					multiply_variable = { luxury_goods_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.luxury_goods_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { luxury_goods_base_price > base_price_catch }
					}
					set_variable = { luxury_goods_base_price = base_price_catch }
				}
			}
		#services
			if = {
				limit = {
					check_variable = { services_base_price > services_price }
				}
				#set_temp_variable = { services_ff = 1 }
				#subtract_from_variable = { services_base_price = 0.001 }
				#divide_variable = { services_base_price = 1.01 }
				set_temp_variable = { demand_temp = services_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { services_base_price > demand_temp }
					}
					subtract_from_variable = { services_base_price = 0.001 }
					divide_variable = { services_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_services_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { services_base_price < 0.01 }
					}
					set_variable = { services_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { services_price > services_base_price }
				}
				#add_to_variable = { services_base_price = 0.001 }
				#multiply_variable = { services_base_price = 1.01 }
				set_temp_variable = { supply_temp = services_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { services_price > supply_temp }
					}
					add_to_variable = { services_base_price = 0.001 }
					multiply_variable = { services_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.services_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { services_base_price > base_price_catch }
					}
					set_variable = { services_base_price = base_price_catch }
				}
			}
		#raw_goods
			if = {
				limit = {
					check_variable = { raw_goods_base_price > raw_goods_price }
				}
				#set_temp_variable = { raw_goods_ff = 1 }
				#subtract_from_variable = { raw_goods_base_price = 0.001 }
				#divide_variable = { raw_goods_base_price = 1.01 }
				set_temp_variable = { demand_temp = raw_goods_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { raw_goods_base_price > demand_temp }
					}
					subtract_from_variable = { raw_goods_base_price = 0.001 }
					divide_variable = { raw_goods_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_raw_goods_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { raw_goods_base_price < 0.01 }
					}
					set_variable = { raw_goods_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { raw_goods_price > raw_goods_base_price }
				}
				#add_to_variable = { raw_goods_base_price = 0.001 }
				#multiply_variable = { raw_goods_base_price = 1.01 }
				set_temp_variable = { supply_temp = raw_goods_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { raw_goods_price > supply_temp }
					}
					add_to_variable = { raw_goods_base_price = 0.001 }
					multiply_variable = { raw_goods_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.raw_goods_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { raw_goods_base_price > base_price_catch }
					}
					set_variable = { raw_goods_base_price = base_price_catch }
				}
			}
		#industrial_goods
			if = {
				limit = {
					check_variable = { industrial_goods_base_price > industrial_goods_price }
				}
				#set_temp_variable = { industrial_goods_ff = 1 }
				#subtract_from_variable = { industrial_goods_base_price = 0.001 }
				#divide_variable = { industrial_goods_base_price = 1.01 }
				set_temp_variable = { demand_temp = industrial_goods_price }
				if = {
					limit = {
						multiply_temp_variable = { demand_temp = 1.02 }
						check_variable = { industrial_goods_base_price > demand_temp }
					}
					subtract_from_variable = { industrial_goods_base_price = 0.001 }
					divide_variable = { industrial_goods_base_price = 1.01 }
				}
				if = {
					limit = {
						#set_temp_variable = { base_price_catch = global_industrial_goods_base_price }
						#divide_temp_variable = { base_price_catch = 100 }
						check_variable = { industrial_goods_base_price < 0.01 }
					}
					set_variable = { industrial_goods_base_price = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = { industrial_goods_price > industrial_goods_base_price }
				}
				#add_to_variable = { industrial_goods_base_price = 0.001 }
				#multiply_variable = { industrial_goods_base_price = 1.01 }
				set_temp_variable = { supply_temp = industrial_goods_base_price }
				if = {
					limit = {
						multiply_temp_variable = { supply_temp = 1.02 }
						check_variable = { industrial_goods_price > supply_temp }
					}
					add_to_variable = { industrial_goods_base_price = 0.001 }
					multiply_variable = { industrial_goods_base_price = 1.01 }
				}
				if = {
					#INFLATION CATCH
					#TODO - Change global scope to national scope
					limit = {
						set_temp_variable = { base_price_catch = global.industrial_goods_base_price }
						multiply_temp_variable = { base_price_catch = 100 }
						check_variable = { industrial_goods_base_price > base_price_catch }
					}
					set_variable = { industrial_goods_base_price = base_price_catch }
				}
			}
	}
#

#Modifiers
	update_modifiers_state_effects = {
		#State Scope
		#Updates the effects for all the modifiers that apply to the state level
		
		#NOTE: These are not the modifiers themselves. These are the effects that the modifiers have
		#Set to 0
			#General Modifiers
				set_variable = { build_cost_effect = 0 }
				set_variable = { build_speed_effect = 0 }

				set_variable = { transport_cost_effect = 0 }

			#RGO Modifiers
				set_variable = { rgo_max_size_effect = 0 }
				set_variable = { life_goods_rgos_max_mechanization = 0 }
				set_variable = { raw_goods_rgos_max_mechanization = 0 }
				set_variable = { valuable_goods_rgos_max_mechanization = 0 }

				set_variable = { rgo_output_effect = 0 }
				set_variable = { raw_goods_output_effect = 0 }
				set_variable = { life_goods_output_effect = 0 }
				set_variable = { valuable_goods_output_effect = 0 }
			#
			#Factory Modifiers
				set_variable = { factory_size_effect = 0 }
				set_variable = { factory_build_cost_effect = 0 }
				set_variable = { factory_build_speed_effect = 0 }

				set_variable = { factory_goods_output_effect = 0 }
				set_variable = { factory_everyday_goods_output_effect = 0 }
				set_variable = { factory_luxury_goods_output_effect = 0 }
				set_variable = { factory_industrial_goods_output_effect = 0 }
				
				set_variable = { factory_throughput_effect = 0 }
				set_variable = { factory_everyday_goods_throughput_effect = 0 }
				set_variable = { factory_luxury_goods_throughput_effect = 0 }
				set_variable = { factory_industrial_goods_throughput_effect = 0 }
				
				set_variable = { factory_raw_goods_input_effect = 0 }
				set_variable = { factory_everyday_goods_raw_goods_input_effect = 0 }
				set_variable = { factory_luxury_goods_raw_goods_input_effect = 0 }
				set_variable = { factory_industrial_goods_raw_goods_input_effect = 0 }

				set_variable = { factory_industrial_goods_maintenance_effect = 0 }
			#
			#Service Modifiers
				set_variable = { services_output_effect = 0 }
			#
			#Infrastructure Modifiers
				set_variable = { infrastructure_build_cost_effect = 0 }
				set_variable = { infrastructure_build_speed_effect = 0 }
				set_variable = { infrastructure_maintenance_cost_effect = 0 }
				set_variable = { infrastructure_efficiency_effect = 0 }
			#
		#
		#State Level Modifiers
			#General Modifiers
				#Infrastructure
				add_to_variable = { build_cost_effect = infrastructure_build_cost_modifier }
				add_to_variable = { transport_cost_effect = infrastructure_transport_cost_modifier }
			#
			#RGO Modifiers
				#Pops
				add_to_variable = { rgo_output_effect = aristocrats_rgo_output_modifier }

				#Infrastructure
				add_to_variable = { rgo_output_effect = infrastructure_rgo_output_modifier }

			#
			#Factory Modifiers
				#Pops
				add_to_variable = { factory_raw_goods_input_effect = capitalists_factory_raw_goods_input_modifier }

				#Infrastructure
				add_to_variable = { factory_throughput_effect = infrastructure_factory_throughput_modifier }

			#
			#Services Modifiers
				#Pops
				add_to_variable = { services_output_effect = capitalists_services_output_modifier }

			#
			#Infrastructure Modifiers

			#
		#
		#Country Level Modifiers
			
		#
		#Tech
			controller = {
				#General Modifiers
				add_to_variable = { PREV.build_cost_effect = modifier@build_cost_modifier }
				add_to_variable = { PREV.build_speed_effect = modifier@build_speed_modifier }

				add_to_variable = { PREV.transport_cost_effect = modifier@transport_cost_modifier }

				#RGO modifiers
				add_to_variable = { PREV.rgo_output_effect = modifier@rgo_output_modifier }
				add_to_variable = { PREV.raw_goods_output_effect = modifier@raw_goods_rgo_output_modifier }
				add_to_variable = { PREV.life_goods_output_effect = modifier@life_goods_rgo_output_modifier }
				add_to_variable = { PREV.valuable_goods_output_effect = modifier@valuable_goods_rgo_output_modifier }

				add_to_variable = { PREV.rgo_max_size_effect = modifier@rgo_max_size_modifier }
				add_to_variable = { PREV.life_goods_rgos_max_mechanization = modifier@life_goods_rgo_max_mechanization_modifier }
				add_to_variable = { PREV.life_goods_rgos_max_mechanization = modifier@rgo_max_mechanization_modifier }
				add_to_variable = { PREV.raw_goods_rgos_max_mechanization = modifier@raw_goods_rgo_max_mechanization_modifier }
				add_to_variable = { PREV.raw_goods_rgos_max_mechanization = modifier@rgo_max_mechanization_modifier }
				add_to_variable = { PREV.valuable_goods_rgos_max_mechanization = modifier@valuable_goods_rgo_max_mechanization_modifier }
				add_to_variable = { PREV.valuable_goods_rgos_max_mechanization = modifier@rgo_max_mechanization_modifier }

				#Factory Modifiers
				add_to_variable = { PREV.factory_size_effect = modifier@factory_size_modifier }
				add_to_variable = { PREV.factory_build_cost_effect = modifier@factory_build_cost_modifier }
				add_to_variable = { PREV.factory_build_speed_effect = modifier@factory_build_speed_modifier }

				add_to_variable = { PREV.factory_goods_output_effect = modifier@factory_output_modifier }
				add_to_variable = { PREV.factory_everyday_goods_effect = modifier@everyday_goods_factory_output_modifier }
				add_to_variable = { PREV.factory_luxury_goods_effect = modifier@luxury_goods_factory_output_modifier }
				add_to_variable = { PREV.factory_industrial_goods_output_effect = modifier@rgo_max_size_industrial_goods_factory_output_modifiermodifier }

				add_to_variable = { PREV.factory_throughput_effect = modifier@factory_throughput_modifier }
				add_to_variable = { PREV.factory_everyday_goods_throughput_effect = modifier@everyday_goods_factory_throughput_modifier }
				add_to_variable = { PREV.factory_luxury_goods_throughput_effect = modifier@luxury_goods_factory_throughput_modifier }
				add_to_variable = { PREV.factory_industrial_goods_throughput_effect = modifier@industrial_goods_factory_throughput_modifier }

				add_to_variable = { PREV.factory_raw_goods_input_effect = modifier@factory_input_modifier }
				add_to_variable = { PREV.factory_everyday_goods_raw_goods_input_effect = modifier@everyday_goods_factory_input_modifier }
				add_to_variable = { PREV.factory_luxury_goods_raw_goods_input_effect = modifier@luxury_goods_factory_input_modifier }
				add_to_variable = { PREV.factory_industrial_goods_raw_goods_input_effect = modifier@industrial_goods_factory_input_modifier }
				
				add_to_variable = { PREV.factory_industrial_goods_maintenance_effect = modifier@factory_maintenance_modifier }

				#Infrastructure Modifiers
				add_to_variable = { PREV.infrastructure_build_cost_effect = modifier@infrastructure_build_cost_modifier }
				add_to_variable = { PREV.infrastructure_build_speed_effect = modifier@infrastructure_build_speed_modifier }
				add_to_variable = { PREV.infrastructure_maintenance_cost_effect = modifier@infrastructure_maintenance_modifier }
				add_to_variable = { PREV.infrastructure_efficiency_effect = modifier@infrastructure_efficiency_modifier }
			}
		#
		#Multipliers
			#Factories
				#State Categories
				add_to_variable = { factory_throughput_effect = 1 }
				add_to_variable = { factory_raw_goods_input_effect = 1 }
				add_to_variable = { factory_goods_output_effect = 1 }

				if = {
					limit = {
						has_state_category = megalopolis
					}
					multiply_variable = { factory_throughput_effect = 1.2 }
					multiply_variable = { factory_raw_goods_input_effect = 0.8 }
				}
				else_if = {
					limit = {
						has_state_category = metropolis
					}
					multiply_variable = { factory_throughput_effect = 1.15 }
					multiply_variable = { factory_raw_goods_input_effect = 0.85 }
				}
				else_if = {
					limit = {
						has_state_category = large_city 
					}
					multiply_variable = { factory_throughput_effect = 1.10 }
					multiply_variable = { factory_raw_goods_input_effect = 0.9 }
				}
				else_if = {
					limit = {
						has_state_category = city 
					}
					multiply_variable = { factory_throughput_effect = 1.05 }
					multiply_variable = { factory_raw_goods_input_effect = 0.95 }
				}
				else_if = {
					limit = {
						has_state_category = large_town 
					}
					multiply_variable = { factory_raw_goods_input_effect = 0.98 }
				}
				else_if = {
					limit = {
						has_state_category = town 
					}
					multiply_variable = { factory_throughput_effect = 0.9 }
				}
				else_if = {
					limit = {
						has_state_category = rural 
					}
					multiply_variable = { factory_throughput_effect = 0.75 }
					multiply_variable = { factory_raw_goods_input_effect = 1.05 }
				}
				else_if = {
					limit = {
						has_state_category = pastoral 
					}
					multiply_variable = { factory_throughput_effect = 0.66 }
					multiply_variable = { factory_raw_goods_input_effect = 1.1 }
				}
				else_if = {
					limit = {
						has_state_category = wasteland 
					}
					multiply_variable = { factory_throughput_effect = 0.5 }
					multiply_variable = { factory_raw_goods_input_effect = 1.2 }
				}
				else = {

				}

				
				#Factory Size
				set_temp_variable = { economy_of_scale_temp = factory_employment_amount }
				while_loop_effect = {
					limit = {
						check_variable = { economy_of_scale_temp > 10 }
					}
					divide_temp_variable = { economy_of_scale_temp = 2 }
					multiply_variable = { factory_raw_goods_input_effect = 0.98 }
					multiply_variable = { factory_goods_output_effect = global.factory_economy_of_scale }
				}


				subtract_from_variable = { factory_throughput_effect = 1 }
				subtract_from_variable = { factory_raw_goods_input_effect = 1 }
				subtract_from_variable = { factory_goods_output_effect = 1 }
			#
		#
		#Resolve and Clear unneeded vars
			add_to_variable = { factory_build_cost_effect = build_cost_effect }
			add_to_variable = { infrastructure_build_cost_effect = build_cost_effect }
			clear_variable = build_cost_effect

			add_to_variable = { factory_build_speed_effect = build_speed_effect }
			add_to_variable = { infrastructure_build_speed_effect = build_speed_effect }
			clear_variable = build_speed_effect

			add_to_variable = { raw_goods_output_effect = rgo_output_effect }
			add_to_variable = { life_goods_output_effect = rgo_output_effect }
			add_to_variable = { valuable_goods_output_effect = rgo_output_effect }
			clear_variable = rgo_output_effect

			add_to_variable = { factory_everyday_goods_output_effect = factory_goods_output_effect }
			add_to_variable = { factory_luxury_goods_output_effect = factory_goods_output_effect }
			add_to_variable = { factory_industrial_goods_output_effect = factory_goods_output_effect }
			clear_variable = factory_goods_output_effect

			add_to_variable = { factory_everyday_goods_throughput_effect = factory_throughput_effect }
			add_to_variable = { factory_luxury_goods_throughput_effect = factory_throughput_effect }
			add_to_variable = { factory_industrial_goods_throughput_effect = factory_throughput_effect }
			clear_variable = factory_throughput_effect

			add_to_variable = { factory_everyday_goods_raw_goods_input_effect = factory_raw_goods_input_effect }
			add_to_variable = { factory_luxury_goods_raw_goods_input_effect = factory_raw_goods_input_effect }
			add_to_variable = { factory_industrial_goods_raw_goods_input_effect = factory_raw_goods_input_effect }
			clear_variable = factory_raw_goods_input_effect
		#

		#Multipliers
			#RGOs
				#Mechanization
				add_to_variable = { rgo_max_size_effect = 1 }
				multiply_variable = { rgo_max_size_effect = rgos_mechanization_rgo_max_size_multiplier }
				subtract_from_variable = { rgo_max_size_effect = 1 }

				add_to_variable = { raw_goods_output_effect = 1 }
				add_to_variable = { life_goods_output_effect = 1 }
				add_to_variable = { valuable_goods_output_effect = 1 }
				multiply_variable = { raw_goods_output_effect = rgos_mechanization_rgo_output_multiplier }
				multiply_variable = { life_goods_output_effect = rgos_mechanization_rgo_output_multiplier }
				multiply_variable = { valuable_goods_output_effect = rgos_mechanization_rgo_output_multiplier }
				subtract_from_variable = { raw_goods_output_effect = 1 }
				subtract_from_variable = { life_goods_output_effect = 1 }
				subtract_from_variable = { valuable_goods_output_effect = 1 }
			#
		#
	}
#

#Tech
	calibrate_tech_bonuses = {
		#This will be done on startup and after startup. Sets all bonuses from tech to 0 then checks all techs and adds their bonuses
		
		set_variable = { infrastructure_max_level = 6 } #Flat Value
		
		#General Modifiers
		set_variable = { tech_build_cost = 0 } #Modifier, Negative is good
		set_variable = { tech_build_speed = 0 } #Modifier, Positive is good

		set_variable = { tech_transport_cost = 0 } #Modifier, Negative is good

		#RGO modifiers
		set_variable = { tech_rgo_max_size = 0 } #Modifier, Positive is good

		set_variable = { tech_rgo_output = 0 } #Modifier, Positive is good
		set_variable = { tech_raw_goods_output = 0 } #Modifier, Positive is good
		set_variable = { tech_life_goods_output = 0 } #Modifier, Positive is good
		set_variable = { tech_valuable_goods_output = 0 } #Modifier, Positive is good

		set_variable = { tech_life_goods_rgos_max_mechanization = 0 } #Maximum, Positive is good, Maxes out at 1.00
		set_variable = { tech_raw_goods_rgos_max_mechanization = 0 } #Maximum, Positive is good, Maxes out at 1.00
		set_variable = { tech_valuable_goods_rgos_max_mechanization = 0 } #Maximum, Positive is good, Maxes out at 1.00

		#Factory Modifiers
		set_variable = { tech_factory_size = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_build_cost = 0 } #Modifier, Negative is good

		set_variable = { tech_factory_goods_output = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_everyday_goods_output = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_luxury_goods_output = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_industrial_goods_output = 0 } #Modifier, Positive is good

		set_variable = { tech_factory_throughput = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_everyday_goods_throughput = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_luxury_goods_throughput = 0 } #Modifier, Positive is good
		set_variable = { tech_factory_industrial_goods_throughput = 0 } #Modifier, Positive is good

		set_variable = { tech_factory_raw_goods_input = 0 } #Modifier, Negative is good
		set_variable = { tech_factory_everyday_goods_raw_goods_input = 0 } #Modifier, Negative is good
		set_variable = { tech_factory_luxury_goods_raw_goods_input = 0 } #Modifier, Negative is good
		set_variable = { tech_factory_industrial_goods_raw_goods_input = 0 } #Modifier, Negative is good
		
		set_variable = { tech_factory_industrial_goods_maintenance = 0 } #Modifier, Negative is good

		#Infrastructure Modifiers
		set_variable = { tech_infrastructure_build_cost = 0 } #Modifier, Negative is good
		set_variable = { tech_infrastructure_maintenance_cost = 0 } #Modifier, Negative is good
		set_variable = { tech_infrastructure_transport_cost_reduction = 0 } #Modifier, Positive is good
		set_variable = { tech_infrastructure_shipping_cost_reduction = 0 } #Modifier, Positive is good



		#Mechanical Engineering
			#Railroad
				if = {
					limit = {
						has_tech = iron_railways
					}
					#Enables Level 9 Infra
					set_variable = { infrastructure_max_level = 9 }
					
					if = {
						limit = {
							has_tech = steel_railways
						}
 						#Enables Level 10 Infra
						set_variable = { infrastructure_max_level = 10 }

						if = {
							limit = {
								has_tech = standardized_gauge
							}
							#-5% Infrastructure Build Cost
							#-5% Infrastructure Maintenance Cost
							#+25% Infrastructure Transport Cost Reduction
							#+5% Infra Build Speed
							#Adds an idea that lasts for 10 years for standardizing rail guage: +20% Infrastructure Maintenance Cost, -25% Infrastructure Transport Cost Reduction
							add_to_variable = { tech_infrastructure_build_cost = -0.05 }
							add_to_variable = { tech_infrastructure_maintenance_cost = -0.05 }
							add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.25 }
						}
					}
				}
			#
			#Steam Locomotives
				if = {
					limit = {
						has_tech = steam_locomotive
					}
					#+10% Infrastructure Transport Cost Reduction
					add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.10 }
					 
					if = {
						limit = {
							has_tech = early_electric_trains
						}
						#+5% Infrastructure Transport Cost Reduction
						#-2.5% Infrastructure Maintenance Cost
						add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.05 }
						add_to_variable = { tech_infrastructure_maintenance_cost = -0.025 }
						
					}
					if = {
						limit = {
							has_tech = steam_locomotive_2
						}
						#+10% Infrastructure Transport Cost Reduction
						add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.10 }
						
						if = {
							limit = {
								has_tech = traction_engine
							}
							#-2.5% Transport Cost
							#+2.5% Life Goods RGOs Max Mechanization
							add_to_variable = { tech_transport_cost = -0.025 }
							add_to_variable = { tech_life_goods_rgos_max_mechanization = 0.025 }

						}
						if = {
							limit = {
								has_tech = steam_locomotive_3
							}
							#+10% Infrastructure Transport Cost Reduction
							add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.10 }
							
							if = {
								limit = {
									has_tech = steam_locomotive_4
								}
								#+10% Infrastructure Transport Cost Reduction
								add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.10 }
								
							}
						}
					}
				}
			#
			#Diesel Locomotives
				if = {
					limit = {
						has_tech = diesel_locomotive_1
					}
					#+10% Infrastructure Transport Cost Reduction
					add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.15 }
					 
					if = {
						limit = {
							has_tech = diesel_locomotive_2
						}
						#+10% Infrastructure Transport Cost Reduction
						add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.15 }
						
						if = {
							limit = {
								has_tech = diesel_locomotive_3
							}
							#+10% Infrastructure Transport Cost Reduction
							add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.15 }
							
							if = {
								limit = {
									has_tech = diesel_locomotive_4
								}
								#+10% Infrastructure Transport Cost Reduction
								add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.15 }
								
								if = {
									limit = {
										has_tech = diesel_locomotive_5
									}
									#+10% Infrastructure Transport Cost Reduction
									add_to_variable = { tech_infrastructure_transport_cost_reduction = 0.15 }
									
								}
							}
						}
					}
				}
			#
			#Infrastructure
				if = {
					limit = {
						has_tech = electric_tramway
					}
					#+5% Factory Efficiency Growth
					#+4% Factory Goods Output
					add_to_variable = { tech_factory_goods_output = 0.04 }
				}
			#
			#Engines
				if = {
					limit = {
						has_tech = steam_engine
					}
					#+10% Resource Gain Efficiency
					#+20% Raw Goods Output
					#+20% Factory Throughput
					#+10% Factory Build Cost
					#+50% Factory Industrial Goods Maintenance
					add_to_variable = { tech_raw_goods_output = 0.2 }
					add_to_variable = { tech_factory_throughput = 0.20 }
					add_to_variable = { tech_factory_build_cost = 0.10 }
					add_to_variable = { tech_factory_industrial_goods_maintenance = 0.50 }

					if = {
						limit = {
							has_tech = high_speed_steam_engine #High Pressure Steam Engine
						}
						#+10% Resource Gain Efficiency
						#+15% Raw Goods Output
						#-4% Factory Raw Goods Input
						#-10% Factory Industrial Goods Maintenance 
						add_to_variable = { tech_raw_goods_output = 0.15 }
						add_to_variable = { tech_factory_throughput = 0.08 }
						subtract_from_variable = { tech_factory_raw_goods_input = -0.04 }
						subtract_from_variable = { tech_factory_industrial_goods_maintenance = -0.10 }

						if = {
							limit = {
								has_tech = porter_allen_engine
							}
							#+5% Resource Gain Efficiency
							#+10% Raw Goods Output
							add_to_variable = { tech_raw_goods_output = 0.10 }
							add_to_variable = { tech_factory_throughput = 0.04 }
						}
					}
				}
			#
			#Industrial Production

				if = {
					limit = {
						has_tech = manufactories
					}
					#Enables Level 6 Mils
					#Enables Level 6 Civs
					#+5% Production Efficiency Cap
					#+10% Factory Throughput
					#+10% Factory Industrial Goods Maintenance
					add_to_variable = { tech_factory_throughput = 0.10 }
					add_to_variable = { tech_factory_industrial_goods_maintenance = 0.10 }

					if = {
						limit = {
							has_tech = factory_industry_1
						}
						#Enables Level 8 Mils
						#Enables Level 8 Civs
						#+5% Max Factories in a State
						#+8% Factory Throughput
						#+10% Factory Size
						#+10% Factory Build Cost
						#+12% Factory Industrial Goods Maintenance
						add_to_variable = { tech_factory_throughput = 0.08 }
						add_to_variable = { tech_factory_size = 0.10 }
						add_to_variable = { tech_factory_build_cost = 0.10 }
						add_to_variable = { tech_factory_industrial_goods_maintenance = 0.12 }

						if = {
							limit = {
								has_tech = factory_industry_2
							}
							#Enables Level 9 Mils
							#Enables Level 9 Civs
							#+4% Factory Throughput
							#+5% Max Factories in a State
							#+5% Factory Size
							#+5% Factory Build Cost
							#+8% Factory Industrial Goods Maintenance
							add_to_variable = { tech_factory_throughput = 0.04 }
							add_to_variable = { tech_factory_size = 0.05 }
							add_to_variable = { tech_factory_build_cost = 0.05 }
							add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
							
							if = {
								limit = {
									has_tech = factory_industry_3
								}
								#Enables Level 10 Mils
								#Enables Level 10 Civs
								#+4% Factory Throughput
								#+5% Max Factories in a State
								#+5% Factory Size
								#+5% Factory Build Cost
								#+8% Factory Industrial Goods Maintenance
								add_to_variable = { tech_factory_throughput = 0.04 }
								add_to_variable = { tech_factory_size = 0.05 }
								add_to_variable = { tech_factory_build_cost = 0.05 }
								add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
								
								if = {
									limit = {
										has_tech = factory_industry_4
									}
									#Enables Level 11 Mils
									#Enables Level 11 Civs
									#+4% Factory Throughput
									#+5% Max Factories in a State
									#+5% Factory Size
									#+5% Factory Build Cost
									#+8% Factory Industrial Goods Maintenance
									add_to_variable = { tech_factory_throughput = 0.04 }
									add_to_variable = { tech_factory_size = 0.05 }
									add_to_variable = { tech_factory_build_cost = 0.05 }
									add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
									
									if = {
										limit = {
											has_tech = factory_industry_5
										}
										#Enables Level 12 Mils
										#Enables Level 12 Civs
										#+4% Factory Throughput
										#+5% Max Factories in a State
										#+5% Factory Size
										#+5% Factory Build Cost
										#+8% Factory Industrial Goods Maintenance
										add_to_variable = { tech_factory_throughput = 0.04 }
										add_to_variable = { tech_factory_size = 0.05 }
										add_to_variable = { tech_factory_build_cost = 0.05 }
										add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
										
										if = {
											limit = {
												has_tech = factory_industry_6
											}
											#Enables Level 13 Mils
											#Enables Level 13 Civs
											#+4% Factory Throughput
											#+5% Max Factories in a State
											#+5% Factory Size
											#+5% Factory Build Cost
											#+8% Factory Industrial Goods Maintenance
											add_to_variable = { tech_factory_throughput = 0.04 }
											add_to_variable = { tech_factory_size = 0.05 }
											add_to_variable = { tech_factory_build_cost = 0.05 }
											add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
											
										}
									}
								}
							}
						}
					}
				}

			#
			#Tools
				if = {
					limit = {
						has_tech = industrial_era_tools_1
					}
					#Enables Level 5 Logging Camp
					#-5% Build Cost
					add_to_variable = { tech_build_cost = -0.05 }

					if = {
						limit = {
							has_tech = industrial_era_tools_2
						}
						#-2.5% Build Cost
						add_to_variable = { tech_build_cost = -0.025 }

						if = {
							limit = {
								has_tech = industrial_era_tools_3
							}
							#Enables Level 8 Logging Camp
							#-2.5% Build Cost
							add_to_variable = { tech_build_cost = -0.025 }

							if = {
								limit = {
									has_tech = industrial_era_tools_4
								}
								#-2.5% Build Cost
								add_to_variable = { tech_build_cost = -0.025 }

								if = {
									limit = {
										has_tech = industrial_era_tools_5
									}
									#Enables Level 10 Logging Camp
									#-2.5% Build Cost
									add_to_variable = { tech_build_cost = -0.025 }

									if = {
										limit = {
											has_tech = industrial_era_tools_6
										}
										#-2.5% Build Cost
										add_to_variable = { tech_build_cost = -0.025 }

										if = {
											limit = {
												has_tech = industrial_era_tools_7
											}
											#-2.5% Build Cost
											add_to_variable = { tech_build_cost = -0.025 }

											if = {
												limit = {
													has_tech = industrial_era_tools_8
												}
												#-2.5% Build Cost
												add_to_variable = { tech_build_cost = -0.025 }

											}
										}
									}
								}
							}
						}
					}
				}
			#
			#Construction
				if = {
					limit = {
						has_tech = construction_1
					}
					#Enables Level 9 Naval Dockyard
					#Enables Level 9 Naval Base
					#Enables Level 2 Land Fort
					#Enables Level 2 Coastal Fort
					#+5% Construction Speed
					#+5% Build Speed
					add_to_variable = { tech_build_speed = 0.10 }

					if = {
						limit = {
							has_tech = construction_2
						}
						#Enables Level 4 Land Fort
						#Enables Level 4 Coastal Fort
						#+2.5% Construction Speed
						#+5% Build Speed
						add_to_variable = { tech_build_speed = 0.05 }

						if = {
							limit = {
								has_tech = construction_3
							}
							#Enables Level 10 Naval Dockyard
							#Enables Level 10 Naval Base
							#Enables Level 6 Land Fort
							#Enables Level 6 Coastal Fort
							#+10% Construction Speed
							#+20% Build Speed
							add_to_variable = { tech_build_speed = 0.20 }

							if = {
								limit = {
									has_tech = construction_4
								}
								#Enables Level 8 Land Fort
								#Enables Level 8 Coastal Fort
								#+5% Construction Speed
								#+10% Build Speed
								add_to_variable = { tech_build_speed = 0.10 }

							}
						}
					}
				}
			#
			#Mechanical Production
				if = {
					limit = {
						has_tech = corliss_steam_engine
					}
					#+5% Factory Output
					#+5% Dockyard Output
					#+8% Factory Throughput
					#+4% Everyday Goods Factory Throughput
					#-8% Factory Industrial Goods Maintenance
					add_to_variable = { tech_factory_throughput = 0.08 }
					add_to_variable = { tech_factory_everyday_goods_throughput = 0.04 }
					add_to_variable = { tech_factory_industrial_goods_maintenance = -0.08 }

					if = {
						limit = {
							has_tech = mechanical_production_1
						}
						#+5% Factory Output
						#+5% Dockyard Output
						#+8% Factory Throughput
						#+4% Everyday Goods Factory Throughput
						#+8% Factory Industrial Goods Maintenance
						#+10% Factory Build Cost
						add_to_variable = { tech_factory_throughput = 0.08 }
						add_to_variable = { tech_factory_everyday_goods_throughput = 0.04 }
						add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
						add_to_variable = { tech_factory_build_cost = 0.10 }

						if = {
							limit = {
								has_tech = mechanical_production_2
							}
							#+5% Factory Output
							#+5% Dockyard Output
							#+4% Factory Throughput
							#+2% Everyday Goods Factory Throughput
							#+4% Factory Industrial Goods Maintenance
							#+5% Factory Build Cost
							add_to_variable = { tech_factory_throughput = 0.04 }
							add_to_variable = { tech_factory_everyday_goods_throughput = 0.02 }
							add_to_variable = { tech_factory_industrial_goods_maintenance = 0.04 }
							add_to_variable = { tech_factory_build_cost = 0.10 }

							if = {
								limit = {
									has_tech = mechanical_production_3
								}
								#+5% Factory Output
								#+5% Dockyard Output
								#+8% Factory Throughput
								#+4% Everyday Goods Factory Throughput
								#+8% Factory Industrial Goods Maintenance
								#+10% Factory Build Cost
								add_to_variable = { tech_factory_throughput = 0.08 }
								add_to_variable = { tech_factory_everyday_goods_throughput = 0.04 }
								add_to_variable = { tech_factory_industrial_goods_maintenance = 0.08 }
								add_to_variable = { tech_factory_build_cost = 0.10 }

							}
						}
					}
				}
			#
			#Machine Tools
				if = {
					limit = {
						has_tech = interchange_parts
					}
					#+5% Industrial Efficiency Growth
					#+4% Factory Throughput
					#+8% Industrial Goods Factory Throughput
					#+4% Factory Industrial Goods Maintenance
					add_to_variable = { tech_factory_throughput = 0.04 }
					add_to_variable = { tech_factory_industrial_goods_throughput = 0.08 }
					add_to_variable = { tech_factory_industrial_goods_maintenance = 0.04 }
					
					if = {
						limit = {
							has_tech = machine_tools_1
						}
						#Enable Level 1 Machine Parts Factory
						#+5% Industrial Efficiency Growth
						#+4% Factory Throughput
						#+8% Industrial Goods Factory Throughput
						#+4% Factory Industrial Goods Maintenance
						add_to_variable = { tech_factory_throughput = 0.04 }
						add_to_variable = { tech_factory_industrial_goods_throughput = 0.08 }
						add_to_variable = { tech_factory_industrial_goods_maintenance = 0.04 }
						
						if = {
							limit = {
								has_tech = machine_tools_2
							}
							#Enable Level 2 Machine Parts Factory
							#+5% Production Efficiency Growth
							#+2% Factory Throughput
							#+4% Industrial Goods Factory Throughput
							#+2% Factory Industrial Goods Maintenance
							add_to_variable = { tech_factory_throughput = 0.02 }
							add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
							add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
							
							if = {
								limit = {
									has_tech = machine_tools_3
								}
								#Enable Level 3 Machine Parts Factory
								#+5% Industrial Efficiency Growth
								#+2% Factory Throughput
								#+4% Industrial Goods Factory Throughput
								#+2% Factory Industrial Goods Maintenance
								add_to_variable = { tech_factory_throughput = 0.02 }
								add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
								add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
								
								if = {
									limit = {
										has_tech = machine_tools_4
									}
									#Enable Level 4 Machine Parts Factory
									#+5% Production Efficiency Growth
									#+2% Factory Throughput
									#+4% Industrial Goods Factory Throughput
									#+2% Factory Industrial Goods Maintenance
									add_to_variable = { tech_factory_throughput = 0.02 }
									add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
									add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
									
									if = {
										limit = {
											has_tech = machine_tools_5
										}
										#Enable Level 5 Machine Parts Factory
										#+5% Industrial Efficiency Growth
										#+2% Factory Throughput
										#+4% Industrial Goods Factory Throughput
										#+2% Factory Industrial Goods Maintenance
										add_to_variable = { tech_factory_throughput = 0.02 }
										add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
										add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
										
										if = {
											limit = {
												has_tech = machine_tools_6
											}
											#Enable Level 6 Machine Parts Factory
											#+5% Production Efficiency Growth
											#+2% Factory Throughput
											#+4% Industrial Goods Factory Throughput
											#+2% Factory Industrial Goods Maintenance
											add_to_variable = { tech_factory_throughput = 0.02 }
											add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
											add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
											
											if = {
												limit = {
													has_tech = machine_tools_7
												}
												#Enable Level 7 Machine Parts Factory
												#+5% Industrial Efficiency Growth
												#+2% Factory Throughput
												#+4% Industrial Goods Factory Throughput
												#+2% Factory Industrial Goods Maintenance
												add_to_variable = { tech_factory_throughput = 0.02 }
												add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
												add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
												
												if = {
													limit = {
														has_tech = machine_tools_8
													}
													#Enable Level 8 Machine Parts Factory
													#+5% Production Efficiency Growth
													#+2% Factory Throughput
													#+4% Industrial Goods Factory Throughput
													#+2% Factory Industrial Goods Maintenance
													add_to_variable = { tech_factory_throughput = 0.02 }
													add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
													add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
													
													if = {
														limit = {
															has_tech = machine_tools_9
														}
														#Enable Level 9 Machine Parts Factory
														#+5% Industrial Efficiency Growth
														#+2% Factory Throughput
														#+4% Industrial Goods Factory Throughput
														#+2% Factory Industrial Goods Maintenance
														add_to_variable = { tech_factory_throughput = 0.02 }
														add_to_variable = { tech_factory_industrial_goods_throughput = 0.04 }
														add_to_variable = { tech_factory_industrial_goods_maintenance = 0.02 }
														
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			#
		#
		
		#Process Engineering
			#Chemical Process
				if = {
					limit = {
						has_tech = hot_blast_furnaces
					}
					#+5% Production Efficiency Cap
					#-4% Factory Raw Goods Input
					add_to_variable = { tech_factory_raw_goods_input = -0.04 }
					
					if = {
						limit = {
							has_tech = industrial_blast_furnace
						}
						#Enables Level 1 Steel Mill
						#+10% Production Efficiency Cap
						#+4% Factory Throughput
						#-4% Factory Raw Goods Input
						add_to_variable = { tech_factory_throughput = 0.04 }
						add_to_variable = { tech_factory_raw_goods_input = -0.04 }
						
						if = {
							limit = {
								has_tech = cast_iron_industrialization
							}
							#+5% Production Efficiency Retention
							#+10% Industrial Goods Throughput
							add_to_variable = { tech_factory_industrial_goods_throughput = 0.08 }
							
							if = {
								limit = {
									has_tech = dry_puddling_process
								}
								#+5% Industrial Goods Output
								add_to_variable = { tech_factory_industrial_goods_output = 0.04 }
								
								if = {
									limit = {
										has_tech = bessemer_process
									}
									#Enables Level 3 Steel Mill
									#+10% Factory Output
									#+10% Dockyard Output
									#+16% Industrial Goods Throughput
									add_to_variable = { tech_factory_industrial_goods_throughput = 0.16 }
									
									if = {
										limit = {
											has_tech = industrial_ironworks_1
										}
										#+5% Factory Output
										#+5% Dockyard Output
										#+8% Industrial Goods Throughput
										add_to_variable = { tech_factory_industrial_goods_throughput = 0.08 }
										
										if = {
											limit = {
												has_tech = stainless_steel
											}
											#+5% Construction Speed
											#-5% Build Cost
											add_to_variable = { tech_build_cost = -0.05 }
											
										}
									}
								}
							}
						}
					}
				}
			#
			#Forges/Wrought Iron
				if = {
					limit = {
						has_tech = industrial_finery_forge
					}
					#+4% Industrial Goods Output
					add_to_variable = { tech_factory_industrial_goods_output = 0.04 }
					
					if = {
						limit = {
							has_tech = wrought_iron_industrialization
						}
						#+4% Industrial Goods Output
						add_to_variable = { tech_factory_industrial_goods_output = 0.04 }
						
					}
				}
			#
			#Metallurgy
				if = {
					limit = {
						has_tech = regenerative_furnace
					}
					#+4% Industrial Goods Output
					add_to_variable = { tech_factory_industrial_goods_output = 0.04 }
					
					if = {
						limit = {
							has_tech = siemens_martin_process
						}
						#+4% Industrial Goods Output
						add_to_variable = { tech_factory_industrial_goods_output = 0.04 }
						
					}
				}
			#
			#Oil Refining
				if = {
					limit = {
						has_tech = refining
					}
					#Enables Level 1 Coal Mine
					#+5% Resource Gain Efficiency
					#+10% Raw Goods Output
					#+10% Valuable Goods Output
					add_to_variable = { tech_raw_goods_output = 0.10 }
					add_to_variable = { tech_valuable_goods_output = 0.10 }

					if = {
						limit = {
							has_tech = early_oil_refining
						}
						#+5% Synthetic Oil
						#+2.5% Raw Goods Output
						add_to_variable = { tech_raw_goods_output = 0.025 }

						if = {
							limit = {
								has_tech = oil_refinery_1
							}
							#+10% Synthetic Oil
							#+2.5% Raw Goods Output
							add_to_variable = { tech_raw_goods_output = 0.025 }

							if = {
								limit = {
									has_tech = oil_refinery_2
								}
								#+10% Synthetic Oil
								#+2.5% Raw Goods Output
								add_to_variable = { tech_raw_goods_output = 0.025 }

								if = {
									limit = {
										has_tech = oil_refinery_2
									}
									#+10% Synthetic Oil
									#+2.5% Raw Goods Output
									add_to_variable = { tech_raw_goods_output = 0.025 }

								}
							}
						}
					}
				}
			#
			#Mining Rig
				if = {
					limit = {
						has_tech = mechanized_mining
					}
					#Enables Level 3 Coal Mine
					#+10% Resource Gain Efficiency
					#+20% Raw Goods Output
					#+20% Valuable Goods Output
					add_to_variable = { tech_raw_goods_output = 0.20 }
					add_to_variable = { tech_valuable_goods_output = 0.20 }

					if = {
						limit = {
							has_tech = mining_rig_2
						}
						#Enables Level 4 Coal Mine
						#+10% Raw Goods Output
						#+10% Valuable Goods Output
						add_to_variable = { tech_raw_goods_output = 0.10 }
						add_to_variable = { tech_valuable_goods_output = 0.10 }
						
						if = {
							limit = {
								has_tech = mining_rig_3
							}
							#Enables Level 5 Coal Mine
							#+10% Raw Goods Output
							#+10% Valuable Goods Output
							add_to_variable = { tech_raw_goods_output = 0.10 }
							add_to_variable = { tech_valuable_goods_output = 0.10 }
							
						}
					}
				}

			#
		#
		
		#Biochemistry
			#Fertilizer
				if = {
					limit = {
						has_tech = early_artificial_fertilizer
					}
					#+15% Life Goods Output
					add_to_variable = { tech_life_goods_output = 0.15 }
					
					if = {
						limit = {
							has_tech = high_phosphate_fertilizer
						}
						#+25% Life Goods Output
						add_to_variable = { tech_life_goods_output = 0.25 }
						
						if = {
							limit = {
								has_tech = copper_salts_pesticides
							}
							#+10% Life Goods Output
							add_to_variable = { tech_life_goods_output = 0.10 }
							if = {
								limit = {
									has_tech = fungicides
								}
								#+25% Life Goods Output
								add_to_variable = { tech_life_goods_output = 0.25 }
							}
						}
						if = {
							limit = {
								has_tech = industrial_fertilizers
							}
							#+25% Life Goods Output
							add_to_variable = { tech_life_goods_output = 0.25 }
						}
					}
				}
			#
			#Agriculture
				if = { #Farms
					limit = {
						has_tech = pre_industrial_farms
					}
					#+20% Life Goods Output
					#-2.5% RGO Max Size
					add_to_variable = { tech_life_goods_output = 0.20 }
					add_to_variable = { tech_rgo_max_size = -0.025 }
					if = {
						limit = {
							has_tech = cottage_industry_1
						}
						#+10% Life Goods Output
						#-2.5% RGO Max Size
						add_to_variable = { tech_life_goods_output = 0.10 }
						add_to_variable = { tech_rgo_max_size = -0.025 }
						if = {
							limit = {
								has_tech = cottage_industry_2
							}
							#+10% Life Goods Output
							#-2.5% RGO Max Size
							add_to_variable = { tech_life_goods_output = 0.10 }
							add_to_variable = { tech_rgo_max_size = -0.025 }
							if = {
								limit = {
									has_tech = barbed_wire_fencing
								}
								#+15% Life Goods Output
								add_to_variable = { tech_life_goods_output = 0.15 }
							}
						}
					}
				}
				if = {
					limit = {
						has_tech = mechanized_farming
					}
					#+5% Life Goods RGOs Max Mechanization
					add_to_variable = { tech_life_goods_rgos_max_mechanization = 0.05 }
					if = {
						limit = {
							has_tech = threshing_machine
						}
						#+2.5% Life Goods RGOs Max Mechanization
						add_to_variable = { tech_life_goods_rgos_max_mechanization = 0.025 }
					}
				}
				if = {
					limit = {
						has_tech = manufactured_seed_drill
					}
					#+2.5% Life Goods RGOs Max Mechanization
					add_to_variable = { tech_life_goods_rgos_max_mechanization = 0.025 }
				}
				if = { #Agricultural Engineering & Tractors
					limit = {
						has_tech = agricultural_engineering
					}
					#+10% Life Goods Output
					add_to_variable = { tech_life_goods_output = 0.10 }
					if = {
						limit = {
							has_tech = late_traction_engines
						}
						#+2.5% Life Goods RGOs Max Mechanization
						add_to_variable = { tech_life_goods_rgos_max_mechanization = 0.025 }
					}
				}
			#
		#
		
		#Electrics and Instruments
			#Explosives
				if = {
					limit = {
						has_tech = nitroglycerine
					}
					#+5% Resource Gain Efficiency
					#+20% Raw Goods Output
					#+20% Valuable Goods Output
					add_to_variable = { tech_raw_goods_output = 0.20 }
					add_to_variable = { tech_valuable_goods_output = 0.20 }
					if = {
						limit = {
							has_tech = dynamite
						}
						#+5% Resource Gain Efficiency
						#+20% Raw Goods Output
						#+20% Valuable Goods Output
						add_to_variable = { tech_raw_goods_output = 0.20 }
						add_to_variable = { tech_valuable_goods_output = 0.20 }
					}
				}
			#
		#

	}
#

#Misc Scripts

sort = {
	358 = {
		clear_array = buildings
		add_to_array = { buildings = arms_factory_level }
		add_to_array = { buildings = industrial_complex_level  }
		add_to_array = { buildings = building_level@dockyard }
		add_to_array = { buildings = infrastructure_level  }
		
		set_temp_variable = { length_temp = buildings^num }
		for_loop_effect = {
			start = 0
			end = length_temp
			add = 1
			value = v
			break = b
			find_highest_in_array = {
				array = buildings
				value = buildings_highest_value
				index = buildings_highest_index
			}
			remove_from_array = {
				array = buildings
				index = buildings_highest_index
			}
			add_to_temp_array = { 
				array = buildings_temp
				value = buildings_highest_value 
			}
		}
		for_loop_effect = {
			start = 0
			end = length_temp
			add = 1
			value = v
			break = b
			add_to_array = { 
				array = buildings
				value = buildings_temp^v 
			}
		}

	}
}

# HoI4 State Land Connection Indexer by Yard1
# Provides a simple way to check if two states share a land connection
# Call the scripted effect below in on_startup from a country scope (any will do, I suggest random_country)
# In order to check if two states have a land connection to each other, compare their state_land_connection_index variables. If they are the same, then they have a land connection.
mark_land_connected_states = {
	random_country = {
		set_variable = { global.current_state_land_connection_index = 1 }
		every_state = {
			add_to_array = { global.unchecked_land_connection_states = THIS }
		}
		while_loop_effect = {
			limit = {
				check_variable = { global.unchecked_land_connection_states^num > 0 }
			}
			log = "Run land connection loop with index [?global.current_state_land_connection_index|0], [?global.unchecked_land_connection_states^num|0] states left to index"
			var:global.unchecked_land_connection_states^0 = {
				log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName]"
				set_variable = { state_land_connection_index = global.current_state_land_connection_index }
				every_neighbor_state = {
					log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName], neighbor of [?prev.GetName]"
					set_variable = { state_land_connection_index = global.current_state_land_connection_index }
					if = {
						limit = { is_in_array = { global.unchecked_land_connection_states = THIS } }
						remove_from_array = { global.unchecked_land_connection_states = THIS }
					}
				}
				remove_from_array = { global.unchecked_land_connection_states = THIS }
			}
			set_temp_variable = { temp_lc_state = 0 }
			while_loop_effect = {
				limit = {
					any_of = {
						array = global.unchecked_land_connection_states
						var:v = {
							any_neighbor_state = { has_variable = state_land_connection_index }
						}
						set_temp_variable = { global.temp_lc_state = v }
					}
				}
				if = {
					limit = { NOT = { check_variable = { temp_lc_state = 0 } } }
					log = "Found [?temp_lc_state.GetName] as a neighbor of an indexed state"
					var:temp_lc_state = {
						log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName]"
						set_variable = { state_land_connection_index = global.current_state_land_connection_index }
						remove_from_array = { global.unchecked_land_connection_states = THIS }
						every_neighbor_state = {
							log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName], neighbor of [?prev.GetName]"
							set_variable = { state_land_connection_index = global.current_state_land_connection_index }
							if = {
								limit = { is_in_array = { global.unchecked_land_connection_states = THIS } }
								remove_from_array = { global.unchecked_land_connection_states = THIS }
							}
						}
					}
				}
			}
			log = "Land connection loop done, [?global.unchecked_land_connection_states^num|0] states left to index"
			log = "----"
			add_to_variable = { global.current_state_land_connection_index = 1 }
		}
		clear_variable = global.current_state_land_connection_index
		clear_array = global.unchecked_land_connection_states
	}
}
#Put in on_startup in a country scope (any, doesn’t matter which, you can use random_country)
#In order to check if two states have a land connection to each other, compare their state_land_connection_index variables. If they are the same, then they have a land connection. Example:
# If this returns true, then the capitals of THIS and FROM share a land connection
	#check_variable = { THIS.capital.state_land_connection_index = FROM.capital.state_land_connection_index }



calc_supply_demand = {
	set_variable = { supply = 0 }
	set_variable = { demand = 0 }
	set_variable = { offers = 0 }
	set_variable = { requests = 0 }
	every_controlled_state = {
		set_variable = { supply = production }
		set_variable = { demand = need }
		divide_variable = { demand = PREV.price }

		set_temp_variable = { trade_temp = supply }
		subtract_from_temp_variable = { trade_temp = demand }

		if = {
			limit = { 
				check_variable = { trade_temp > 0 } #More Supply
			}
			if = {
				limit = {
					check_variable = { trade_temp > infra }
				}
				set_temp_variable = { trade_temp = infra }
			}
			set_variable = { trade_amount = trade_temp }
			add_to_variable = { PREV.offers = trade_temp }
			add_to_temp_variable = { trade_temp = demand }
			
			add_to_variable = { PREV.supply = trade_temp }
			add_to_variable = { PREV.demand = demand }
		}
		if = {
			limit = { 
				check_variable = { trade_temp < 0 } #More Demand
			}
			multiply_temp_variable = { trade_temp = -1 }
			if = {
				limit = {
					check_variable = { trade_temp > infra }
				}
				set_temp_variable = { trade_temp = infra }
			}
			set_variable = { trade_amount = trade_temp }
			add_to_variable = { PREV.requests = trade_temp }
			add_to_temp_variable = { trade_temp = supply }

			add_to_variable = { PREV.supply = supply }
			add_to_variable = { PREV.demand = trade_temp }
		}
	}
}